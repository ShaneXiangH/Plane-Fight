
testproj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008814  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000186c  080089fc  080089fc  000189fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a268  0800a268  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800a268  0800a268  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a268  0800a268  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a26c  0800a26c  0001a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000070  0800a2e0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800a2e0  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000615c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014aa  00000000  00000000  000261f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  000276a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000548  00000000  00000000  00027c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a98  00000000  00000000  000281b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000626b  00000000  00000000  0003dc50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077173  00000000  00000000  00043ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb02e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018a0  00000000  00000000  000bb0ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	080089e4 	.word	0x080089e4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	080089e4 	.word	0x080089e4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 f945 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f007 fdb4 	bl	800858c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 f95d 	bl	8000d0e <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 f925 	bl	8000cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b05      	ldr	r3, [pc, #20]	; (8000aac <HAL_IncTick+0x1c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <HAL_IncTick+0x20>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr
 8000aac:	20000004 	.word	0x20000004
 8000ab0:	200000b8 	.word	0x200000b8

08000ab4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b02      	ldr	r3, [pc, #8]	; (8000ac4 <HAL_GetTick+0x10>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr
 8000ac4:	200000b8 	.word	0x200000b8

08000ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ad0:	f7ff fff0 	bl	8000ab4 <HAL_GetTick>
 8000ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ae0:	d005      	beq.n	8000aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <HAL_Delay+0x40>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000aee:	bf00      	nop
 8000af0:	f7ff ffe0 	bl	8000ab4 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d8f7      	bhi.n	8000af0 <HAL_Delay+0x28>
  {
  }
}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000004 	.word	0x20000004

08000b0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f003 0307 	and.w	r3, r3, #7
 8000b1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b28:	4013      	ands	r3, r2
 8000b2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <__NVIC_SetPriorityGrouping+0x44>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	3714      	adds	r7, #20
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <__NVIC_GetPriorityGrouping+0x18>)
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	0a1b      	lsrs	r3, r3, #8
 8000b5e:	f003 0307 	and.w	r3, r3, #7
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	4603      	mov	r3, r0
 8000b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	db0b      	blt.n	8000b9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	f003 021f 	and.w	r2, r3, #31
 8000b88:	4906      	ldr	r1, [pc, #24]	; (8000ba4 <__NVIC_EnableIRQ+0x34>)
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	095b      	lsrs	r3, r3, #5
 8000b90:	2001      	movs	r0, #1
 8000b92:	fa00 f202 	lsl.w	r2, r0, r2
 8000b96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	e000e100 	.word	0xe000e100

08000ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	db0a      	blt.n	8000bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b2da      	uxtb	r2, r3
 8000bc0:	490c      	ldr	r1, [pc, #48]	; (8000bf4 <__NVIC_SetPriority+0x4c>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	0112      	lsls	r2, r2, #4
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	440b      	add	r3, r1
 8000bcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd0:	e00a      	b.n	8000be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4908      	ldr	r1, [pc, #32]	; (8000bf8 <__NVIC_SetPriority+0x50>)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f003 030f 	and.w	r3, r3, #15
 8000bde:	3b04      	subs	r3, #4
 8000be0:	0112      	lsls	r2, r2, #4
 8000be2:	b2d2      	uxtb	r2, r2
 8000be4:	440b      	add	r3, r1
 8000be6:	761a      	strb	r2, [r3, #24]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	e000e100 	.word	0xe000e100
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c10:	69fb      	ldr	r3, [r7, #28]
 8000c12:	f1c3 0307 	rsb	r3, r3, #7
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	bf28      	it	cs
 8000c1a:	2304      	movcs	r3, #4
 8000c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3304      	adds	r3, #4
 8000c22:	2b06      	cmp	r3, #6
 8000c24:	d902      	bls.n	8000c2c <NVIC_EncodePriority+0x30>
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3b03      	subs	r3, #3
 8000c2a:	e000      	b.n	8000c2e <NVIC_EncodePriority+0x32>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	401a      	ands	r2, r3
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	f04f 31ff 	mov.w	r1, #4294967295
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4e:	43d9      	mvns	r1, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	4313      	orrs	r3, r2
         );
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3724      	adds	r7, #36	; 0x24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff90 	bl	8000ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff2d 	bl	8000b0c <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff42 	bl	8000b54 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff90 	bl	8000bfc <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5f 	bl	8000ba8 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ff35 	bl	8000b70 <__NVIC_EnableIRQ>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}

08000d0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f7ff ffa2 	bl	8000c60 <SysTick_Config>
 8000d1c:	4603      	mov	r3, r0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b08b      	sub	sp, #44	; 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3a:	e133      	b.n	8000fa4 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 8122 	bne.w	8000f9e <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d034      	beq.n	8000dcc <HAL_GPIO_Init+0xa4>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d80d      	bhi.n	8000d82 <HAL_GPIO_Init+0x5a>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d02b      	beq.n	8000dc2 <HAL_GPIO_Init+0x9a>
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d804      	bhi.n	8000d78 <HAL_GPIO_Init+0x50>
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d031      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d01c      	beq.n	8000db0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d76:	e048      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d043      	beq.n	8000e04 <HAL_GPIO_Init+0xdc>
 8000d7c:	2b11      	cmp	r3, #17
 8000d7e:	d01b      	beq.n	8000db8 <HAL_GPIO_Init+0x90>
          break;
 8000d80:	e043      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d82:	4a8f      	ldr	r2, [pc, #572]	; (8000fc0 <HAL_GPIO_Init+0x298>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d026      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d88:	4a8d      	ldr	r2, [pc, #564]	; (8000fc0 <HAL_GPIO_Init+0x298>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d806      	bhi.n	8000d9c <HAL_GPIO_Init+0x74>
 8000d8e:	4a8d      	ldr	r2, [pc, #564]	; (8000fc4 <HAL_GPIO_Init+0x29c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d020      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000d94:	4a8c      	ldr	r2, [pc, #560]	; (8000fc8 <HAL_GPIO_Init+0x2a0>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d01d      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
          break;
 8000d9a:	e036      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d9c:	4a8b      	ldr	r2, [pc, #556]	; (8000fcc <HAL_GPIO_Init+0x2a4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000da2:	4a8b      	ldr	r2, [pc, #556]	; (8000fd0 <HAL_GPIO_Init+0x2a8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d016      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
 8000da8:	4a8a      	ldr	r2, [pc, #552]	; (8000fd4 <HAL_GPIO_Init+0x2ac>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d013      	beq.n	8000dd6 <HAL_GPIO_Init+0xae>
          break;
 8000dae:	e02c      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	623b      	str	r3, [r7, #32]
          break;
 8000db6:	e028      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	623b      	str	r3, [r7, #32]
          break;
 8000dc0:	e023      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	68db      	ldr	r3, [r3, #12]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e01e      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	330c      	adds	r3, #12
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e019      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d102      	bne.n	8000de4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dde:	2304      	movs	r3, #4
 8000de0:	623b      	str	r3, [r7, #32]
          break;
 8000de2:	e012      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b01      	cmp	r3, #1
 8000dea:	d105      	bne.n	8000df8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000dec:	2308      	movs	r3, #8
 8000dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69fa      	ldr	r2, [r7, #28]
 8000df4:	611a      	str	r2, [r3, #16]
          break;
 8000df6:	e008      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	69fa      	ldr	r2, [r7, #28]
 8000e00:	615a      	str	r2, [r3, #20]
          break;
 8000e02:	e002      	b.n	8000e0a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
          break;
 8000e08:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e0a:	69bb      	ldr	r3, [r7, #24]
 8000e0c:	2bff      	cmp	r3, #255	; 0xff
 8000e0e:	d801      	bhi.n	8000e14 <HAL_GPIO_Init+0xec>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	e001      	b.n	8000e18 <HAL_GPIO_Init+0xf0>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3304      	adds	r3, #4
 8000e18:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2bff      	cmp	r3, #255	; 0xff
 8000e1e:	d802      	bhi.n	8000e26 <HAL_GPIO_Init+0xfe>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	e002      	b.n	8000e2c <HAL_GPIO_Init+0x104>
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	3b08      	subs	r3, #8
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	210f      	movs	r1, #15
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	401a      	ands	r2, r3
 8000e3e:	6a39      	ldr	r1, [r7, #32]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	431a      	orrs	r2, r3
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	f000 80a2 	beq.w	8000f9e <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5a:	4b5f      	ldr	r3, [pc, #380]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	4a5e      	ldr	r2, [pc, #376]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	6193      	str	r3, [r2, #24]
 8000e66:	4b5c      	ldr	r3, [pc, #368]	; (8000fd8 <HAL_GPIO_Init+0x2b0>)
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	f003 0301 	and.w	r3, r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e72:	4a5a      	ldr	r2, [pc, #360]	; (8000fdc <HAL_GPIO_Init+0x2b4>)
 8000e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e76:	089b      	lsrs	r3, r3, #2
 8000e78:	3302      	adds	r3, #2
 8000e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	220f      	movs	r2, #15
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <HAL_GPIO_Init+0x2b8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d01f      	beq.n	8000ede <HAL_GPIO_Init+0x1b6>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a50      	ldr	r2, [pc, #320]	; (8000fe4 <HAL_GPIO_Init+0x2bc>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d019      	beq.n	8000eda <HAL_GPIO_Init+0x1b2>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	; (8000fe8 <HAL_GPIO_Init+0x2c0>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d013      	beq.n	8000ed6 <HAL_GPIO_Init+0x1ae>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4e      	ldr	r2, [pc, #312]	; (8000fec <HAL_GPIO_Init+0x2c4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d00d      	beq.n	8000ed2 <HAL_GPIO_Init+0x1aa>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2c8>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d007      	beq.n	8000ece <HAL_GPIO_Init+0x1a6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_GPIO_Init+0x2cc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d101      	bne.n	8000eca <HAL_GPIO_Init+0x1a2>
 8000ec6:	2305      	movs	r3, #5
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000eca:	2306      	movs	r3, #6
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x1b8>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ef0:	493a      	ldr	r1, [pc, #232]	; (8000fdc <HAL_GPIO_Init+0x2b4>)
 8000ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	68fa      	ldr	r2, [r7, #12]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f0a:	4b3b      	ldr	r3, [pc, #236]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	493a      	ldr	r1, [pc, #232]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
 8000f16:	e006      	b.n	8000f26 <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4935      	ldr	r1, [pc, #212]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f22:	4013      	ands	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d006      	beq.n	8000f40 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f32:	4b31      	ldr	r3, [pc, #196]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	4930      	ldr	r1, [pc, #192]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	604b      	str	r3, [r1, #4]
 8000f3e:	e006      	b.n	8000f4e <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f40:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	492b      	ldr	r1, [pc, #172]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d006      	beq.n	8000f68 <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	4926      	ldr	r1, [pc, #152]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	608b      	str	r3, [r1, #8]
 8000f66:	e006      	b.n	8000f76 <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	4921      	ldr	r1, [pc, #132]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f72:	4013      	ands	r3, r2
 8000f74:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d006      	beq.n	8000f90 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	491c      	ldr	r1, [pc, #112]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	60cb      	str	r3, [r1, #12]
 8000f8e:	e006      	b.n	8000f9e <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f90:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f92:	68da      	ldr	r2, [r3, #12]
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	4917      	ldr	r1, [pc, #92]	; (8000ff8 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000faa:	fa22 f303 	lsr.w	r3, r2, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	f47f aec4 	bne.w	8000d3c <HAL_GPIO_Init+0x14>
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	372c      	adds	r7, #44	; 0x2c
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	10210000 	.word	0x10210000
 8000fc4:	10110000 	.word	0x10110000
 8000fc8:	10120000 	.word	0x10120000
 8000fcc:	10310000 	.word	0x10310000
 8000fd0:	10320000 	.word	0x10320000
 8000fd4:	10220000 	.word	0x10220000
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010000 	.word	0x40010000
 8000fe0:	40010800 	.word	0x40010800
 8000fe4:	40010c00 	.word	0x40010c00
 8000fe8:	40011000 	.word	0x40011000
 8000fec:	40011400 	.word	0x40011400
 8000ff0:	40011800 	.word	0x40011800
 8000ff4:	40011c00 	.word	0x40011c00
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	460b      	mov	r3, r1
 8001006:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	689a      	ldr	r2, [r3, #8]
 800100c:	887b      	ldrh	r3, [r7, #2]
 800100e:	4013      	ands	r3, r2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d002      	beq.n	800101a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001014:	2301      	movs	r3, #1
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e001      	b.n	800101e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	807b      	strh	r3, [r7, #2]
 8001036:	4613      	mov	r3, r2
 8001038:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800103a:	787b      	ldrb	r3, [r7, #1]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001040:	887a      	ldrh	r2, [r7, #2]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001046:	e003      	b.n	8001050 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	041a      	lsls	r2, r3, #16
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	611a      	str	r2, [r3, #16]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	460b      	mov	r3, r1
 8001064:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68da      	ldr	r2, [r3, #12]
 800106a:	887b      	ldrh	r3, [r7, #2]
 800106c:	4013      	ands	r3, r2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001078:	e002      	b.n	8001080 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr
	...

0800108c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f006 f9aa 	bl	8007404 <HAL_GPIO_EXTI_Callback>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d101      	bne.n	80010ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e26c      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 8087 	beq.w	80011ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010dc:	4b92      	ldr	r3, [pc, #584]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 030c 	and.w	r3, r3, #12
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d00c      	beq.n	8001102 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010e8:	4b8f      	ldr	r3, [pc, #572]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f003 030c 	and.w	r3, r3, #12
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d112      	bne.n	800111a <HAL_RCC_OscConfig+0x5e>
 80010f4:	4b8c      	ldr	r3, [pc, #560]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001100:	d10b      	bne.n	800111a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001102:	4b89      	ldr	r3, [pc, #548]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d06c      	beq.n	80011e8 <HAL_RCC_OscConfig+0x12c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d168      	bne.n	80011e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e246      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001122:	d106      	bne.n	8001132 <HAL_RCC_OscConfig+0x76>
 8001124:	4b80      	ldr	r3, [pc, #512]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a7f      	ldr	r2, [pc, #508]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800112a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	e02e      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <HAL_RCC_OscConfig+0x98>
 800113a:	4b7b      	ldr	r3, [pc, #492]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a7a      	ldr	r2, [pc, #488]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	4b78      	ldr	r3, [pc, #480]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a77      	ldr	r2, [pc, #476]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800114c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e01d      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800115c:	d10c      	bne.n	8001178 <HAL_RCC_OscConfig+0xbc>
 800115e:	4b72      	ldr	r3, [pc, #456]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a71      	ldr	r2, [pc, #452]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b6f      	ldr	r3, [pc, #444]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a6e      	ldr	r2, [pc, #440]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e00b      	b.n	8001190 <HAL_RCC_OscConfig+0xd4>
 8001178:	4b6b      	ldr	r3, [pc, #428]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a6a      	ldr	r2, [pc, #424]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800117e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b68      	ldr	r3, [pc, #416]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a67      	ldr	r2, [pc, #412]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800118a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800118e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d013      	beq.n	80011c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001198:	f7ff fc8c 	bl	8000ab4 <HAL_GetTick>
 800119c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119e:	e008      	b.n	80011b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a0:	f7ff fc88 	bl	8000ab4 <HAL_GetTick>
 80011a4:	4602      	mov	r2, r0
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	2b64      	cmp	r3, #100	; 0x64
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e1fa      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	4b5d      	ldr	r3, [pc, #372]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d0f0      	beq.n	80011a0 <HAL_RCC_OscConfig+0xe4>
 80011be:	e014      	b.n	80011ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fc78 	bl	8000ab4 <HAL_GetTick>
 80011c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011c8:	f7ff fc74 	bl	8000ab4 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b64      	cmp	r3, #100	; 0x64
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e1e6      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	4b53      	ldr	r3, [pc, #332]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f0      	bne.n	80011c8 <HAL_RCC_OscConfig+0x10c>
 80011e6:	e000      	b.n	80011ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d063      	beq.n	80012be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011f6:	4b4c      	ldr	r3, [pc, #304]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001202:	4b49      	ldr	r3, [pc, #292]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d11c      	bne.n	8001248 <HAL_RCC_OscConfig+0x18c>
 800120e:	4b46      	ldr	r3, [pc, #280]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d116      	bne.n	8001248 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800121a:	4b43      	ldr	r3, [pc, #268]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d005      	beq.n	8001232 <HAL_RCC_OscConfig+0x176>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d001      	beq.n	8001232 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e1ba      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001232:	4b3d      	ldr	r3, [pc, #244]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	695b      	ldr	r3, [r3, #20]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	4939      	ldr	r1, [pc, #228]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001242:	4313      	orrs	r3, r2
 8001244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001246:	e03a      	b.n	80012be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d020      	beq.n	8001292 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001250:	4b36      	ldr	r3, [pc, #216]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001252:	2201      	movs	r2, #1
 8001254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001256:	f7ff fc2d 	bl	8000ab4 <HAL_GetTick>
 800125a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc29 	bl	8000ab4 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e19b      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d0f0      	beq.n	800125e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	4927      	ldr	r1, [pc, #156]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 800128c:	4313      	orrs	r3, r2
 800128e:	600b      	str	r3, [r1, #0]
 8001290:	e015      	b.n	80012be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b26      	ldr	r3, [pc, #152]	; (800132c <HAL_RCC_OscConfig+0x270>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001298:	f7ff fc0c 	bl	8000ab4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc08 	bl	8000ab4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e17a      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1f0      	bne.n	80012a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d03a      	beq.n	8001340 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d019      	beq.n	8001306 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d8:	f7ff fbec 	bl	8000ab4 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012e0:	f7ff fbe8 	bl	8000ab4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e15a      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0f0      	beq.n	80012e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012fe:	2001      	movs	r0, #1
 8001300:	f000 faa8 	bl	8001854 <RCC_Delay>
 8001304:	e01c      	b.n	8001340 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_RCC_OscConfig+0x274>)
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130c:	f7ff fbd2 	bl	8000ab4 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001312:	e00f      	b.n	8001334 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001314:	f7ff fbce 	bl	8000ab4 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b02      	cmp	r3, #2
 8001320:	d908      	bls.n	8001334 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e140      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
 8001326:	bf00      	nop
 8001328:	40021000 	.word	0x40021000
 800132c:	42420000 	.word	0x42420000
 8001330:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b9e      	ldr	r3, [pc, #632]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e9      	bne.n	8001314 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a6 	beq.w	800149a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b97      	ldr	r3, [pc, #604]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001354:	69db      	ldr	r3, [r3, #28]
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10d      	bne.n	800137a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	4b94      	ldr	r3, [pc, #592]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	4a93      	ldr	r2, [pc, #588]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001368:	61d3      	str	r3, [r2, #28]
 800136a:	4b91      	ldr	r3, [pc, #580]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	69db      	ldr	r3, [r3, #28]
 800136e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001372:	60bb      	str	r3, [r7, #8]
 8001374:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001376:	2301      	movs	r3, #1
 8001378:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137a:	4b8e      	ldr	r3, [pc, #568]	; (80015b4 <HAL_RCC_OscConfig+0x4f8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001386:	4b8b      	ldr	r3, [pc, #556]	; (80015b4 <HAL_RCC_OscConfig+0x4f8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a8a      	ldr	r2, [pc, #552]	; (80015b4 <HAL_RCC_OscConfig+0x4f8>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001392:	f7ff fb8f 	bl	8000ab4 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800139a:	f7ff fb8b 	bl	8000ab4 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b64      	cmp	r3, #100	; 0x64
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e0fd      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ac:	4b81      	ldr	r3, [pc, #516]	; (80015b4 <HAL_RCC_OscConfig+0x4f8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d106      	bne.n	80013ce <HAL_RCC_OscConfig+0x312>
 80013c0:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	6213      	str	r3, [r2, #32]
 80013cc:	e02d      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x334>
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4a75      	ldr	r2, [pc, #468]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013dc:	f023 0301 	bic.w	r3, r3, #1
 80013e0:	6213      	str	r3, [r2, #32]
 80013e2:	4b73      	ldr	r3, [pc, #460]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4a72      	ldr	r2, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013e8:	f023 0304 	bic.w	r3, r3, #4
 80013ec:	6213      	str	r3, [r2, #32]
 80013ee:	e01c      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b05      	cmp	r3, #5
 80013f6:	d10c      	bne.n	8001412 <HAL_RCC_OscConfig+0x356>
 80013f8:	4b6d      	ldr	r3, [pc, #436]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	4a6c      	ldr	r2, [pc, #432]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	f043 0304 	orr.w	r3, r3, #4
 8001402:	6213      	str	r3, [r2, #32]
 8001404:	4b6a      	ldr	r3, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4a69      	ldr	r2, [pc, #420]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6213      	str	r3, [r2, #32]
 8001410:	e00b      	b.n	800142a <HAL_RCC_OscConfig+0x36e>
 8001412:	4b67      	ldr	r3, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	6a1b      	ldr	r3, [r3, #32]
 8001416:	4a66      	ldr	r2, [pc, #408]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	f023 0301 	bic.w	r3, r3, #1
 800141c:	6213      	str	r3, [r2, #32]
 800141e:	4b64      	ldr	r3, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4a63      	ldr	r2, [pc, #396]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 0304 	bic.w	r3, r3, #4
 8001428:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	68db      	ldr	r3, [r3, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d015      	beq.n	800145e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001432:	f7ff fb3f 	bl	8000ab4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800143a:	f7ff fb3b 	bl	8000ab4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	f241 3288 	movw	r2, #5000	; 0x1388
 8001448:	4293      	cmp	r3, r2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e0ab      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001450:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0ee      	beq.n	800143a <HAL_RCC_OscConfig+0x37e>
 800145c:	e014      	b.n	8001488 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fb29 	bl	8000ab4 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001464:	e00a      	b.n	800147c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001466:	f7ff fb25 	bl	8000ab4 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	f241 3288 	movw	r2, #5000	; 0x1388
 8001474:	4293      	cmp	r3, r2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e095      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147c:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 800147e:	6a1b      	ldr	r3, [r3, #32]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ee      	bne.n	8001466 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001488:	7dfb      	ldrb	r3, [r7, #23]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d105      	bne.n	800149a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	4a47      	ldr	r2, [pc, #284]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001498:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	f000 8081 	beq.w	80015a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014a4:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 030c 	and.w	r3, r3, #12
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	d061      	beq.n	8001574 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d146      	bne.n	8001546 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b8:	4b3f      	ldr	r3, [pc, #252]	; (80015b8 <HAL_RCC_OscConfig+0x4fc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff faf9 	bl	8000ab4 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c6:	f7ff faf5 	bl	8000ab4 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e067      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014d8:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f0      	bne.n	80014c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a1b      	ldr	r3, [r3, #32]
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ec:	d108      	bne.n	8001500 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ee:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	492d      	ldr	r1, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001500:	4b2b      	ldr	r3, [pc, #172]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a19      	ldr	r1, [r3, #32]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	430b      	orrs	r3, r1
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	4313      	orrs	r3, r2
 8001516:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001518:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_RCC_OscConfig+0x4fc>)
 800151a:	2201      	movs	r2, #1
 800151c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151e:	f7ff fac9 	bl	8000ab4 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001526:	f7ff fac5 	bl	8000ab4 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e037      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x46a>
 8001544:	e02f      	b.n	80015a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001546:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <HAL_RCC_OscConfig+0x4fc>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fab2 	bl	8000ab4 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001554:	f7ff faae 	bl	8000ab4 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e020      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x498>
 8001572:	e018      	b.n	80015a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e013      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	429a      	cmp	r2, r3
 8001592:	d106      	bne.n	80015a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800159e:	429a      	cmp	r2, r3
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
 80015b8:	42420060 	.word	0x42420060

080015bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d101      	bne.n	80015d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0d0      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015d0:	4b6a      	ldr	r3, [pc, #424]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	683a      	ldr	r2, [r7, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d910      	bls.n	8001600 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015de:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f023 0207 	bic.w	r2, r3, #7
 80015e6:	4965      	ldr	r1, [pc, #404]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ee:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d001      	beq.n	8001600 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e0b8      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d020      	beq.n	800164e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001618:	4b59      	ldr	r3, [pc, #356]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	4a58      	ldr	r2, [pc, #352]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800161e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001622:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001630:	4b53      	ldr	r3, [pc, #332]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4a52      	ldr	r2, [pc, #328]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001636:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800163a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800163c:	4b50      	ldr	r3, [pc, #320]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	494d      	ldr	r1, [pc, #308]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800164a:	4313      	orrs	r3, r2
 800164c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d040      	beq.n	80016dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001662:	4b47      	ldr	r3, [pc, #284]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d115      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e07f      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d107      	bne.n	800168a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e073      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b3d      	ldr	r3, [pc, #244]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e06b      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f023 0203 	bic.w	r2, r3, #3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4936      	ldr	r1, [pc, #216]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 80016a8:	4313      	orrs	r3, r2
 80016aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ac:	f7ff fa02 	bl	8000ab4 <HAL_GetTick>
 80016b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016b4:	f7ff f9fe 	bl	8000ab4 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	; 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e053      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ca:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 020c 	and.w	r2, r3, #12
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1eb      	bne.n	80016b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d210      	bcs.n	800170c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b24      	ldr	r3, [pc, #144]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0207 	bic.w	r2, r3, #7
 80016f2:	4922      	ldr	r1, [pc, #136]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_ClockConfig+0x1c0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e032      	b.n	8001772 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001718:	4b19      	ldr	r3, [pc, #100]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4916      	ldr	r1, [pc, #88]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001726:	4313      	orrs	r3, r2
 8001728:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001736:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	490e      	ldr	r1, [pc, #56]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	4313      	orrs	r3, r2
 8001748:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800174a:	f000 f821 	bl	8001790 <HAL_RCC_GetSysClockFreq>
 800174e:	4601      	mov	r1, r0
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_ClockConfig+0x1c4>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	091b      	lsrs	r3, r3, #4
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	4a0a      	ldr	r2, [pc, #40]	; (8001784 <HAL_RCC_ClockConfig+0x1c8>)
 800175c:	5cd3      	ldrb	r3, [r2, r3]
 800175e:	fa21 f303 	lsr.w	r3, r1, r3
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_ClockConfig+0x1cc>)
 8001764:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <HAL_RCC_ClockConfig+0x1d0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff f960 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40022000 	.word	0x40022000
 8001780:	40021000 	.word	0x40021000
 8001784:	0800a230 	.word	0x0800a230
 8001788:	20000008 	.word	0x20000008
 800178c:	20000000 	.word	0x20000000

08001790 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001790:	b490      	push	{r4, r7}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001796:	4b2a      	ldr	r3, [pc, #168]	; (8001840 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001798:	1d3c      	adds	r4, r7, #4
 800179a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800179c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017a0:	4b28      	ldr	r3, [pc, #160]	; (8001844 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017a2:	881b      	ldrh	r3, [r3, #0]
 80017a4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61fb      	str	r3, [r7, #28]
 80017aa:	2300      	movs	r3, #0
 80017ac:	61bb      	str	r3, [r7, #24]
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	; 0x24
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80017ba:	4b23      	ldr	r3, [pc, #140]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 030c 	and.w	r3, r3, #12
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	d002      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x40>
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d003      	beq.n	80017d6 <HAL_RCC_GetSysClockFreq+0x46>
 80017ce:	e02d      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017d0:	4b1e      	ldr	r3, [pc, #120]	; (800184c <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d2:	623b      	str	r3, [r7, #32]
      break;
 80017d4:	e02d      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017e2:	4413      	add	r3, r2
 80017e4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017e8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d013      	beq.n	800181c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <HAL_RCC_GetSysClockFreq+0xb8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	0c5b      	lsrs	r3, r3, #17
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001802:	4413      	add	r3, r2
 8001804:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001808:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_RCC_GetSysClockFreq+0xbc>)
 800180e:	fb02 f203 	mul.w	r2, r2, r3
 8001812:	69bb      	ldr	r3, [r7, #24]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
 800181a:	e004      	b.n	8001826 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	623b      	str	r3, [r7, #32]
      break;
 800182a:	e002      	b.n	8001832 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <HAL_RCC_GetSysClockFreq+0xbc>)
 800182e:	623b      	str	r3, [r7, #32]
      break;
 8001830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001832:	6a3b      	ldr	r3, [r7, #32]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	bc90      	pop	{r4, r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	080089fc 	.word	0x080089fc
 8001844:	08008a0c 	.word	0x08008a0c
 8001848:	40021000 	.word	0x40021000
 800184c:	007a1200 	.word	0x007a1200
 8001850:	003d0900 	.word	0x003d0900

08001854 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <RCC_Delay+0x34>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <RCC_Delay+0x38>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0a5b      	lsrs	r3, r3, #9
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001870:	bf00      	nop
  }
  while (Delay --);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	1e5a      	subs	r2, r3, #1
 8001876:	60fa      	str	r2, [r7, #12]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f9      	bne.n	8001870 <RCC_Delay+0x1c>
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008
 800188c:	10624dd3 	.word	0x10624dd3

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a4:	4b46      	ldr	r3, [pc, #280]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4a45      	ldr	r2, [pc, #276]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018aa:	f043 0320 	orr.w	r3, r3, #32
 80018ae:	6193      	str	r3, [r2, #24]
 80018b0:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018bc:	4b40      	ldr	r3, [pc, #256]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d4:	4b3a      	ldr	r3, [pc, #232]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a39      	ldr	r2, [pc, #228]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b37      	ldr	r3, [pc, #220]	; (80019c0 <MX_GPIO_Init+0x130>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018f2:	4834      	ldr	r0, [pc, #208]	; (80019c4 <MX_GPIO_Init+0x134>)
 80018f4:	f7ff fb99 	bl	800102a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2104      	movs	r1, #4
 80018fc:	4832      	ldr	r0, [pc, #200]	; (80019c8 <MX_GPIO_Init+0x138>)
 80018fe:	f7ff fb94 	bl	800102a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYUP_Pin;
 8001902:	2301      	movs	r3, #1
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001906:	4b31      	ldr	r3, [pc, #196]	; (80019cc <MX_GPIO_Init+0x13c>)
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800190a:	2302      	movs	r3, #2
 800190c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEYUP_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0310 	add.w	r3, r7, #16
 8001912:	4619      	mov	r1, r3
 8001914:	482b      	ldr	r0, [pc, #172]	; (80019c4 <MX_GPIO_Init+0x134>)
 8001916:	f7ff fa07 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY0_Pin;
 800191a:	2320      	movs	r3, #32
 800191c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800191e:	4b2b      	ldr	r3, [pc, #172]	; (80019cc <MX_GPIO_Init+0x13c>)
 8001920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001922:	2301      	movs	r3, #1
 8001924:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY0_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4619      	mov	r1, r3
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_GPIO_Init+0x140>)
 800192e:	f7ff f9fb 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED0_Pin;
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	481e      	ldr	r0, [pc, #120]	; (80019c4 <MX_GPIO_Init+0x134>)
 800194c:	f7ff f9ec 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8001950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <MX_GPIO_Init+0x13c>)
 8001958:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0310 	add.w	r3, r7, #16
 8001962:	4619      	mov	r1, r3
 8001964:	4817      	ldr	r0, [pc, #92]	; (80019c4 <MX_GPIO_Init+0x134>)
 8001966:	f7ff f9df 	bl	8000d28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800196a:	2304      	movs	r3, #4
 800196c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196e:	2301      	movs	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2302      	movs	r3, #2
 8001978:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 0310 	add.w	r3, r7, #16
 800197e:	4619      	mov	r1, r3
 8001980:	4811      	ldr	r0, [pc, #68]	; (80019c8 <MX_GPIO_Init+0x138>)
 8001982:	f7ff f9d1 	bl	8000d28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2101      	movs	r1, #1
 800198a:	2006      	movs	r0, #6
 800198c:	f7ff f995 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001990:	2006      	movs	r0, #6
 8001992:	f7ff f9ae 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 1);
 8001996:	2201      	movs	r2, #1
 8001998:	2101      	movs	r1, #1
 800199a:	2017      	movs	r0, #23
 800199c:	f7ff f98d 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019a0:	2017      	movs	r0, #23
 80019a2:	f7ff f9a6 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 2);
 80019a6:	2202      	movs	r2, #2
 80019a8:	2101      	movs	r1, #1
 80019aa:	2028      	movs	r0, #40	; 0x28
 80019ac:	f7ff f985 	bl	8000cba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019b0:	2028      	movs	r0, #40	; 0x28
 80019b2:	f7ff f99e 	bl	8000cf2 <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010800 	.word	0x40010800
 80019c8:	40011400 	.word	0x40011400
 80019cc:	10110000 	.word	0x10110000
 80019d0:	40011000 	.word	0x40011000

080019d4 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;

//写寄存器函数
//data:寄存器值
void LCD_WR_REG(uint16_t data) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
	LCD_RS_CLR;  //写地址
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <LCD_WR_REG+0x40>)
 80019e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019e4:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <LCD_WR_REG+0x40>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <LCD_WR_REG+0x44>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <LCD_WR_REG+0x40>)
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <LCD_WR_REG+0x40>)
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <LCD_WR_REG+0x40>)
 8001a02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a06:	611a      	str	r2, [r3, #16]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40011000 	.word	0x40011000
 8001a18:	40010c00 	.word	0x40010c00

08001a1c <LCD_WR_DATAX>:
//写数据函数
//可以替代LCD_WR_DATAX宏,拿时间换空间.
//data:寄存器值
void LCD_WR_DATAX(uint16_t data) {
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <LCD_WR_DATAX+0x40>)
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <LCD_WR_DATAX+0x40>)
 8001a30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a34:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 8001a36:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <LCD_WR_DATAX+0x44>)
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <LCD_WR_DATAX+0x40>)
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <LCD_WR_DATAX+0x40>)
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <LCD_WR_DATAX+0x40>)
 8001a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4e:	611a      	str	r2, [r3, #16]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40011000 	.word	0x40011000
 8001a60:	40010c00 	.word	0x40010c00

08001a64 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void) {
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
	uint16_t t;
	GPIOB->CRL = 0X88888888; //PB0-7  上拉输入
 8001a6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001a6c:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001a70:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X88888888; //PB8-15 上拉输入
 8001a72:	4b1b      	ldr	r3, [pc, #108]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001a74:	f04f 3288 	mov.w	r2, #2290649224	; 0x88888888
 8001a78:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0X0000;     //全部输出0
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	60da      	str	r2, [r3, #12]

	LCD_RS_SET;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <LCD_RD_DATA+0x80>)
 8001a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a86:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 8001a88:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <LCD_RD_DATA+0x80>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8e:	615a      	str	r2, [r3, #20]
	//读取数据(读寄存器时,并不需要读2次)
	LCD_RD_CLR;
 8001a90:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <LCD_RD_DATA+0x80>)
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	615a      	str	r2, [r3, #20]
	if (lcddev.id == 0X8989)
 8001a96:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <LCD_RD_DATA+0x84>)
 8001a98:	889b      	ldrh	r3, [r3, #4]
 8001a9a:	f648 1289 	movw	r2, #35209	; 0x8989
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d102      	bne.n	8001aa8 <LCD_RD_DATA+0x44>
		HAL_Delay(1); // delay_us(2);//FOR 8989,延时2us
 8001aa2:	2001      	movs	r0, #1
 8001aa4:	f7ff f810 	bl	8000ac8 <HAL_Delay>
	t = DATAIN
 8001aa8:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	80fb      	strh	r3, [r7, #6]
	;
	LCD_RD_SET;
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <LCD_RD_DATA+0x80>)
 8001ab0:	2240      	movs	r2, #64	; 0x40
 8001ab2:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <LCD_RD_DATA+0x80>)
 8001ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aba:	611a      	str	r2, [r3, #16]

	GPIOB->CRL = 0X33333333; //PB0-7  上拉输出
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001abe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001ac2:	601a      	str	r2, [r3, #0]
	GPIOB->CRH = 0X33333333; //PB8-15 上拉输出
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001ac6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001aca:	605a      	str	r2, [r3, #4]
	GPIOB->ODR = 0XFFFF;    //全部输出高
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <LCD_RD_DATA+0x7c>)
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	60da      	str	r2, [r3, #12]
	return t;
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40010c00 	.word	0x40010c00
 8001ae4:	40011000 	.word	0x40011000
 8001ae8:	200000bc 	.word	0x200000bc

08001aec <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器编号
//LCD_RegValue:要写入的值
void LCD_WriteReg(uint16_t LCD_Reg, uint16_t LCD_RegValue) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	80fb      	strh	r3, [r7, #6]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80bb      	strh	r3, [r7, #4]
	LCD_WR_REG(LCD_Reg);
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff ff68 	bl	80019d4 <LCD_WR_REG>
	LCD_WR_DATA(LCD_RegValue);
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <LCD_WriteReg+0x4c>)
 8001b06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b0a:	611a      	str	r2, [r3, #16]
 8001b0c:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <LCD_WriteReg+0x4c>)
 8001b0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b12:	615a      	str	r2, [r3, #20]
 8001b14:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <LCD_WriteReg+0x50>)
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	60d3      	str	r3, [r2, #12]
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <LCD_WriteReg+0x4c>)
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	4b05      	ldr	r3, [pc, #20]	; (8001b38 <LCD_WriteReg+0x4c>)
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	611a      	str	r2, [r3, #16]
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <LCD_WriteReg+0x4c>)
 8001b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b2c:	611a      	str	r2, [r3, #16]
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40010c00 	.word	0x40010c00

08001b40 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器编号
//返回值:读到的值
uint16_t LCD_ReadReg(uint16_t LCD_Reg) {
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);  //写入要读的寄存器号
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff41 	bl	80019d4 <LCD_WR_REG>
	return LCD_RD_DATA();
 8001b52:	f7ff ff87 	bl	8001a64 <LCD_RD_DATA>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
	LCD_WR_REG(lcddev.wramcmd);
 8001b64:	4b03      	ldr	r3, [pc, #12]	; (8001b74 <LCD_WriteRAM_Prepare+0x14>)
 8001b66:	891b      	ldrh	r3, [r3, #8]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff33 	bl	80019d4 <LCD_WR_REG>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200000bc 	.word	0x200000bc

08001b78 <LCD_SetCursor>:
		LCD_WriteReg(0X07, 0x0);	//关闭显示
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	80fb      	strh	r3, [r7, #6]
 8001b84:	4613      	mov	r3, r2
 8001b86:	80bb      	strh	r3, [r7, #4]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8001b88:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001b8a:	889b      	ldrh	r3, [r3, #4]
 8001b8c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d005      	beq.n	8001ba0 <LCD_SetCursor+0x28>
 8001b94:	4b70      	ldr	r3, [pc, #448]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001b96:	889b      	ldrh	r3, [r3, #4]
 8001b98:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d164      	bne.n	8001c6a <LCD_SetCursor+0xf2>
		LCD_WR_REG(lcddev.setxcmd);
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001ba2:	895b      	ldrh	r3, [r3, #10]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff15 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001baa:	4b6c      	ldr	r3, [pc, #432]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb0:	611a      	str	r2, [r3, #16]
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	0a1b      	lsrs	r3, r3, #8
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	4b65      	ldr	r3, [pc, #404]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bc6:	2280      	movs	r2, #128	; 0x80
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	4b64      	ldr	r3, [pc, #400]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bcc:	2280      	movs	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	4b62      	ldr	r3, [pc, #392]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bd6:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8001bd8:	4b60      	ldr	r3, [pc, #384]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bde:	611a      	str	r2, [r3, #16]
 8001be0:	4b5e      	ldr	r3, [pc, #376]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001be2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001be6:	615a      	str	r2, [r3, #20]
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	4a5d      	ldr	r2, [pc, #372]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	60d3      	str	r3, [r2, #12]
 8001bf0:	4b5a      	ldr	r3, [pc, #360]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	615a      	str	r2, [r3, #20]
 8001bf6:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	4b57      	ldr	r3, [pc, #348]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001bfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c02:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001c04:	4b54      	ldr	r3, [pc, #336]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001c06:	899b      	ldrh	r3, [r3, #12]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fee3 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001c0e:	4b53      	ldr	r3, [pc, #332]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c14:	611a      	str	r2, [r3, #16]
 8001c16:	4b51      	ldr	r3, [pc, #324]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c1c:	615a      	str	r2, [r3, #20]
 8001c1e:	88bb      	ldrh	r3, [r7, #4]
 8001c20:	0a1b      	lsrs	r3, r3, #8
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001c26:	60da      	str	r2, [r3, #12]
 8001c28:	4b4c      	ldr	r3, [pc, #304]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c30:	2280      	movs	r2, #128	; 0x80
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	4b49      	ldr	r3, [pc, #292]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8001c3c:	4b47      	ldr	r3, [pc, #284]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	4b45      	ldr	r3, [pc, #276]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	88bb      	ldrh	r3, [r7, #4]
 8001c4e:	4a44      	ldr	r2, [pc, #272]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	60d3      	str	r3, [r2, #12]
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c56:	2280      	movs	r2, #128	; 0x80
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	4b40      	ldr	r3, [pc, #256]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c5c:	2280      	movs	r2, #128	; 0x80
 8001c5e:	611a      	str	r2, [r3, #16]
 8001c60:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	611a      	str	r2, [r3, #16]
		if (lcddev.dir == 1)
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001c68:	e248      	b.n	80020fc <LCD_SetCursor+0x584>
	} else if (lcddev.id == 0X6804) {
 8001c6a:	4b3b      	ldr	r3, [pc, #236]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001c6c:	889b      	ldrh	r3, [r3, #4]
 8001c6e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d176      	bne.n	8001d64 <LCD_SetCursor+0x1ec>
		if (lcddev.dir == 1)
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001c78:	799b      	ldrb	r3, [r3, #6]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d106      	bne.n	8001c8c <LCD_SetCursor+0x114>
			Xpos = lcddev.width - 1 - Xpos;	//横屏时处理
 8001c7e:	4b36      	ldr	r3, [pc, #216]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001c80:	881a      	ldrh	r2, [r3, #0]
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001c8e:	895b      	ldrh	r3, [r3, #10]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fe9f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001c96:	4b31      	ldr	r3, [pc, #196]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001c98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cb2:	2280      	movs	r2, #128	; 0x80
 8001cb4:	615a      	str	r2, [r3, #20]
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cb8:	2280      	movs	r2, #128	; 0x80
 8001cba:	611a      	str	r2, [r3, #16]
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cc2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Xpos & 0XFF);
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cca:	611a      	str	r2, [r3, #16]
 8001ccc:	4b23      	ldr	r3, [pc, #140]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd2:	615a      	str	r2, [r3, #20]
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	60d3      	str	r3, [r2, #12]
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	615a      	str	r2, [r3, #20]
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001ce4:	2280      	movs	r2, #128	; 0x80
 8001ce6:	611a      	str	r2, [r3, #16]
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cee:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <LCD_SetCursor+0x1e0>)
 8001cf2:	899b      	ldrh	r3, [r3, #12]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fe6d 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001cfa:	4b18      	ldr	r3, [pc, #96]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d00:	611a      	str	r2, [r3, #16]
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d08:	615a      	str	r2, [r3, #20]
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	0a1b      	lsrs	r3, r3, #8
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001d12:	60da      	str	r2, [r3, #12]
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	615a      	str	r2, [r3, #20]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d1c:	2280      	movs	r2, #128	; 0x80
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d2e:	611a      	str	r2, [r3, #16]
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d36:	615a      	str	r2, [r3, #20]
 8001d38:	88bb      	ldrh	r3, [r7, #4]
 8001d3a:	4a09      	ldr	r2, [pc, #36]	; (8001d60 <LCD_SetCursor+0x1e8>)
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	60d3      	str	r3, [r2, #12]
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d42:	2280      	movs	r2, #128	; 0x80
 8001d44:	615a      	str	r2, [r3, #20]
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	611a      	str	r2, [r3, #16]
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <LCD_SetCursor+0x1e4>)
 8001d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d52:	611a      	str	r2, [r3, #16]
}
 8001d54:	e1d2      	b.n	80020fc <LCD_SetCursor+0x584>
 8001d56:	bf00      	nop
 8001d58:	200000bc 	.word	0x200000bc
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8001d64:	4b99      	ldr	r3, [pc, #612]	; (8001fcc <LCD_SetCursor+0x454>)
 8001d66:	889b      	ldrh	r3, [r3, #4]
 8001d68:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	f040 8133 	bne.w	8001fd8 <LCD_SetCursor+0x460>
		if (lcddev.dir == 0)	//x坐标需要变换
 8001d72:	4b96      	ldr	r3, [pc, #600]	; (8001fcc <LCD_SetCursor+0x454>)
 8001d74:	799b      	ldrb	r3, [r3, #6]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d163      	bne.n	8001e42 <LCD_SetCursor+0x2ca>
			Xpos = lcddev.width - 1 - Xpos;
 8001d7a:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <LCD_SetCursor+0x454>)
 8001d7c:	881a      	ldrh	r2, [r3, #0]
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001d88:	4b90      	ldr	r3, [pc, #576]	; (8001fcc <LCD_SetCursor+0x454>)
 8001d8a:	895b      	ldrh	r3, [r3, #10]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fe21 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8001d92:	4b8f      	ldr	r3, [pc, #572]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001d94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d98:	611a      	str	r2, [r3, #16]
 8001d9a:	4b8d      	ldr	r3, [pc, #564]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da0:	615a      	str	r2, [r3, #20]
 8001da2:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
 8001da8:	4b89      	ldr	r3, [pc, #548]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	4b88      	ldr	r3, [pc, #544]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001db0:	2280      	movs	r2, #128	; 0x80
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	4b86      	ldr	r3, [pc, #536]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dba:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8001dbc:	4b84      	ldr	r3, [pc, #528]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dc2:	611a      	str	r2, [r3, #16]
 8001dc4:	4b82      	ldr	r3, [pc, #520]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dca:	615a      	str	r2, [r3, #20]
 8001dcc:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	4b7f      	ldr	r3, [pc, #508]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	615a      	str	r2, [r3, #20]
 8001dd8:	4b7d      	ldr	r3, [pc, #500]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001dda:	2280      	movs	r2, #128	; 0x80
 8001ddc:	611a      	str	r2, [r3, #16]
 8001dde:	4b7c      	ldr	r3, [pc, #496]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001de0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos >> 8);
 8001de6:	4b7a      	ldr	r3, [pc, #488]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001de8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dec:	611a      	str	r2, [r3, #16]
 8001dee:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001df0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001df4:	615a      	str	r2, [r3, #20]
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001dfe:	60da      	str	r2, [r3, #12]
 8001e00:	4b73      	ldr	r3, [pc, #460]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e02:	2280      	movs	r2, #128	; 0x80
 8001e04:	615a      	str	r2, [r3, #20]
 8001e06:	4b72      	ldr	r3, [pc, #456]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e08:	2280      	movs	r2, #128	; 0x80
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	4b70      	ldr	r3, [pc, #448]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001e14:	4b6e      	ldr	r3, [pc, #440]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e1a:	611a      	str	r2, [r3, #16]
 8001e1c:	4b6c      	ldr	r3, [pc, #432]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e22:	615a      	str	r2, [r3, #20]
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	4a6b      	ldr	r2, [pc, #428]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	60d3      	str	r3, [r2, #12]
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	615a      	str	r2, [r3, #20]
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	611a      	str	r2, [r3, #16]
 8001e40:	e061      	b.n	8001f06 <LCD_SetCursor+0x38e>
			LCD_WR_REG(lcddev.setxcmd);
 8001e42:	4b62      	ldr	r3, [pc, #392]	; (8001fcc <LCD_SetCursor+0x454>)
 8001e44:	895b      	ldrh	r3, [r3, #10]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fdc4 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(Xpos >> 8);
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	4b5e      	ldr	r3, [pc, #376]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e5a:	615a      	str	r2, [r3, #20]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b5c      	ldr	r3, [pc, #368]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e68:	2280      	movs	r2, #128	; 0x80
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	4b58      	ldr	r3, [pc, #352]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e6e:	2280      	movs	r2, #128	; 0x80
 8001e70:	611a      	str	r2, [r3, #16]
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e78:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(Xpos & 0XFF);
 8001e7a:	4b55      	ldr	r3, [pc, #340]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e88:	615a      	str	r2, [r3, #20]
 8001e8a:	88fb      	ldrh	r3, [r7, #6]
 8001e8c:	4a51      	ldr	r2, [pc, #324]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	60d3      	str	r3, [r2, #12]
 8001e92:	4b4f      	ldr	r3, [pc, #316]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e94:	2280      	movs	r2, #128	; 0x80
 8001e96:	615a      	str	r2, [r3, #20]
 8001e98:	4b4d      	ldr	r3, [pc, #308]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001e9a:	2280      	movs	r2, #128	; 0x80
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ea8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eac:	611a      	str	r2, [r3, #16]
 8001eae:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eb4:	615a      	str	r2, [r3, #20]
 8001eb6:	4b45      	ldr	r3, [pc, #276]	; (8001fcc <LCD_SetCursor+0x454>)
 8001eb8:	881b      	ldrh	r3, [r3, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	121a      	asrs	r2, r3, #8
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	4b43      	ldr	r3, [pc, #268]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ec4:	2280      	movs	r2, #128	; 0x80
 8001ec6:	615a      	str	r2, [r3, #20]
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001eca:	2280      	movs	r2, #128	; 0x80
 8001ecc:	611a      	str	r2, [r3, #16]
 8001ece:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ed4:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ed8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <LCD_SetCursor+0x454>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	4a39      	ldr	r2, [pc, #228]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	60d3      	str	r3, [r2, #12]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	615a      	str	r2, [r3, #20]
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001efa:	2280      	movs	r2, #128	; 0x80
 8001efc:	611a      	str	r2, [r3, #16]
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f04:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <LCD_SetCursor+0x454>)
 8001f08:	899b      	ldrh	r3, [r3, #12]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd62 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8001f10:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f16:	611a      	str	r2, [r3, #16]
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f1e:	615a      	str	r2, [r3, #20]
 8001f20:	88bb      	ldrh	r3, [r7, #4]
 8001f22:	0a1b      	lsrs	r3, r3, #8
 8001f24:	b29a      	uxth	r2, r3
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	615a      	str	r2, [r3, #20]
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(Ypos & 0XFF);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f4c:	615a      	str	r2, [r3, #20]
 8001f4e:	88bb      	ldrh	r3, [r7, #4]
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	60d3      	str	r3, [r2, #12]
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f5e:	2280      	movs	r2, #128	; 0x80
 8001f60:	611a      	str	r2, [r3, #16]
 8001f62:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f68:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) >> 8);
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f70:	611a      	str	r2, [r3, #16]
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f78:	615a      	str	r2, [r3, #20]
 8001f7a:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <LCD_SetCursor+0x454>)
 8001f7c:	885b      	ldrh	r3, [r3, #2]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	121a      	asrs	r2, r3, #8
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	615a      	str	r2, [r3, #20]
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f8e:	2280      	movs	r2, #128	; 0x80
 8001f90:	611a      	str	r2, [r3, #16]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8001f9a:	4b0d      	ldr	r3, [pc, #52]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001f9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa0:	611a      	str	r2, [r3, #16]
 8001fa2:	4b0b      	ldr	r3, [pc, #44]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fa8:	615a      	str	r2, [r3, #20]
 8001faa:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LCD_SetCursor+0x454>)
 8001fac:	885b      	ldrh	r3, [r3, #2]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <LCD_SetCursor+0x45c>)
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	60d3      	str	r3, [r2, #12]
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001fb8:	2280      	movs	r2, #128	; 0x80
 8001fba:	615a      	str	r2, [r3, #20]
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	611a      	str	r2, [r3, #16]
 8001fc2:	4b03      	ldr	r3, [pc, #12]	; (8001fd0 <LCD_SetCursor+0x458>)
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	611a      	str	r2, [r3, #16]
}
 8001fca:	e097      	b.n	80020fc <LCD_SetCursor+0x584>
 8001fcc:	200000bc 	.word	0x200000bc
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X5510) {
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <LCD_SetCursor+0x58c>)
 8001fda:	889b      	ldrh	r3, [r3, #4]
 8001fdc:	f245 5210 	movw	r2, #21776	; 0x5510
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d172      	bne.n	80020ca <LCD_SetCursor+0x552>
		LCD_WR_REG(lcddev.setxcmd);
 8001fe4:	4b47      	ldr	r3, [pc, #284]	; (8002104 <LCD_SetCursor+0x58c>)
 8001fe6:	895b      	ldrh	r3, [r3, #10]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fcf3 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos >> 8);
 8001fee:	4b46      	ldr	r3, [pc, #280]	; (8002108 <LCD_SetCursor+0x590>)
 8001ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ff4:	611a      	str	r2, [r3, #16]
 8001ff6:	4b44      	ldr	r3, [pc, #272]	; (8002108 <LCD_SetCursor+0x590>)
 8001ff8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ffc:	615a      	str	r2, [r3, #20]
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b41      	ldr	r3, [pc, #260]	; (800210c <LCD_SetCursor+0x594>)
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	4b3f      	ldr	r3, [pc, #252]	; (8002108 <LCD_SetCursor+0x590>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	615a      	str	r2, [r3, #20]
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <LCD_SetCursor+0x590>)
 8002010:	2280      	movs	r2, #128	; 0x80
 8002012:	611a      	str	r2, [r3, #16]
 8002014:	4b3c      	ldr	r3, [pc, #240]	; (8002108 <LCD_SetCursor+0x590>)
 8002016:	f44f 7200 	mov.w	r2, #512	; 0x200
 800201a:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 800201c:	4b39      	ldr	r3, [pc, #228]	; (8002104 <LCD_SetCursor+0x58c>)
 800201e:	895b      	ldrh	r3, [r3, #10]
 8002020:	3301      	adds	r3, #1
 8002022:	b29b      	uxth	r3, r3
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcd5 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos & 0XFF);
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <LCD_SetCursor+0x590>)
 800202c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002030:	611a      	str	r2, [r3, #16]
 8002032:	4b35      	ldr	r3, [pc, #212]	; (8002108 <LCD_SetCursor+0x590>)
 8002034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002038:	615a      	str	r2, [r3, #20]
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	4a33      	ldr	r2, [pc, #204]	; (800210c <LCD_SetCursor+0x594>)
 800203e:	b2db      	uxtb	r3, r3
 8002040:	60d3      	str	r3, [r2, #12]
 8002042:	4b31      	ldr	r3, [pc, #196]	; (8002108 <LCD_SetCursor+0x590>)
 8002044:	2280      	movs	r2, #128	; 0x80
 8002046:	615a      	str	r2, [r3, #20]
 8002048:	4b2f      	ldr	r3, [pc, #188]	; (8002108 <LCD_SetCursor+0x590>)
 800204a:	2280      	movs	r2, #128	; 0x80
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	4b2e      	ldr	r3, [pc, #184]	; (8002108 <LCD_SetCursor+0x590>)
 8002050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002054:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002056:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <LCD_SetCursor+0x58c>)
 8002058:	899b      	ldrh	r3, [r3, #12]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fcba 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos >> 8);
 8002060:	4b29      	ldr	r3, [pc, #164]	; (8002108 <LCD_SetCursor+0x590>)
 8002062:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002066:	611a      	str	r2, [r3, #16]
 8002068:	4b27      	ldr	r3, [pc, #156]	; (8002108 <LCD_SetCursor+0x590>)
 800206a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800206e:	615a      	str	r2, [r3, #20]
 8002070:	88bb      	ldrh	r3, [r7, #4]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	b29a      	uxth	r2, r3
 8002076:	4b25      	ldr	r3, [pc, #148]	; (800210c <LCD_SetCursor+0x594>)
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	4b23      	ldr	r3, [pc, #140]	; (8002108 <LCD_SetCursor+0x590>)
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	615a      	str	r2, [r3, #20]
 8002080:	4b21      	ldr	r3, [pc, #132]	; (8002108 <LCD_SetCursor+0x590>)
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	611a      	str	r2, [r3, #16]
 8002086:	4b20      	ldr	r3, [pc, #128]	; (8002108 <LCD_SetCursor+0x590>)
 8002088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <LCD_SetCursor+0x58c>)
 8002090:	899b      	ldrh	r3, [r3, #12]
 8002092:	3301      	adds	r3, #1
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fc9c 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos & 0XFF);
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <LCD_SetCursor+0x590>)
 800209e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020a2:	611a      	str	r2, [r3, #16]
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <LCD_SetCursor+0x590>)
 80020a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020aa:	615a      	str	r2, [r3, #20]
 80020ac:	88bb      	ldrh	r3, [r7, #4]
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <LCD_SetCursor+0x594>)
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	60d3      	str	r3, [r2, #12]
 80020b4:	4b14      	ldr	r3, [pc, #80]	; (8002108 <LCD_SetCursor+0x590>)
 80020b6:	2280      	movs	r2, #128	; 0x80
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <LCD_SetCursor+0x590>)
 80020bc:	2280      	movs	r2, #128	; 0x80
 80020be:	611a      	str	r2, [r3, #16]
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <LCD_SetCursor+0x590>)
 80020c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020c6:	611a      	str	r2, [r3, #16]
}
 80020c8:	e018      	b.n	80020fc <LCD_SetCursor+0x584>
		if (lcddev.dir == 1)
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <LCD_SetCursor+0x58c>)
 80020cc:	799b      	ldrb	r3, [r3, #6]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d106      	bne.n	80020e0 <LCD_SetCursor+0x568>
			Xpos = lcddev.width - 1 - Xpos;	//横屏其实就是调转x,y坐标
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <LCD_SetCursor+0x58c>)
 80020d4:	881a      	ldrh	r2, [r3, #0]
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <LCD_SetCursor+0x58c>)
 80020e2:	895b      	ldrh	r3, [r3, #10]
 80020e4:	88fa      	ldrh	r2, [r7, #6]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fcff 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <LCD_SetCursor+0x58c>)
 80020f0:	899b      	ldrh	r3, [r3, #12]
 80020f2:	88ba      	ldrh	r2, [r7, #4]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7ff fcf8 	bl	8001aec <LCD_WriteReg>
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	200000bc 	.word	0x200000bc
 8002108:	40011000 	.word	0x40011000
 800210c:	40010c00 	.word	0x40010c00

08002110 <LCD_Scan_Dir>:
//设置LCD的自动扫描方向
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试	   	   
void LCD_Scan_Dir(uint8_t dir) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
	uint16_t regval = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if ((lcddev.dir == 1 && lcddev.id != 0X6804 && lcddev.id != 0X1963)
 8002122:	4b78      	ldr	r3, [pc, #480]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d10b      	bne.n	8002142 <LCD_Scan_Dir+0x32>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 800212c:	889b      	ldrh	r3, [r3, #4]
 800212e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002132:	4293      	cmp	r3, r2
 8002134:	d005      	beq.n	8002142 <LCD_Scan_Dir+0x32>
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002138:	889b      	ldrh	r3, [r3, #4]
 800213a:	f641 1263 	movw	r2, #6499	; 0x1963
 800213e:	4293      	cmp	r3, r2
 8002140:	d109      	bne.n	8002156 <LCD_Scan_Dir+0x46>
			|| (lcddev.dir == 0 && lcddev.id == 0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8002142:	4b70      	ldr	r3, [pc, #448]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002144:	799b      	ldrb	r3, [r3, #6]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d134      	bne.n	80021b4 <LCD_Scan_Dir+0xa4>
 800214a:	4b6e      	ldr	r3, [pc, #440]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 800214c:	889b      	ldrh	r3, [r3, #4]
 800214e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002152:	4293      	cmp	r3, r2
 8002154:	d12e      	bne.n	80021b4 <LCD_Scan_Dir+0xa4>
			{
		switch (dir)	//方向转换
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	2b07      	cmp	r3, #7
 800215a:	d82b      	bhi.n	80021b4 <LCD_Scan_Dir+0xa4>
 800215c:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <LCD_Scan_Dir+0x54>)
 800215e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002162:	bf00      	nop
 8002164:	08002185 	.word	0x08002185
 8002168:	0800218b 	.word	0x0800218b
 800216c:	08002191 	.word	0x08002191
 8002170:	08002197 	.word	0x08002197
 8002174:	0800219d 	.word	0x0800219d
 8002178:	080021a3 	.word	0x080021a3
 800217c:	080021a9 	.word	0x080021a9
 8002180:	080021af 	.word	0x080021af
		{
		case 0:
			dir = 6;
 8002184:	2306      	movs	r3, #6
 8002186:	71fb      	strb	r3, [r7, #7]
			break;
 8002188:	e014      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 1:
			dir = 7;
 800218a:	2307      	movs	r3, #7
 800218c:	71fb      	strb	r3, [r7, #7]
			break;
 800218e:	e011      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 2:
			dir = 4;
 8002190:	2304      	movs	r3, #4
 8002192:	71fb      	strb	r3, [r7, #7]
			break;
 8002194:	e00e      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 3:
			dir = 5;
 8002196:	2305      	movs	r3, #5
 8002198:	71fb      	strb	r3, [r7, #7]
			break;
 800219a:	e00b      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 4:
			dir = 1;
 800219c:	2301      	movs	r3, #1
 800219e:	71fb      	strb	r3, [r7, #7]
			break;
 80021a0:	e008      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 5:
			dir = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	71fb      	strb	r3, [r7, #7]
			break;
 80021a6:	e005      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 6:
			dir = 3;
 80021a8:	2303      	movs	r3, #3
 80021aa:	71fb      	strb	r3, [r7, #7]
			break;
 80021ac:	e002      	b.n	80021b4 <LCD_Scan_Dir+0xa4>
		case 7:
			dir = 2;
 80021ae:	2302      	movs	r3, #2
 80021b0:	71fb      	strb	r3, [r7, #7]
			break;
 80021b2:	bf00      	nop
		}
	}
	if (lcddev.id == 0x9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310
 80021b4:	4b53      	ldr	r3, [pc, #332]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80021b6:	889b      	ldrh	r3, [r3, #4]
 80021b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80021bc:	4293      	cmp	r3, r2
 80021be:	d018      	beq.n	80021f2 <LCD_Scan_Dir+0xe2>
 80021c0:	4b50      	ldr	r3, [pc, #320]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80021c2:	889b      	ldrh	r3, [r3, #4]
 80021c4:	f646 0204 	movw	r2, #26628	; 0x6804
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d012      	beq.n	80021f2 <LCD_Scan_Dir+0xe2>
 80021cc:	4b4d      	ldr	r3, [pc, #308]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	f245 3210 	movw	r2, #21264	; 0x5310
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00c      	beq.n	80021f2 <LCD_Scan_Dir+0xe2>
			|| lcddev.id == 0X5510 || lcddev.id == 0X1963)//9341/6804/5310/5510/1963,特殊处理
 80021d8:	4b4a      	ldr	r3, [pc, #296]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	f245 5210 	movw	r2, #21776	; 0x5510
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d006      	beq.n	80021f2 <LCD_Scan_Dir+0xe2>
 80021e4:	4b47      	ldr	r3, [pc, #284]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80021e6:	889b      	ldrh	r3, [r3, #4]
 80021e8:	f641 1263 	movw	r2, #6499	; 0x1963
 80021ec:	4293      	cmp	r3, r2
 80021ee:	f040 8250 	bne.w	8002692 <LCD_Scan_Dir+0x582>
					{
		switch (dir) {
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	2b07      	cmp	r3, #7
 80021f6:	d836      	bhi.n	8002266 <LCD_Scan_Dir+0x156>
 80021f8:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <LCD_Scan_Dir+0xf0>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002267 	.word	0x08002267
 8002204:	08002221 	.word	0x08002221
 8002208:	0800222b 	.word	0x0800222b
 800220c:	08002235 	.word	0x08002235
 8002210:	0800223f 	.word	0x0800223f
 8002214:	08002249 	.word	0x08002249
 8002218:	08002253 	.word	0x08002253
 800221c:	0800225d 	.word	0x0800225d
		case L2R_U2D:	//从左到右,从上到下
			regval |= (0 << 7) | (0 << 6) | (0 << 5);
			break;
		case L2R_D2U:	//从左到右,从下到上
			regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8002220:	89fb      	ldrh	r3, [r7, #14]
 8002222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002226:	81fb      	strh	r3, [r7, #14]
			break;
 8002228:	e01d      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (0 << 7) | (1 << 6) | (0 << 5);
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002230:	81fb      	strh	r3, [r7, #14]
			break;
 8002232:	e018      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8002234:	89fb      	ldrh	r3, [r7, #14]
 8002236:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800223a:	81fb      	strh	r3, [r7, #14]
			break;
 800223c:	e013      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case U2D_L2R:	//从上到下,从左到右
			regval |= (0 << 7) | (0 << 6) | (1 << 5);
 800223e:	89fb      	ldrh	r3, [r7, #14]
 8002240:	f043 0320 	orr.w	r3, r3, #32
 8002244:	81fb      	strh	r3, [r7, #14]
			break;
 8002246:	e00e      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8002248:	89fb      	ldrh	r3, [r7, #14]
 800224a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800224e:	81fb      	strh	r3, [r7, #14]
			break;
 8002250:	e009      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8002252:	89fb      	ldrh	r3, [r7, #14]
 8002254:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002258:	81fb      	strh	r3, [r7, #14]
			break;
 800225a:	e004      	b.n	8002266 <LCD_Scan_Dir+0x156>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (1 << 7) | (1 << 6) | (1 << 5);
 800225c:	89fb      	ldrh	r3, [r7, #14]
 800225e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002262:	81fb      	strh	r3, [r7, #14]
			break;
 8002264:	bf00      	nop
		}
		if (lcddev.id == 0X5510)
 8002266:	4b27      	ldr	r3, [pc, #156]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002268:	889b      	ldrh	r3, [r3, #4]
 800226a:	f245 5210 	movw	r2, #21776	; 0x5510
 800226e:	4293      	cmp	r3, r2
 8002270:	d103      	bne.n	800227a <LCD_Scan_Dir+0x16a>
			dirreg = 0X3600;
 8002272:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002276:	81bb      	strh	r3, [r7, #12]
 8002278:	e001      	b.n	800227e <LCD_Scan_Dir+0x16e>
		else
			dirreg = 0X36;
 800227a:	2336      	movs	r3, #54	; 0x36
 800227c:	81bb      	strh	r3, [r7, #12]
		if ((lcddev.id != 0X5310) && (lcddev.id != 0X5510) && (lcddev.id != 0X1963))
 800227e:	4b21      	ldr	r3, [pc, #132]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002280:	889b      	ldrh	r3, [r3, #4]
 8002282:	f245 3210 	movw	r2, #21264	; 0x5310
 8002286:	4293      	cmp	r3, r2
 8002288:	d00f      	beq.n	80022aa <LCD_Scan_Dir+0x19a>
 800228a:	4b1e      	ldr	r3, [pc, #120]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 800228c:	889b      	ldrh	r3, [r3, #4]
 800228e:	f245 5210 	movw	r2, #21776	; 0x5510
 8002292:	4293      	cmp	r3, r2
 8002294:	d009      	beq.n	80022aa <LCD_Scan_Dir+0x19a>
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	f641 1263 	movw	r2, #6499	; 0x1963
 800229e:	4293      	cmp	r3, r2
 80022a0:	d003      	beq.n	80022aa <LCD_Scan_Dir+0x19a>
			regval |= 0X08;	//5310/5510/1963不需要BGR
 80022a2:	89fb      	ldrh	r3, [r7, #14]
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	81fb      	strh	r3, [r7, #14]
		if (lcddev.id == 0X6804)
 80022aa:	4b16      	ldr	r3, [pc, #88]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022ac:	889b      	ldrh	r3, [r3, #4]
 80022ae:	f646 0204 	movw	r2, #26628	; 0x6804
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d103      	bne.n	80022be <LCD_Scan_Dir+0x1ae>
			regval |= 0x02;	//6804的BIT6和9341的反了
 80022b6:	89fb      	ldrh	r3, [r7, #14]
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 80022be:	89fa      	ldrh	r2, [r7, #14]
 80022c0:	89bb      	ldrh	r3, [r7, #12]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fc11 	bl	8001aec <LCD_WriteReg>
		if (lcddev.id != 0X1963)	//1963不做坐标处理
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022cc:	889b      	ldrh	r3, [r3, #4]
 80022ce:	f641 1263 	movw	r2, #6499	; 0x1963
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d028      	beq.n	8002328 <LCD_Scan_Dir+0x218>
				{
			if (regval & 0X20) {
 80022d6:	89fb      	ldrh	r3, [r7, #14]
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <LCD_Scan_Dir+0x1f8>
				if (lcddev.width < lcddev.height)	//交换X,Y
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022e2:	881a      	ldrh	r2, [r3, #0]
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022e6:	885b      	ldrh	r3, [r3, #2]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d21d      	bcs.n	8002328 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022f4:	885a      	ldrh	r2, [r3, #2]
 80022f6:	4b03      	ldr	r3, [pc, #12]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022f8:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 80022fa:	4a02      	ldr	r2, [pc, #8]	; (8002304 <LCD_Scan_Dir+0x1f4>)
 80022fc:	897b      	ldrh	r3, [r7, #10]
 80022fe:	8053      	strh	r3, [r2, #2]
 8002300:	e012      	b.n	8002328 <LCD_Scan_Dir+0x218>
 8002302:	bf00      	nop
 8002304:	200000bc 	.word	0x200000bc
				}
			} else {
				if (lcddev.width > lcddev.height)	//交换X,Y
 8002308:	4b7f      	ldr	r3, [pc, #508]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800230a:	881a      	ldrh	r2, [r3, #0]
 800230c:	4b7e      	ldr	r3, [pc, #504]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800230e:	885b      	ldrh	r3, [r3, #2]
 8002310:	429a      	cmp	r2, r3
 8002312:	d909      	bls.n	8002328 <LCD_Scan_Dir+0x218>
						{
					temp = lcddev.width;
 8002314:	4b7c      	ldr	r3, [pc, #496]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	817b      	strh	r3, [r7, #10]
					lcddev.width = lcddev.height;
 800231a:	4b7b      	ldr	r3, [pc, #492]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800231c:	885a      	ldrh	r2, [r3, #2]
 800231e:	4b7a      	ldr	r3, [pc, #488]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002320:	801a      	strh	r2, [r3, #0]
					lcddev.height = temp;
 8002322:	4a79      	ldr	r2, [pc, #484]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002324:	897b      	ldrh	r3, [r7, #10]
 8002326:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if (lcddev.id == 0X5510) {
 8002328:	4b77      	ldr	r3, [pc, #476]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002330:	4293      	cmp	r3, r2
 8002332:	f040 80ef 	bne.w	8002514 <LCD_Scan_Dir+0x404>
			LCD_WR_REG(lcddev.setxcmd);
 8002336:	4b74      	ldr	r3, [pc, #464]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002338:	895b      	ldrh	r3, [r3, #10]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb4a 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002340:	4b72      	ldr	r3, [pc, #456]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002342:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002346:	611a      	str	r2, [r3, #16]
 8002348:	4b70      	ldr	r3, [pc, #448]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800234a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234e:	615a      	str	r2, [r3, #20]
 8002350:	4b6f      	ldr	r3, [pc, #444]	; (8002510 <LCD_Scan_Dir+0x400>)
 8002352:	2200      	movs	r2, #0
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002358:	2280      	movs	r2, #128	; 0x80
 800235a:	615a      	str	r2, [r3, #20]
 800235c:	4b6b      	ldr	r3, [pc, #428]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	611a      	str	r2, [r3, #16]
 8002362:	4b6a      	ldr	r3, [pc, #424]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002368:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 1);
 800236a:	4b67      	ldr	r3, [pc, #412]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800236c:	895b      	ldrh	r3, [r3, #10]
 800236e:	3301      	adds	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fb2e 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002378:	4b64      	ldr	r3, [pc, #400]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800237a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800237e:	611a      	str	r2, [r3, #16]
 8002380:	4b62      	ldr	r3, [pc, #392]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002382:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002386:	615a      	str	r2, [r3, #20]
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <LCD_Scan_Dir+0x400>)
 800238a:	2200      	movs	r2, #0
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	4b5f      	ldr	r3, [pc, #380]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002390:	2280      	movs	r2, #128	; 0x80
 8002392:	615a      	str	r2, [r3, #20]
 8002394:	4b5d      	ldr	r3, [pc, #372]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002396:	2280      	movs	r2, #128	; 0x80
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800239c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023a0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 2);
 80023a2:	4b59      	ldr	r3, [pc, #356]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80023a4:	895b      	ldrh	r3, [r3, #10]
 80023a6:	3302      	adds	r3, #2
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fb12 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 80023b0:	4b56      	ldr	r3, [pc, #344]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023b6:	611a      	str	r2, [r3, #16]
 80023b8:	4b54      	ldr	r3, [pc, #336]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023be:	615a      	str	r2, [r3, #20]
 80023c0:	4b51      	ldr	r3, [pc, #324]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	121a      	asrs	r2, r3, #8
 80023c8:	4b51      	ldr	r3, [pc, #324]	; (8002510 <LCD_Scan_Dir+0x400>)
 80023ca:	60da      	str	r2, [r3, #12]
 80023cc:	4b4f      	ldr	r3, [pc, #316]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023ce:	2280      	movs	r2, #128	; 0x80
 80023d0:	615a      	str	r2, [r3, #20]
 80023d2:	4b4e      	ldr	r3, [pc, #312]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	611a      	str	r2, [r3, #16]
 80023d8:	4b4c      	ldr	r3, [pc, #304]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023de:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setxcmd + 3);
 80023e0:	4b49      	ldr	r3, [pc, #292]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80023e2:	895b      	ldrh	r3, [r3, #10]
 80023e4:	3303      	adds	r3, #3
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff faf3 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023f4:	611a      	str	r2, [r3, #16]
 80023f6:	4b45      	ldr	r3, [pc, #276]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80023f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023fc:	615a      	str	r2, [r3, #20]
 80023fe:	4b42      	ldr	r3, [pc, #264]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	3b01      	subs	r3, #1
 8002404:	4a42      	ldr	r2, [pc, #264]	; (8002510 <LCD_Scan_Dir+0x400>)
 8002406:	b2db      	uxtb	r3, r3
 8002408:	60d3      	str	r3, [r2, #12]
 800240a:	4b40      	ldr	r3, [pc, #256]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800240c:	2280      	movs	r2, #128	; 0x80
 800240e:	615a      	str	r2, [r3, #20]
 8002410:	4b3e      	ldr	r3, [pc, #248]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	4b3d      	ldr	r3, [pc, #244]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002418:	f44f 7200 	mov.w	r2, #512	; 0x200
 800241c:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 800241e:	4b3a      	ldr	r3, [pc, #232]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002420:	899b      	ldrh	r3, [r3, #12]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fad6 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002428:	4b38      	ldr	r3, [pc, #224]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800242a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242e:	611a      	str	r2, [r3, #16]
 8002430:	4b36      	ldr	r3, [pc, #216]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002432:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002436:	615a      	str	r2, [r3, #20]
 8002438:	4b35      	ldr	r3, [pc, #212]	; (8002510 <LCD_Scan_Dir+0x400>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	4b33      	ldr	r3, [pc, #204]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002440:	2280      	movs	r2, #128	; 0x80
 8002442:	615a      	str	r2, [r3, #20]
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
 800244a:	4b30      	ldr	r3, [pc, #192]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800244c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002450:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 1);
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 8002454:	899b      	ldrh	r3, [r3, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	b29b      	uxth	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff faba 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 8002460:	4b2a      	ldr	r3, [pc, #168]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002462:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	4b28      	ldr	r3, [pc, #160]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800246a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800246e:	615a      	str	r2, [r3, #20]
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <LCD_Scan_Dir+0x400>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
 8002476:	4b25      	ldr	r3, [pc, #148]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	615a      	str	r2, [r3, #20]
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	4b22      	ldr	r3, [pc, #136]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002488:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 2);
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 800248c:	899b      	ldrh	r3, [r3, #12]
 800248e:	3302      	adds	r3, #2
 8002490:	b29b      	uxth	r3, r3
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff fa9e 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002498:	4b1c      	ldr	r3, [pc, #112]	; (800250c <LCD_Scan_Dir+0x3fc>)
 800249a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800249e:	611a      	str	r2, [r3, #16]
 80024a0:	4b1a      	ldr	r3, [pc, #104]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024a6:	615a      	str	r2, [r3, #20]
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80024aa:	885b      	ldrh	r3, [r3, #2]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	121a      	asrs	r2, r3, #8
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <LCD_Scan_Dir+0x400>)
 80024b2:	60da      	str	r2, [r3, #12]
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	615a      	str	r2, [r3, #20]
 80024ba:	4b14      	ldr	r3, [pc, #80]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	611a      	str	r2, [r3, #16]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c6:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd + 3);
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80024ca:	899b      	ldrh	r3, [r3, #12]
 80024cc:	3303      	adds	r3, #3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fa7f 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 80024d6:	4b0d      	ldr	r3, [pc, #52]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <LCD_Scan_Dir+0x3f8>)
 80024e8:	885b      	ldrh	r3, [r3, #2]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	4a08      	ldr	r2, [pc, #32]	; (8002510 <LCD_Scan_Dir+0x400>)
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	60d3      	str	r3, [r2, #12]
 80024f2:	4b06      	ldr	r3, [pc, #24]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024f4:	2280      	movs	r2, #128	; 0x80
 80024f6:	615a      	str	r2, [r3, #20]
 80024f8:	4b04      	ldr	r3, [pc, #16]	; (800250c <LCD_Scan_Dir+0x3fc>)
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	611a      	str	r2, [r3, #16]
 80024fe:	4b03      	ldr	r3, [pc, #12]	; (800250c <LCD_Scan_Dir+0x3fc>)
 8002500:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002504:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8002506:	e10a      	b.n	800271e <LCD_Scan_Dir+0x60e>
 8002508:	200000bc 	.word	0x200000bc
 800250c:	40011000 	.word	0x40011000
 8002510:	40010c00 	.word	0x40010c00
		} else {
			LCD_WR_REG(lcddev.setxcmd);
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <LCD_Scan_Dir+0x618>)
 8002516:	895b      	ldrh	r3, [r3, #10]
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa5b 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 800251e:	4b83      	ldr	r3, [pc, #524]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002524:	611a      	str	r2, [r3, #16]
 8002526:	4b81      	ldr	r3, [pc, #516]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800252c:	615a      	str	r2, [r3, #20]
 800252e:	4b80      	ldr	r3, [pc, #512]	; (8002730 <LCD_Scan_Dir+0x620>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
 8002534:	4b7d      	ldr	r3, [pc, #500]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	615a      	str	r2, [r3, #20]
 800253a:	4b7c      	ldr	r3, [pc, #496]	; (800272c <LCD_Scan_Dir+0x61c>)
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	4b7a      	ldr	r3, [pc, #488]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002546:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002548:	4b78      	ldr	r3, [pc, #480]	; (800272c <LCD_Scan_Dir+0x61c>)
 800254a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	4b76      	ldr	r3, [pc, #472]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002556:	615a      	str	r2, [r3, #20]
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <LCD_Scan_Dir+0x620>)
 800255a:	2200      	movs	r2, #0
 800255c:	60da      	str	r2, [r3, #12]
 800255e:	4b73      	ldr	r3, [pc, #460]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002560:	2280      	movs	r2, #128	; 0x80
 8002562:	615a      	str	r2, [r3, #20]
 8002564:	4b71      	ldr	r3, [pc, #452]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	4b70      	ldr	r3, [pc, #448]	; (800272c <LCD_Scan_Dir+0x61c>)
 800256c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002570:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) >> 8);
 8002572:	4b6e      	ldr	r3, [pc, #440]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002574:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002578:	611a      	str	r2, [r3, #16]
 800257a:	4b6c      	ldr	r3, [pc, #432]	; (800272c <LCD_Scan_Dir+0x61c>)
 800257c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002580:	615a      	str	r2, [r3, #20]
 8002582:	4b69      	ldr	r3, [pc, #420]	; (8002728 <LCD_Scan_Dir+0x618>)
 8002584:	881b      	ldrh	r3, [r3, #0]
 8002586:	3b01      	subs	r3, #1
 8002588:	121a      	asrs	r2, r3, #8
 800258a:	4b69      	ldr	r3, [pc, #420]	; (8002730 <LCD_Scan_Dir+0x620>)
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	4b67      	ldr	r3, [pc, #412]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002590:	2280      	movs	r2, #128	; 0x80
 8002592:	615a      	str	r2, [r3, #20]
 8002594:	4b65      	ldr	r3, [pc, #404]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002596:	2280      	movs	r2, #128	; 0x80
 8002598:	611a      	str	r2, [r3, #16]
 800259a:	4b64      	ldr	r3, [pc, #400]	; (800272c <LCD_Scan_Dir+0x61c>)
 800259c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025a0:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.width - 1) & 0XFF);
 80025a2:	4b62      	ldr	r3, [pc, #392]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	4b60      	ldr	r3, [pc, #384]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b0:	615a      	str	r2, [r3, #20]
 80025b2:	4b5d      	ldr	r3, [pc, #372]	; (8002728 <LCD_Scan_Dir+0x618>)
 80025b4:	881b      	ldrh	r3, [r3, #0]
 80025b6:	3b01      	subs	r3, #1
 80025b8:	4a5d      	ldr	r2, [pc, #372]	; (8002730 <LCD_Scan_Dir+0x620>)
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	60d3      	str	r3, [r2, #12]
 80025be:	4b5b      	ldr	r3, [pc, #364]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025c0:	2280      	movs	r2, #128	; 0x80
 80025c2:	615a      	str	r2, [r3, #20]
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	4b58      	ldr	r3, [pc, #352]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d0:	611a      	str	r2, [r3, #16]
			LCD_WR_REG(lcddev.setycmd);
 80025d2:	4b55      	ldr	r3, [pc, #340]	; (8002728 <LCD_Scan_Dir+0x618>)
 80025d4:	899b      	ldrh	r3, [r3, #12]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff f9fc 	bl	80019d4 <LCD_WR_REG>
			LCD_WR_DATA(0);
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e2:	611a      	str	r2, [r3, #16]
 80025e4:	4b51      	ldr	r3, [pc, #324]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ea:	615a      	str	r2, [r3, #20]
 80025ec:	4b50      	ldr	r3, [pc, #320]	; (8002730 <LCD_Scan_Dir+0x620>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	4b4e      	ldr	r3, [pc, #312]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	615a      	str	r2, [r3, #20]
 80025f8:	4b4c      	ldr	r3, [pc, #304]	; (800272c <LCD_Scan_Dir+0x61c>)
 80025fa:	2280      	movs	r2, #128	; 0x80
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	4b4b      	ldr	r3, [pc, #300]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002604:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA(0);
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260c:	611a      	str	r2, [r3, #16]
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002614:	615a      	str	r2, [r3, #20]
 8002616:	4b46      	ldr	r3, [pc, #280]	; (8002730 <LCD_Scan_Dir+0x620>)
 8002618:	2200      	movs	r2, #0
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <LCD_Scan_Dir+0x61c>)
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	615a      	str	r2, [r3, #20]
 8002622:	4b42      	ldr	r3, [pc, #264]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002624:	2280      	movs	r2, #128	; 0x80
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <LCD_Scan_Dir+0x61c>)
 800262a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) >> 8);
 8002630:	4b3e      	ldr	r3, [pc, #248]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002636:	611a      	str	r2, [r3, #16]
 8002638:	4b3c      	ldr	r3, [pc, #240]	; (800272c <LCD_Scan_Dir+0x61c>)
 800263a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800263e:	615a      	str	r2, [r3, #20]
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <LCD_Scan_Dir+0x618>)
 8002642:	885b      	ldrh	r3, [r3, #2]
 8002644:	3b01      	subs	r3, #1
 8002646:	121a      	asrs	r2, r3, #8
 8002648:	4b39      	ldr	r3, [pc, #228]	; (8002730 <LCD_Scan_Dir+0x620>)
 800264a:	60da      	str	r2, [r3, #12]
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <LCD_Scan_Dir+0x61c>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	615a      	str	r2, [r3, #20]
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	611a      	str	r2, [r3, #16]
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <LCD_Scan_Dir+0x61c>)
 800265a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800265e:	611a      	str	r2, [r3, #16]
			LCD_WR_DATA((lcddev.height - 1) & 0XFF);
 8002660:	4b32      	ldr	r3, [pc, #200]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002662:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <LCD_Scan_Dir+0x61c>)
 800266a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800266e:	615a      	str	r2, [r3, #20]
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <LCD_Scan_Dir+0x618>)
 8002672:	885b      	ldrh	r3, [r3, #2]
 8002674:	3b01      	subs	r3, #1
 8002676:	4a2e      	ldr	r2, [pc, #184]	; (8002730 <LCD_Scan_Dir+0x620>)
 8002678:	b2db      	uxtb	r3, r3
 800267a:	60d3      	str	r3, [r2, #12]
 800267c:	4b2b      	ldr	r3, [pc, #172]	; (800272c <LCD_Scan_Dir+0x61c>)
 800267e:	2280      	movs	r2, #128	; 0x80
 8002680:	615a      	str	r2, [r3, #20]
 8002682:	4b2a      	ldr	r3, [pc, #168]	; (800272c <LCD_Scan_Dir+0x61c>)
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	611a      	str	r2, [r3, #16]
 8002688:	4b28      	ldr	r3, [pc, #160]	; (800272c <LCD_Scan_Dir+0x61c>)
 800268a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800268e:	611a      	str	r2, [r3, #16]
		if (lcddev.id == 0X5510) {
 8002690:	e045      	b.n	800271e <LCD_Scan_Dir+0x60e>
		}
	} else {
		switch (dir) {
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	2b07      	cmp	r3, #7
 8002696:	d836      	bhi.n	8002706 <LCD_Scan_Dir+0x5f6>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <LCD_Scan_Dir+0x590>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026c1 	.word	0x080026c1
 80026a4:	080026cb 	.word	0x080026cb
 80026a8:	080026d5 	.word	0x080026d5
 80026ac:	08002707 	.word	0x08002707
 80026b0:	080026df 	.word	0x080026df
 80026b4:	080026e9 	.word	0x080026e9
 80026b8:	080026f3 	.word	0x080026f3
 80026bc:	080026fd 	.word	0x080026fd
		case L2R_U2D:	//从左到右,从上到下
			regval |= (1 << 5) | (1 << 4) | (0 << 3);
 80026c0:	89fb      	ldrh	r3, [r7, #14]
 80026c2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80026c6:	81fb      	strh	r3, [r7, #14]
			break;
 80026c8:	e01d      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case L2R_D2U:	//从左到右,从下到上
			regval |= (0 << 5) | (1 << 4) | (0 << 3);
 80026ca:	89fb      	ldrh	r3, [r7, #14]
 80026cc:	f043 0310 	orr.w	r3, r3, #16
 80026d0:	81fb      	strh	r3, [r7, #14]
			break;
 80026d2:	e018      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case R2L_U2D:	//从右到左,从上到下
			regval |= (1 << 5) | (0 << 4) | (0 << 3);
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	81fb      	strh	r3, [r7, #14]
			break;
 80026dc:	e013      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case R2L_D2U:	//从右到左,从下到上
			regval |= (0 << 5) | (0 << 4) | (0 << 3);
			break;
		case U2D_L2R:	//从上到下,从左到右
			regval |= (1 << 5) | (1 << 4) | (1 << 3);
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80026e4:	81fb      	strh	r3, [r7, #14]
			break;
 80026e6:	e00e      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case U2D_R2L:	//从上到下,从右到左
			regval |= (1 << 5) | (0 << 4) | (1 << 3);
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80026ee:	81fb      	strh	r3, [r7, #14]
			break;
 80026f0:	e009      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case D2U_L2R:	//从下到上,从左到右
			regval |= (0 << 5) | (1 << 4) | (1 << 3);
 80026f2:	89fb      	ldrh	r3, [r7, #14]
 80026f4:	f043 0318 	orr.w	r3, r3, #24
 80026f8:	81fb      	strh	r3, [r7, #14]
			break;
 80026fa:	e004      	b.n	8002706 <LCD_Scan_Dir+0x5f6>
		case D2U_R2L:	//从下到上,从右到左
			regval |= (0 << 5) | (0 << 4) | (1 << 3);
 80026fc:	89fb      	ldrh	r3, [r7, #14]
 80026fe:	f043 0308 	orr.w	r3, r3, #8
 8002702:	81fb      	strh	r3, [r7, #14]
			break;
 8002704:	bf00      	nop
		}
		dirreg = 0X03;
 8002706:	2303      	movs	r3, #3
 8002708:	81bb      	strh	r3, [r7, #12]
		regval |= 1 << 12;
 800270a:	89fb      	ldrh	r3, [r7, #14]
 800270c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002710:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg, regval);
 8002712:	89fa      	ldrh	r2, [r7, #14]
 8002714:	89bb      	ldrh	r3, [r7, #12]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f9e7 	bl	8001aec <LCD_WriteReg>
	}
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200000bc 	.word	0x200000bc
 800272c:	40011000 	.word	0x40011000
 8002730:	40010c00 	.word	0x40010c00

08002734 <LCD_DrawPoint>:
//Draw a point with color
//x,y: coordinate

void LCD_DrawPoint(uint16_t x, uint16_t y) {
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	4603      	mov	r3, r0
 800273c:	460a      	mov	r2, r1
 800273e:	80fb      	strh	r3, [r7, #6]
 8002740:	4613      	mov	r3, r2
 8002742:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x, y);
 8002744:	88ba      	ldrh	r2, [r7, #4]
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fa14 	bl	8001b78 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();
 8002750:	f7ff fa06 	bl	8001b60 <LCD_WriteRAM_Prepare>
	LCD_WR_DATA(POINT_COLOR); //POINT_COLOR: Color of this point
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <LCD_DrawPoint+0x54>)
 8002756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	4b0a      	ldr	r3, [pc, #40]	; (8002788 <LCD_DrawPoint+0x54>)
 800275e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002762:	615a      	str	r2, [r3, #20]
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <LCD_DrawPoint+0x58>)
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <LCD_DrawPoint+0x5c>)
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	4b06      	ldr	r3, [pc, #24]	; (8002788 <LCD_DrawPoint+0x54>)
 800276e:	2280      	movs	r2, #128	; 0x80
 8002770:	615a      	str	r2, [r3, #20]
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <LCD_DrawPoint+0x54>)
 8002774:	2280      	movs	r2, #128	; 0x80
 8002776:	611a      	str	r2, [r3, #16]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <LCD_DrawPoint+0x54>)
 800277a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800277e:	611a      	str	r2, [r3, #16]
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40011000 	.word	0x40011000
 800278c:	2000008c 	.word	0x2000008c
 8002790:	40010c00 	.word	0x40010c00

08002794 <LCD_Fast_DrawPoint>:
//Draw a point with color(quicker)
//x,y: coordinate
void LCD_Fast_DrawPoint(uint16_t x, uint16_t y, uint16_t color) {
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
 800279e:	460b      	mov	r3, r1
 80027a0:	80bb      	strh	r3, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	807b      	strh	r3, [r7, #2]
	if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 80027a6:	4b75      	ldr	r3, [pc, #468]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 80027a8:	889b      	ldrh	r3, [r3, #4]
 80027aa:	f249 3241 	movw	r2, #37697	; 0x9341
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d005      	beq.n	80027be <LCD_Fast_DrawPoint+0x2a>
 80027b2:	4b72      	ldr	r3, [pc, #456]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 80027b4:	889b      	ldrh	r3, [r3, #4]
 80027b6:	f245 3210 	movw	r2, #21264	; 0x5310
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d164      	bne.n	8002888 <LCD_Fast_DrawPoint+0xf4>
		LCD_WR_REG(lcddev.setxcmd);
 80027be:	4b6f      	ldr	r3, [pc, #444]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 80027c0:	895b      	ldrh	r3, [r3, #10]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff f906 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80027c8:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	615a      	str	r2, [r3, #20]
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	0a1b      	lsrs	r3, r3, #8
 80027dc:	b29a      	uxth	r2, r3
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	4b67      	ldr	r3, [pc, #412]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	615a      	str	r2, [r3, #20]
 80027e8:	4b65      	ldr	r3, [pc, #404]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027ea:	2280      	movs	r2, #128	; 0x80
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	4b64      	ldr	r3, [pc, #400]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027f4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80027f6:	4b62      	ldr	r3, [pc, #392]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80027f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fc:	611a      	str	r2, [r3, #16]
 80027fe:	4b60      	ldr	r3, [pc, #384]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002800:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002804:	615a      	str	r2, [r3, #20]
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	4a5e      	ldr	r2, [pc, #376]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 800280a:	b2db      	uxtb	r3, r3
 800280c:	60d3      	str	r3, [r2, #12]
 800280e:	4b5c      	ldr	r3, [pc, #368]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002810:	2280      	movs	r2, #128	; 0x80
 8002812:	615a      	str	r2, [r3, #20]
 8002814:	4b5a      	ldr	r3, [pc, #360]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002816:	2280      	movs	r2, #128	; 0x80
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	4b59      	ldr	r3, [pc, #356]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800281c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002820:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002822:	4b56      	ldr	r3, [pc, #344]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 8002824:	899b      	ldrh	r3, [r3, #12]
 8002826:	4618      	mov	r0, r3
 8002828:	f7ff f8d4 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 800282c:	4b54      	ldr	r3, [pc, #336]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800282e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002832:	611a      	str	r2, [r3, #16]
 8002834:	4b52      	ldr	r3, [pc, #328]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002836:	f44f 7200 	mov.w	r2, #512	; 0x200
 800283a:	615a      	str	r2, [r3, #20]
 800283c:	88bb      	ldrh	r3, [r7, #4]
 800283e:	0a1b      	lsrs	r3, r3, #8
 8002840:	b29a      	uxth	r2, r3
 8002842:	4b50      	ldr	r3, [pc, #320]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	615a      	str	r2, [r3, #20]
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800284e:	2280      	movs	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002858:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 800285a:	4b49      	ldr	r3, [pc, #292]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800285c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	4b47      	ldr	r3, [pc, #284]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002868:	615a      	str	r2, [r3, #20]
 800286a:	88bb      	ldrh	r3, [r7, #4]
 800286c:	4a45      	ldr	r2, [pc, #276]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 800286e:	b2db      	uxtb	r3, r3
 8002870:	60d3      	str	r3, [r2, #12]
 8002872:	4b43      	ldr	r3, [pc, #268]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002874:	2280      	movs	r2, #128	; 0x80
 8002876:	615a      	str	r2, [r3, #20]
 8002878:	4b41      	ldr	r3, [pc, #260]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	4b40      	ldr	r3, [pc, #256]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002880:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e1e6      	b.n	8002c56 <LCD_Fast_DrawPoint+0x4c2>
	} else if (lcddev.id == 0X5510) {
 8002888:	4b3c      	ldr	r3, [pc, #240]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 800288a:	889b      	ldrh	r3, [r3, #4]
 800288c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002890:	4293      	cmp	r3, r2
 8002892:	d179      	bne.n	8002988 <LCD_Fast_DrawPoint+0x1f4>
		LCD_WR_REG(lcddev.setxcmd);
 8002894:	4b39      	ldr	r3, [pc, #228]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 8002896:	895b      	ldrh	r3, [r3, #10]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f89b 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 800289e:	4b38      	ldr	r3, [pc, #224]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028a4:	611a      	str	r2, [r3, #16]
 80028a6:	4b36      	ldr	r3, [pc, #216]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ac:	615a      	str	r2, [r3, #20]
 80028ae:	88fb      	ldrh	r3, [r7, #6]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028ba:	2280      	movs	r2, #128	; 0x80
 80028bc:	615a      	str	r2, [r3, #20]
 80028be:	4b30      	ldr	r3, [pc, #192]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028c0:	2280      	movs	r2, #128	; 0x80
 80028c2:	611a      	str	r2, [r3, #16]
 80028c4:	4b2e      	ldr	r3, [pc, #184]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ca:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setxcmd + 1);
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 80028ce:	895b      	ldrh	r3, [r3, #10]
 80028d0:	3301      	adds	r3, #1
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff f87d 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(x & 0XFF);
 80028da:	4b29      	ldr	r3, [pc, #164]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e0:	611a      	str	r2, [r3, #16]
 80028e2:	4b27      	ldr	r3, [pc, #156]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	4a25      	ldr	r2, [pc, #148]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	60d3      	str	r3, [r2, #12]
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	615a      	str	r2, [r3, #20]
 80028f8:	4b21      	ldr	r3, [pc, #132]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	611a      	str	r2, [r3, #16]
 80028fe:	4b20      	ldr	r3, [pc, #128]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002904:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002906:	4b1d      	ldr	r3, [pc, #116]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 8002908:	899b      	ldrh	r3, [r3, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff f862 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8002910:	4b1b      	ldr	r3, [pc, #108]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002916:	611a      	str	r2, [r3, #16]
 8002918:	4b19      	ldr	r3, [pc, #100]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800291a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	88bb      	ldrh	r3, [r7, #4]
 8002922:	0a1b      	lsrs	r3, r3, #8
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b17      	ldr	r3, [pc, #92]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	4b15      	ldr	r3, [pc, #84]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800292c:	2280      	movs	r2, #128	; 0x80
 800292e:	615a      	str	r2, [r3, #20]
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002932:	2280      	movs	r2, #128	; 0x80
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	4b12      	ldr	r3, [pc, #72]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002938:	f44f 7200 	mov.w	r2, #512	; 0x200
 800293c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd + 1);
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <LCD_Fast_DrawPoint+0x1e8>)
 8002940:	899b      	ldrh	r3, [r3, #12]
 8002942:	3301      	adds	r3, #1
 8002944:	b29b      	uxth	r3, r3
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f844 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(y & 0XFF);
 800294c:	4b0c      	ldr	r3, [pc, #48]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800294e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002952:	611a      	str	r2, [r3, #16]
 8002954:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295a:	615a      	str	r2, [r3, #20]
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	4a09      	ldr	r2, [pc, #36]	; (8002984 <LCD_Fast_DrawPoint+0x1f0>)
 8002960:	b2db      	uxtb	r3, r3
 8002962:	60d3      	str	r3, [r2, #12]
 8002964:	4b06      	ldr	r3, [pc, #24]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002966:	2280      	movs	r2, #128	; 0x80
 8002968:	615a      	str	r2, [r3, #20]
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 800296c:	2280      	movs	r2, #128	; 0x80
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	4b03      	ldr	r3, [pc, #12]	; (8002980 <LCD_Fast_DrawPoint+0x1ec>)
 8002972:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002976:	611a      	str	r2, [r3, #16]
 8002978:	e16d      	b.n	8002c56 <LCD_Fast_DrawPoint+0x4c2>
 800297a:	bf00      	nop
 800297c:	200000bc 	.word	0x200000bc
 8002980:	40011000 	.word	0x40011000
 8002984:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X1963) {
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <LCD_Fast_DrawPoint+0x398>)
 800298a:	889b      	ldrh	r3, [r3, #4]
 800298c:	f641 1263 	movw	r2, #6499	; 0x1963
 8002990:	4293      	cmp	r3, r2
 8002992:	f040 80d1 	bne.w	8002b38 <LCD_Fast_DrawPoint+0x3a4>
		if (lcddev.dir == 0)
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <LCD_Fast_DrawPoint+0x398>)
 8002998:	799b      	ldrb	r3, [r3, #6]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d106      	bne.n	80029ac <LCD_Fast_DrawPoint+0x218>
			x = lcddev.width - 1 - x;
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <LCD_Fast_DrawPoint+0x398>)
 80029a0:	881a      	ldrh	r2, [r3, #0]
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	3b01      	subs	r3, #1
 80029aa:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80029ac:	4b5f      	ldr	r3, [pc, #380]	; (8002b2c <LCD_Fast_DrawPoint+0x398>)
 80029ae:	895b      	ldrh	r3, [r3, #10]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff f80f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 80029b6:	4b5e      	ldr	r3, [pc, #376]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029bc:	611a      	str	r2, [r3, #16]
 80029be:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029c4:	615a      	str	r2, [r3, #20]
 80029c6:	88fb      	ldrh	r3, [r7, #6]
 80029c8:	0a1b      	lsrs	r3, r3, #8
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	4b57      	ldr	r3, [pc, #348]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	615a      	str	r2, [r3, #20]
 80029d6:	4b56      	ldr	r3, [pc, #344]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029d8:	2280      	movs	r2, #128	; 0x80
 80029da:	611a      	str	r2, [r3, #16]
 80029dc:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 80029e4:	4b52      	ldr	r3, [pc, #328]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ea:	611a      	str	r2, [r3, #16]
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029f2:	615a      	str	r2, [r3, #20]
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	4a4f      	ldr	r2, [pc, #316]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	60d3      	str	r3, [r2, #12]
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	615a      	str	r2, [r3, #20]
 8002a02:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a04:	2280      	movs	r2, #128	; 0x80
 8002a06:	611a      	str	r2, [r3, #16]
 8002a08:	4b49      	ldr	r3, [pc, #292]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a0e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x >> 8);
 8002a10:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a16:	611a      	str	r2, [r3, #16]
 8002a18:	4b45      	ldr	r3, [pc, #276]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a1e:	615a      	str	r2, [r3, #20]
 8002a20:	88fb      	ldrh	r3, [r7, #6]
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	4b43      	ldr	r3, [pc, #268]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002a28:	60da      	str	r2, [r3, #12]
 8002a2a:	4b41      	ldr	r3, [pc, #260]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a2c:	2280      	movs	r2, #128	; 0x80
 8002a2e:	615a      	str	r2, [r3, #20]
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a32:	2280      	movs	r2, #128	; 0x80
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	4b3e      	ldr	r3, [pc, #248]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a3c:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8002a3e:	4b3c      	ldr	r3, [pc, #240]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a4c:	615a      	str	r2, [r3, #20]
 8002a4e:	88fb      	ldrh	r3, [r7, #6]
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	615a      	str	r2, [r3, #20]
 8002a5c:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a5e:	2280      	movs	r2, #128	; 0x80
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a68:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002a6a:	4b30      	ldr	r3, [pc, #192]	; (8002b2c <LCD_Fast_DrawPoint+0x398>)
 8002a6c:	899b      	ldrh	r3, [r3, #12]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe ffb0 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8002a74:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a7a:	611a      	str	r2, [r3, #16]
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a82:	615a      	str	r2, [r3, #20]
 8002a84:	88bb      	ldrh	r3, [r7, #4]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002a8c:	60da      	str	r2, [r3, #12]
 8002a8e:	4b28      	ldr	r3, [pc, #160]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a90:	2280      	movs	r2, #128	; 0x80
 8002a92:	615a      	str	r2, [r3, #20]
 8002a94:	4b26      	ldr	r3, [pc, #152]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a96:	2280      	movs	r2, #128	; 0x80
 8002a98:	611a      	str	r2, [r3, #16]
 8002a9a:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa8:	611a      	str	r2, [r3, #16]
 8002aaa:	4b21      	ldr	r3, [pc, #132]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ab0:	615a      	str	r2, [r3, #20]
 8002ab2:	88bb      	ldrh	r3, [r7, #4]
 8002ab4:	4a1f      	ldr	r2, [pc, #124]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	60d3      	str	r3, [r2, #12]
 8002aba:	4b1d      	ldr	r3, [pc, #116]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002abc:	2280      	movs	r2, #128	; 0x80
 8002abe:	615a      	str	r2, [r3, #20]
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	611a      	str	r2, [r3, #16]
 8002ac6:	4b1a      	ldr	r3, [pc, #104]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002acc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y >> 8);
 8002ace:	4b18      	ldr	r3, [pc, #96]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad4:	611a      	str	r2, [r3, #16]
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002adc:	615a      	str	r2, [r3, #20]
 8002ade:	88bb      	ldrh	r3, [r7, #4]
 8002ae0:	0a1b      	lsrs	r3, r3, #8
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	4b13      	ldr	r3, [pc, #76]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002aea:	2280      	movs	r2, #128	; 0x80
 8002aec:	615a      	str	r2, [r3, #20]
 8002aee:	4b10      	ldr	r3, [pc, #64]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	611a      	str	r2, [r3, #16]
 8002af4:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002afe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b02:	611a      	str	r2, [r3, #16]
 8002b04:	4b0a      	ldr	r3, [pc, #40]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0a:	615a      	str	r2, [r3, #20]
 8002b0c:	88bb      	ldrh	r3, [r7, #4]
 8002b0e:	4a09      	ldr	r2, [pc, #36]	; (8002b34 <LCD_Fast_DrawPoint+0x3a0>)
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	60d3      	str	r3, [r2, #12]
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	615a      	str	r2, [r3, #20]
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	611a      	str	r2, [r3, #16]
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <LCD_Fast_DrawPoint+0x39c>)
 8002b22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b26:	611a      	str	r2, [r3, #16]
 8002b28:	e095      	b.n	8002c56 <LCD_Fast_DrawPoint+0x4c2>
 8002b2a:	bf00      	nop
 8002b2c:	200000bc 	.word	0x200000bc
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40010c00 	.word	0x40010c00
	} else if (lcddev.id == 0X6804) {
 8002b38:	4b5e      	ldr	r3, [pc, #376]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002b3a:	889b      	ldrh	r3, [r3, #4]
 8002b3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d16f      	bne.n	8002c24 <LCD_Fast_DrawPoint+0x490>
		if (lcddev.dir == 1)
 8002b44:	4b5b      	ldr	r3, [pc, #364]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002b46:	799b      	ldrb	r3, [r3, #6]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d106      	bne.n	8002b5a <LCD_Fast_DrawPoint+0x3c6>
			x = lcddev.width - 1 - x;	//横屏时处理
 8002b4c:	4b59      	ldr	r3, [pc, #356]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002b4e:	881a      	ldrh	r2, [r3, #0]
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	3b01      	subs	r3, #1
 8002b58:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002b5a:	4b56      	ldr	r3, [pc, #344]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002b5c:	895b      	ldrh	r3, [r3, #10]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe ff38 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(x >> 8);
 8002b64:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	4b52      	ldr	r3, [pc, #328]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b72:	615a      	str	r2, [r3, #20]
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	4b50      	ldr	r3, [pc, #320]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b80:	2280      	movs	r2, #128	; 0x80
 8002b82:	615a      	str	r2, [r3, #20]
 8002b84:	4b4c      	ldr	r3, [pc, #304]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b86:	2280      	movs	r2, #128	; 0x80
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b90:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(x & 0XFF);
 8002b92:	4b49      	ldr	r3, [pc, #292]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b98:	611a      	str	r2, [r3, #16]
 8002b9a:	4b47      	ldr	r3, [pc, #284]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ba0:	615a      	str	r2, [r3, #20]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	4a45      	ldr	r2, [pc, #276]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	60d3      	str	r3, [r2, #12]
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	615a      	str	r2, [r3, #20]
 8002bb0:	4b41      	ldr	r3, [pc, #260]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	611a      	str	r2, [r3, #16]
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bbc:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(lcddev.setycmd);
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002bc0:	899b      	ldrh	r3, [r3, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe ff06 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(y >> 8);
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bce:	611a      	str	r2, [r3, #16]
 8002bd0:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bd6:	615a      	str	r2, [r3, #20]
 8002bd8:	88bb      	ldrh	r3, [r7, #4]
 8002bda:	0a1b      	lsrs	r3, r3, #8
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	4b37      	ldr	r3, [pc, #220]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002be0:	60da      	str	r2, [r3, #12]
 8002be2:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002be4:	2280      	movs	r2, #128	; 0x80
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	4b33      	ldr	r3, [pc, #204]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bea:	2280      	movs	r2, #128	; 0x80
 8002bec:	611a      	str	r2, [r3, #16]
 8002bee:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(y & 0XFF);
 8002bf6:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002bf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfc:	611a      	str	r2, [r3, #16]
 8002bfe:	4b2e      	ldr	r3, [pc, #184]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c04:	615a      	str	r2, [r3, #20]
 8002c06:	88bb      	ldrh	r3, [r7, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	60d3      	str	r3, [r2, #12]
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	615a      	str	r2, [r3, #20]
 8002c14:	4b28      	ldr	r3, [pc, #160]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
 8002c1a:	4b27      	ldr	r3, [pc, #156]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	e018      	b.n	8002c56 <LCD_Fast_DrawPoint+0x4c2>
	} else {
		if (lcddev.dir == 1)
 8002c24:	4b23      	ldr	r3, [pc, #140]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002c26:	799b      	ldrb	r3, [r3, #6]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d106      	bne.n	8002c3a <LCD_Fast_DrawPoint+0x4a6>
			x = lcddev.width - 1 - x;	//横屏其实就是调转x,y坐标
 8002c2c:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, x);
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002c3c:	895b      	ldrh	r3, [r3, #10]
 8002c3e:	88fa      	ldrh	r2, [r7, #6]
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7fe ff52 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, y);
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002c4a:	899b      	ldrh	r3, [r3, #12]
 8002c4c:	88ba      	ldrh	r2, [r7, #4]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ff4b 	bl	8001aec <LCD_WriteReg>
	}
	LCD_RS_CLR;
 8002c56:	4b18      	ldr	r3, [pc, #96]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c5c:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c64:	615a      	str	r2, [r3, #20]
	DATAOUT(lcddev.wramcmd);	//写指令
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <LCD_Fast_DrawPoint+0x520>)
 8002c68:	891a      	ldrh	r2, [r3, #8]
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002c6c:	60da      	str	r2, [r3, #12]
	LCD_WR_CLR;
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8002c74:	4b10      	ldr	r3, [pc, #64]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c76:	2280      	movs	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8002c7a:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c80:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(color);		//写数据
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c90:	615a      	str	r2, [r3, #20]
 8002c92:	4a0a      	ldr	r2, [pc, #40]	; (8002cbc <LCD_Fast_DrawPoint+0x528>)
 8002c94:	887b      	ldrh	r3, [r7, #2]
 8002c96:	60d3      	str	r3, [r2, #12]
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002c9a:	2280      	movs	r2, #128	; 0x80
 8002c9c:	615a      	str	r2, [r3, #20]
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002ca0:	2280      	movs	r2, #128	; 0x80
 8002ca2:	611a      	str	r2, [r3, #16]
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <LCD_Fast_DrawPoint+0x524>)
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	611a      	str	r2, [r3, #16]
}
 8002cac:	bf00      	nop
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	200000bc 	.word	0x200000bc
 8002cb8:	40011000 	.word	0x40011000
 8002cbc:	40010c00 	.word	0x40010c00

08002cc0 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm) {
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8002cca:	20be      	movs	r0, #190	; 0xbe
 8002ccc:	f7fe fe82 	bl	80019d4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8002cd0:	4b4b      	ldr	r3, [pc, #300]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002cd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cd6:	611a      	str	r2, [r3, #16]
 8002cd8:	4b49      	ldr	r3, [pc, #292]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	4b48      	ldr	r3, [pc, #288]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	4b46      	ldr	r3, [pc, #280]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002ce8:	2280      	movs	r2, #128	; 0x80
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002cee:	2280      	movs	r2, #128	; 0x80
 8002cf0:	611a      	str	r2, [r3, #16]
 8002cf2:	4b43      	ldr	r3, [pc, #268]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf8:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(pwm * 2.55);	//2设置PWM占空比
 8002cfa:	4b41      	ldr	r3, [pc, #260]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d00:	611a      	str	r2, [r3, #16]
 8002d02:	4b3f      	ldr	r3, [pc, #252]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d08:	615a      	str	r2, [r3, #20]
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fd fbdd 	bl	80004cc <__aeabi_i2d>
 8002d12:	a339      	add	r3, pc, #228	; (adr r3, 8002df8 <LCD_SSD_BackLightSet+0x138>)
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f7fd fc42 	bl	80005a0 <__aeabi_dmul>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	460c      	mov	r4, r1
 8002d20:	461a      	mov	r2, r3
 8002d22:	4623      	mov	r3, r4
 8002d24:	4c37      	ldr	r4, [pc, #220]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd fe4b 	bl	80009c4 <__aeabi_d2uiz>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60e3      	str	r3, [r4, #12]
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	4b31      	ldr	r3, [pc, #196]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d3a:	2280      	movs	r2, #128	; 0x80
 8002d3c:	611a      	str	r2, [r3, #16]
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d44:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x01);	//3设置C
 8002d46:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4c:	611a      	str	r2, [r3, #16]
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d54:	615a      	str	r2, [r3, #20]
 8002d56:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	60da      	str	r2, [r3, #12]
 8002d5c:	4b28      	ldr	r3, [pc, #160]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d5e:	2280      	movs	r2, #128	; 0x80
 8002d60:	615a      	str	r2, [r3, #20]
 8002d62:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d64:	2280      	movs	r2, #128	; 0x80
 8002d66:	611a      	str	r2, [r3, #16]
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d6e:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0xFF);	//4设置D
 8002d70:	4b23      	ldr	r3, [pc, #140]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d76:	611a      	str	r2, [r3, #16]
 8002d78:	4b21      	ldr	r3, [pc, #132]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	615a      	str	r2, [r3, #20]
 8002d80:	4b20      	ldr	r3, [pc, #128]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002d82:	22ff      	movs	r2, #255	; 0xff
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	4b1e      	ldr	r3, [pc, #120]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d88:	2280      	movs	r2, #128	; 0x80
 8002d8a:	615a      	str	r2, [r3, #20]
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d8e:	2280      	movs	r2, #128	; 0x80
 8002d90:	611a      	str	r2, [r3, #16]
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d98:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//5设置E
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002da0:	611a      	str	r2, [r3, #16]
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da8:	615a      	str	r2, [r3, #20]
 8002daa:	4b16      	ldr	r3, [pc, #88]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
 8002db0:	4b13      	ldr	r3, [pc, #76]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002db2:	2280      	movs	r2, #128	; 0x80
 8002db4:	615a      	str	r2, [r3, #20]
 8002db6:	4b12      	ldr	r3, [pc, #72]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002db8:	2280      	movs	r2, #128	; 0x80
 8002dba:	611a      	str	r2, [r3, #16]
 8002dbc:	4b10      	ldr	r3, [pc, #64]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dc2:	611a      	str	r2, [r3, #16]
	LCD_WR_DATA(0x00);	//6设置F
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002dc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dca:	611a      	str	r2, [r3, #16]
 8002dcc:	4b0c      	ldr	r3, [pc, #48]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	; (8002e04 <LCD_SSD_BackLightSet+0x144>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002ddc:	2280      	movs	r2, #128	; 0x80
 8002dde:	615a      	str	r2, [r3, #20]
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002de2:	2280      	movs	r2, #128	; 0x80
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <LCD_SSD_BackLightSet+0x140>)
 8002de8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dec:	611a      	str	r2, [r3, #16]
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd90      	pop	{r4, r7, pc}
 8002df6:	bf00      	nop
 8002df8:	66666666 	.word	0x66666666
 8002dfc:	40046666 	.word	0x40046666
 8002e00:	40011000 	.word	0x40011000
 8002e04:	40010c00 	.word	0x40010c00

08002e08 <LCD_Display_Dir>:
// Set LCD display direction
// dir: 0, vertical 1, horizontal
void LCD_Display_Dir(uint8_t dir) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
	if (dir == 0)			//竖屏
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d177      	bne.n	8002f08 <LCD_Display_Dir+0x100>
			{
		lcddev.dir = 0;	//竖屏
 8002e18:	4b80      	ldr	r3, [pc, #512]	; (800301c <LCD_Display_Dir+0x214>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 240;
 8002e1e:	4b7f      	ldr	r3, [pc, #508]	; (800301c <LCD_Display_Dir+0x214>)
 8002e20:	22f0      	movs	r2, #240	; 0xf0
 8002e22:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8002e24:	4b7d      	ldr	r3, [pc, #500]	; (800301c <LCD_Display_Dir+0x214>)
 8002e26:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e2a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002e2c:	4b7b      	ldr	r3, [pc, #492]	; (800301c <LCD_Display_Dir+0x214>)
 8002e2e:	889b      	ldrh	r3, [r3, #4]
 8002e30:	f249 3241 	movw	r2, #37697	; 0x9341
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d00b      	beq.n	8002e50 <LCD_Display_Dir+0x48>
 8002e38:	4b78      	ldr	r3, [pc, #480]	; (800301c <LCD_Display_Dir+0x214>)
 8002e3a:	889b      	ldrh	r3, [r3, #4]
 8002e3c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d005      	beq.n	8002e50 <LCD_Display_Dir+0x48>
 8002e44:	4b75      	ldr	r3, [pc, #468]	; (800301c <LCD_Display_Dir+0x214>)
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d11e      	bne.n	8002e8e <LCD_Display_Dir+0x86>
			lcddev.wramcmd = 0X2C;
 8002e50:	4b72      	ldr	r3, [pc, #456]	; (800301c <LCD_Display_Dir+0x214>)
 8002e52:	222c      	movs	r2, #44	; 0x2c
 8002e54:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002e56:	4b71      	ldr	r3, [pc, #452]	; (800301c <LCD_Display_Dir+0x214>)
 8002e58:	222a      	movs	r2, #42	; 0x2a
 8002e5a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002e5c:	4b6f      	ldr	r3, [pc, #444]	; (800301c <LCD_Display_Dir+0x214>)
 8002e5e:	222b      	movs	r2, #43	; 0x2b
 8002e60:	819a      	strh	r2, [r3, #12]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002e62:	4b6e      	ldr	r3, [pc, #440]	; (800301c <LCD_Display_Dir+0x214>)
 8002e64:	889b      	ldrh	r3, [r3, #4]
 8002e66:	f646 0204 	movw	r2, #26628	; 0x6804
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d006      	beq.n	8002e7c <LCD_Display_Dir+0x74>
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	; (800301c <LCD_Display_Dir+0x214>)
 8002e70:	889b      	ldrh	r3, [r3, #4]
 8002e72:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e76:	4293      	cmp	r3, r2
 8002e78:	f040 80c7 	bne.w	800300a <LCD_Display_Dir+0x202>
				lcddev.width = 320;
 8002e7c:	4b67      	ldr	r3, [pc, #412]	; (800301c <LCD_Display_Dir+0x214>)
 8002e7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e82:	801a      	strh	r2, [r3, #0]
				lcddev.height = 480;
 8002e84:	4b65      	ldr	r3, [pc, #404]	; (800301c <LCD_Display_Dir+0x214>)
 8002e86:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e8a:	805a      	strh	r2, [r3, #2]
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002e8c:	e0bd      	b.n	800300a <LCD_Display_Dir+0x202>
			}
		} else if (lcddev.id == 0x5510) {
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <LCD_Display_Dir+0x214>)
 8002e90:	889b      	ldrh	r3, [r3, #4]
 8002e92:	f245 5210 	movw	r2, #21776	; 0x5510
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d114      	bne.n	8002ec4 <LCD_Display_Dir+0xbc>
			lcddev.wramcmd = 0X2C00;
 8002e9a:	4b60      	ldr	r3, [pc, #384]	; (800301c <LCD_Display_Dir+0x214>)
 8002e9c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002ea0:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002ea2:	4b5e      	ldr	r3, [pc, #376]	; (800301c <LCD_Display_Dir+0x214>)
 8002ea4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002ea8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002eaa:	4b5c      	ldr	r3, [pc, #368]	; (800301c <LCD_Display_Dir+0x214>)
 8002eac:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002eb0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;
 8002eb2:	4b5a      	ldr	r3, [pc, #360]	; (800301c <LCD_Display_Dir+0x214>)
 8002eb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002eb8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;
 8002eba:	4b58      	ldr	r3, [pc, #352]	; (800301c <LCD_Display_Dir+0x214>)
 8002ebc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ec0:	805a      	strh	r2, [r3, #2]
 8002ec2:	e0a3      	b.n	800300c <LCD_Display_Dir+0x204>
		} else if (lcddev.id == 0X1963) {
 8002ec4:	4b55      	ldr	r3, [pc, #340]	; (800301c <LCD_Display_Dir+0x214>)
 8002ec6:	889b      	ldrh	r3, [r3, #4]
 8002ec8:	f641 1263 	movw	r2, #6499	; 0x1963
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d111      	bne.n	8002ef4 <LCD_Display_Dir+0xec>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002ed0:	4b52      	ldr	r3, [pc, #328]	; (800301c <LCD_Display_Dir+0x214>)
 8002ed2:	222c      	movs	r2, #44	; 0x2c
 8002ed4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;	//设置写X坐标指令
 8002ed6:	4b51      	ldr	r3, [pc, #324]	; (800301c <LCD_Display_Dir+0x214>)
 8002ed8:	222b      	movs	r2, #43	; 0x2b
 8002eda:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;	//设置写Y坐标指令
 8002edc:	4b4f      	ldr	r3, [pc, #316]	; (800301c <LCD_Display_Dir+0x214>)
 8002ede:	222a      	movs	r2, #42	; 0x2a
 8002ee0:	819a      	strh	r2, [r3, #12]
			lcddev.width = 480;		//设置宽度480
 8002ee2:	4b4e      	ldr	r3, [pc, #312]	; (800301c <LCD_Display_Dir+0x214>)
 8002ee4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ee8:	801a      	strh	r2, [r3, #0]
			lcddev.height = 800;		//设置高度800
 8002eea:	4b4c      	ldr	r3, [pc, #304]	; (800301c <LCD_Display_Dir+0x214>)
 8002eec:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ef0:	805a      	strh	r2, [r3, #2]
 8002ef2:	e08b      	b.n	800300c <LCD_Display_Dir+0x204>
		} else {
			lcddev.wramcmd = 0X22;
 8002ef4:	4b49      	ldr	r3, [pc, #292]	; (800301c <LCD_Display_Dir+0x214>)
 8002ef6:	2222      	movs	r2, #34	; 0x22
 8002ef8:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X20;
 8002efa:	4b48      	ldr	r3, [pc, #288]	; (800301c <LCD_Display_Dir+0x214>)
 8002efc:	2220      	movs	r2, #32
 8002efe:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X21;
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <LCD_Display_Dir+0x214>)
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	819a      	strh	r2, [r3, #12]
 8002f06:	e081      	b.n	800300c <LCD_Display_Dir+0x204>
		}
	} else 				//横屏
	{
		lcddev.dir = 1;	//横屏
 8002f08:	4b44      	ldr	r3, [pc, #272]	; (800301c <LCD_Display_Dir+0x214>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	719a      	strb	r2, [r3, #6]
		lcddev.width = 320;
 8002f0e:	4b43      	ldr	r3, [pc, #268]	; (800301c <LCD_Display_Dir+0x214>)
 8002f10:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002f14:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <LCD_Display_Dir+0x214>)
 8002f18:	22f0      	movs	r2, #240	; 0xf0
 8002f1a:	805a      	strh	r2, [r3, #2]
		if (lcddev.id == 0X9341 || lcddev.id == 0X5310) {
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <LCD_Display_Dir+0x214>)
 8002f1e:	889b      	ldrh	r3, [r3, #4]
 8002f20:	f249 3241 	movw	r2, #37697	; 0x9341
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d005      	beq.n	8002f34 <LCD_Display_Dir+0x12c>
 8002f28:	4b3c      	ldr	r3, [pc, #240]	; (800301c <LCD_Display_Dir+0x214>)
 8002f2a:	889b      	ldrh	r3, [r3, #4]
 8002f2c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d109      	bne.n	8002f48 <LCD_Display_Dir+0x140>
			lcddev.wramcmd = 0X2C;
 8002f34:	4b39      	ldr	r3, [pc, #228]	; (800301c <LCD_Display_Dir+0x214>)
 8002f36:	222c      	movs	r2, #44	; 0x2c
 8002f38:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <LCD_Display_Dir+0x214>)
 8002f3c:	222a      	movs	r2, #42	; 0x2a
 8002f3e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;
 8002f40:	4b36      	ldr	r3, [pc, #216]	; (800301c <LCD_Display_Dir+0x214>)
 8002f42:	222b      	movs	r2, #43	; 0x2b
 8002f44:	819a      	strh	r2, [r3, #12]
 8002f46:	e04b      	b.n	8002fe0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X6804) {
 8002f48:	4b34      	ldr	r3, [pc, #208]	; (800301c <LCD_Display_Dir+0x214>)
 8002f4a:	889b      	ldrh	r3, [r3, #4]
 8002f4c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d109      	bne.n	8002f68 <LCD_Display_Dir+0x160>
			lcddev.wramcmd = 0X2C;
 8002f54:	4b31      	ldr	r3, [pc, #196]	; (800301c <LCD_Display_Dir+0x214>)
 8002f56:	222c      	movs	r2, #44	; 0x2c
 8002f58:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2B;
 8002f5a:	4b30      	ldr	r3, [pc, #192]	; (800301c <LCD_Display_Dir+0x214>)
 8002f5c:	222b      	movs	r2, #43	; 0x2b
 8002f5e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2A;
 8002f60:	4b2e      	ldr	r3, [pc, #184]	; (800301c <LCD_Display_Dir+0x214>)
 8002f62:	222a      	movs	r2, #42	; 0x2a
 8002f64:	819a      	strh	r2, [r3, #12]
 8002f66:	e03b      	b.n	8002fe0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0x5510) {
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <LCD_Display_Dir+0x214>)
 8002f6a:	889b      	ldrh	r3, [r3, #4]
 8002f6c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d114      	bne.n	8002f9e <LCD_Display_Dir+0x196>
			lcddev.wramcmd = 0X2C00;
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <LCD_Display_Dir+0x214>)
 8002f76:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002f7a:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A00;
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <LCD_Display_Dir+0x214>)
 8002f7e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002f82:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B00;
 8002f84:	4b25      	ldr	r3, [pc, #148]	; (800301c <LCD_Display_Dir+0x214>)
 8002f86:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002f8a:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;
 8002f8c:	4b23      	ldr	r3, [pc, #140]	; (800301c <LCD_Display_Dir+0x214>)
 8002f8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f92:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;
 8002f94:	4b21      	ldr	r3, [pc, #132]	; (800301c <LCD_Display_Dir+0x214>)
 8002f96:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f9a:	805a      	strh	r2, [r3, #2]
 8002f9c:	e020      	b.n	8002fe0 <LCD_Display_Dir+0x1d8>
		} else if (lcddev.id == 0X1963) {
 8002f9e:	4b1f      	ldr	r3, [pc, #124]	; (800301c <LCD_Display_Dir+0x214>)
 8002fa0:	889b      	ldrh	r3, [r3, #4]
 8002fa2:	f641 1263 	movw	r2, #6499	; 0x1963
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d111      	bne.n	8002fce <LCD_Display_Dir+0x1c6>
			lcddev.wramcmd = 0X2C;	//设置写入GRAM的指令
 8002faa:	4b1c      	ldr	r3, [pc, #112]	; (800301c <LCD_Display_Dir+0x214>)
 8002fac:	222c      	movs	r2, #44	; 0x2c
 8002fae:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X2A;	//设置写X坐标指令
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <LCD_Display_Dir+0x214>)
 8002fb2:	222a      	movs	r2, #42	; 0x2a
 8002fb4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X2B;	//设置写Y坐标指令
 8002fb6:	4b19      	ldr	r3, [pc, #100]	; (800301c <LCD_Display_Dir+0x214>)
 8002fb8:	222b      	movs	r2, #43	; 0x2b
 8002fba:	819a      	strh	r2, [r3, #12]
			lcddev.width = 800;		//设置宽度800
 8002fbc:	4b17      	ldr	r3, [pc, #92]	; (800301c <LCD_Display_Dir+0x214>)
 8002fbe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002fc2:	801a      	strh	r2, [r3, #0]
			lcddev.height = 480;		//设置高度480
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <LCD_Display_Dir+0x214>)
 8002fc6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fca:	805a      	strh	r2, [r3, #2]
 8002fcc:	e008      	b.n	8002fe0 <LCD_Display_Dir+0x1d8>
		} else {
			lcddev.wramcmd = 0X22;
 8002fce:	4b13      	ldr	r3, [pc, #76]	; (800301c <LCD_Display_Dir+0x214>)
 8002fd0:	2222      	movs	r2, #34	; 0x22
 8002fd2:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd = 0X21;
 8002fd4:	4b11      	ldr	r3, [pc, #68]	; (800301c <LCD_Display_Dir+0x214>)
 8002fd6:	2221      	movs	r2, #33	; 0x21
 8002fd8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd = 0X20;
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <LCD_Display_Dir+0x214>)
 8002fdc:	2220      	movs	r2, #32
 8002fde:	819a      	strh	r2, [r3, #12]
		}
		if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <LCD_Display_Dir+0x214>)
 8002fe2:	889b      	ldrh	r3, [r3, #4]
 8002fe4:	f646 0204 	movw	r2, #26628	; 0x6804
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d005      	beq.n	8002ff8 <LCD_Display_Dir+0x1f0>
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <LCD_Display_Dir+0x214>)
 8002fee:	889b      	ldrh	r3, [r3, #4]
 8002ff0:	f245 3210 	movw	r2, #21264	; 0x5310
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d109      	bne.n	800300c <LCD_Display_Dir+0x204>
			lcddev.width = 480;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <LCD_Display_Dir+0x214>)
 8002ffa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ffe:	801a      	strh	r2, [r3, #0]
			lcddev.height = 320;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <LCD_Display_Dir+0x214>)
 8003002:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003006:	805a      	strh	r2, [r3, #2]
 8003008:	e000      	b.n	800300c <LCD_Display_Dir+0x204>
			if (lcddev.id == 0X6804 || lcddev.id == 0X5310) {
 800300a:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 800300c:	2000      	movs	r0, #0
 800300e:	f7ff f87f 	bl	8002110 <LCD_Scan_Dir>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200000bc 	.word	0x200000bc

08003020 <LCD_Init>:
	}
}
//初始化lcd
//该初始化函数可以初始化各种ALIENTEK出品的LCD液晶屏
//本函数占用较大flash,用户可以根据自己的实际情况,删掉未用到的LCD初始化代码.以节省空间.
void LCD_Init(void) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Initure;

	__HAL_RCC_GPIOB_CLK_ENABLE();           	//开启GPIOB时钟
 8003026:	4b90      	ldr	r3, [pc, #576]	; (8003268 <LCD_Init+0x248>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	4a8f      	ldr	r2, [pc, #572]	; (8003268 <LCD_Init+0x248>)
 800302c:	f043 0308 	orr.w	r3, r3, #8
 8003030:	6193      	str	r3, [r2, #24]
 8003032:	4b8d      	ldr	r3, [pc, #564]	; (8003268 <LCD_Init+0x248>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();           	//开启GPIOC时钟
 800303e:	4b8a      	ldr	r3, [pc, #552]	; (8003268 <LCD_Init+0x248>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	4a89      	ldr	r2, [pc, #548]	; (8003268 <LCD_Init+0x248>)
 8003044:	f043 0310 	orr.w	r3, r3, #16
 8003048:	6193      	str	r3, [r2, #24]
 800304a:	4b87      	ldr	r3, [pc, #540]	; (8003268 <LCD_Init+0x248>)
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	603b      	str	r3, [r7, #0]
 8003054:	683b      	ldr	r3, [r7, #0]

	//PC6,7,8,9,10
	GPIO_Initure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 |\
 8003056:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 800305a:	60bb      	str	r3, [r7, #8]
 GPIO_PIN_9
			| GPIO_PIN_10;
	GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;  	//推挽输出
 800305c:	2301      	movs	r3, #1
 800305e:	60fb      	str	r3, [r7, #12]
	GPIO_Initure.Pull = GPIO_PULLUP;          	//上拉
 8003060:	2301      	movs	r3, #1
 8003062:	613b      	str	r3, [r7, #16]
	GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;    	 	//高速
 8003064:	2303      	movs	r3, #3
 8003066:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOC, &GPIO_Initure);
 8003068:	f107 0308 	add.w	r3, r7, #8
 800306c:	4619      	mov	r1, r3
 800306e:	487f      	ldr	r0, [pc, #508]	; (800326c <LCD_Init+0x24c>)
 8003070:	f7fd fe5a 	bl	8000d28 <HAL_GPIO_Init>

	//PB0~15
	GPIO_Initure.Pin = GPIO_PIN_All;				//PB推挽输出
 8003074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003078:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_Initure);
 800307a:	f107 0308 	add.w	r3, r7, #8
 800307e:	4619      	mov	r1, r3
 8003080:	487b      	ldr	r0, [pc, #492]	; (8003270 <LCD_Init+0x250>)
 8003082:	f7fd fe51 	bl	8000d28 <HAL_GPIO_Init>

//	__HAL_AFIO_REMAP_SWJ_DISABLE();				//禁止JTAG

	HAL_Delay(50); // delay 50 ms
 8003086:	2032      	movs	r0, #50	; 0x32
 8003088:	f7fd fd1e 	bl	8000ac8 <HAL_Delay>
	LCD_WriteReg(0x0000, 0x0001);
 800308c:	2101      	movs	r1, #1
 800308e:	2000      	movs	r0, #0
 8003090:	f7fe fd2c 	bl	8001aec <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8003094:	2032      	movs	r0, #50	; 0x32
 8003096:	f7fd fd17 	bl	8000ac8 <HAL_Delay>
	lcddev.id = LCD_ReadReg(0x0000);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe fd50 	bl	8001b40 <LCD_ReadReg>
 80030a0:	4603      	mov	r3, r0
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b73      	ldr	r3, [pc, #460]	; (8003274 <LCD_Init+0x254>)
 80030a6:	809a      	strh	r2, [r3, #4]
	if (lcddev.id < 0XFF || lcddev.id == 0XFFFF || lcddev.id == 0X9300) //读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80030a8:	4b72      	ldr	r3, [pc, #456]	; (8003274 <LCD_Init+0x254>)
 80030aa:	889b      	ldrh	r3, [r3, #4]
 80030ac:	2bfe      	cmp	r3, #254	; 0xfe
 80030ae:	d90b      	bls.n	80030c8 <LCD_Init+0xa8>
 80030b0:	4b70      	ldr	r3, [pc, #448]	; (8003274 <LCD_Init+0x254>)
 80030b2:	889b      	ldrh	r3, [r3, #4]
 80030b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d005      	beq.n	80030c8 <LCD_Init+0xa8>
 80030bc:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <LCD_Init+0x254>)
 80030be:	889b      	ldrh	r3, [r3, #4]
 80030c0:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 80030c4:	f040 80c8 	bne.w	8003258 <LCD_Init+0x238>
			{
		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 80030c8:	20d3      	movs	r0, #211	; 0xd3
 80030ca:	f7fe fc83 	bl	80019d4 <LCD_WR_REG>
		LCD_RD_DATA(); 				//dummy read 	
 80030ce:	f7fe fcc9 	bl	8001a64 <LCD_RD_DATA>
		LCD_RD_DATA();   	    	//读到0X00
 80030d2:	f7fe fcc7 	bl	8001a64 <LCD_RD_DATA>
		lcddev.id = LCD_RD_DATA();   	//读取93
 80030d6:	f7fe fcc5 	bl	8001a64 <LCD_RD_DATA>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4b65      	ldr	r3, [pc, #404]	; (8003274 <LCD_Init+0x254>)
 80030e0:	809a      	strh	r2, [r3, #4]
		lcddev.id <<= 8;
 80030e2:	4b64      	ldr	r3, [pc, #400]	; (8003274 <LCD_Init+0x254>)
 80030e4:	889b      	ldrh	r3, [r3, #4]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	4b62      	ldr	r3, [pc, #392]	; (8003274 <LCD_Init+0x254>)
 80030ec:	809a      	strh	r2, [r3, #4]
		lcddev.id |= LCD_RD_DATA();  	//读取41
 80030ee:	f7fe fcb9 	bl	8001a64 <LCD_RD_DATA>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4b5f      	ldr	r3, [pc, #380]	; (8003274 <LCD_Init+0x254>)
 80030f8:	889b      	ldrh	r3, [r3, #4]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b5d      	ldr	r3, [pc, #372]	; (8003274 <LCD_Init+0x254>)
 8003100:	809a      	strh	r2, [r3, #4]
		if (lcddev.id != 0X9341)		//非9341,尝试是不是6804
 8003102:	4b5c      	ldr	r3, [pc, #368]	; (8003274 <LCD_Init+0x254>)
 8003104:	889b      	ldrh	r3, [r3, #4]
 8003106:	f249 3241 	movw	r2, #37697	; 0x9341
 800310a:	4293      	cmp	r3, r2
 800310c:	f000 80a4 	beq.w	8003258 <LCD_Init+0x238>
				{
			LCD_WR_REG(0XBF);
 8003110:	20bf      	movs	r0, #191	; 0xbf
 8003112:	f7fe fc5f 	bl	80019d4 <LCD_WR_REG>
			LCD_RD_DATA(); 			//dummy read 	 
 8003116:	f7fe fca5 	bl	8001a64 <LCD_RD_DATA>
			LCD_RD_DATA();   	    //读回0X01
 800311a:	f7fe fca3 	bl	8001a64 <LCD_RD_DATA>
			LCD_RD_DATA(); 			//读回0XD0
 800311e:	f7fe fca1 	bl	8001a64 <LCD_RD_DATA>
			lcddev.id = LCD_RD_DATA(); 			//这里读回0X68
 8003122:	f7fe fc9f 	bl	8001a64 <LCD_RD_DATA>
 8003126:	4603      	mov	r3, r0
 8003128:	461a      	mov	r2, r3
 800312a:	4b52      	ldr	r3, [pc, #328]	; (8003274 <LCD_Init+0x254>)
 800312c:	809a      	strh	r2, [r3, #4]
			lcddev.id <<= 8;
 800312e:	4b51      	ldr	r3, [pc, #324]	; (8003274 <LCD_Init+0x254>)
 8003130:	889b      	ldrh	r3, [r3, #4]
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	b29a      	uxth	r2, r3
 8003136:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <LCD_Init+0x254>)
 8003138:	809a      	strh	r2, [r3, #4]
			lcddev.id |= LCD_RD_DATA(); 			//这里读回0X04
 800313a:	f7fe fc93 	bl	8001a64 <LCD_RD_DATA>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <LCD_Init+0x254>)
 8003144:	889b      	ldrh	r3, [r3, #4]
 8003146:	4313      	orrs	r3, r2
 8003148:	b29a      	uxth	r2, r3
 800314a:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <LCD_Init+0x254>)
 800314c:	809a      	strh	r2, [r3, #4]
			if (lcddev.id != 0X6804)	//也不是6804,尝试看看是不是NT35310
 800314e:	4b49      	ldr	r3, [pc, #292]	; (8003274 <LCD_Init+0x254>)
 8003150:	889b      	ldrh	r3, [r3, #4]
 8003152:	f646 0204 	movw	r2, #26628	; 0x6804
 8003156:	4293      	cmp	r3, r2
 8003158:	d07e      	beq.n	8003258 <LCD_Init+0x238>
					{
				LCD_WR_REG(0XD4);
 800315a:	20d4      	movs	r0, #212	; 0xd4
 800315c:	f7fe fc3a 	bl	80019d4 <LCD_WR_REG>
				LCD_RD_DATA(); 				//dummy read  
 8003160:	f7fe fc80 	bl	8001a64 <LCD_RD_DATA>
				LCD_RD_DATA();   			//读回0X01	 
 8003164:	f7fe fc7e 	bl	8001a64 <LCD_RD_DATA>
				lcddev.id = LCD_RD_DATA();	//读回0X53
 8003168:	f7fe fc7c 	bl	8001a64 <LCD_RD_DATA>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	4b40      	ldr	r3, [pc, #256]	; (8003274 <LCD_Init+0x254>)
 8003172:	809a      	strh	r2, [r3, #4]
				lcddev.id <<= 8;
 8003174:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <LCD_Init+0x254>)
 8003176:	889b      	ldrh	r3, [r3, #4]
 8003178:	021b      	lsls	r3, r3, #8
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <LCD_Init+0x254>)
 800317e:	809a      	strh	r2, [r3, #4]
				lcddev.id |= LCD_RD_DATA();	//这里读回0X10
 8003180:	f7fe fc70 	bl	8001a64 <LCD_RD_DATA>
 8003184:	4603      	mov	r3, r0
 8003186:	461a      	mov	r2, r3
 8003188:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <LCD_Init+0x254>)
 800318a:	889b      	ldrh	r3, [r3, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b38      	ldr	r3, [pc, #224]	; (8003274 <LCD_Init+0x254>)
 8003192:	809a      	strh	r2, [r3, #4]
				if (lcddev.id != 0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8003194:	4b37      	ldr	r3, [pc, #220]	; (8003274 <LCD_Init+0x254>)
 8003196:	889b      	ldrh	r3, [r3, #4]
 8003198:	f245 3210 	movw	r2, #21264	; 0x5310
 800319c:	4293      	cmp	r3, r2
 800319e:	d05b      	beq.n	8003258 <LCD_Init+0x238>
						{
					LCD_WR_REG(0XDA00);
 80031a0:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80031a4:	f7fe fc16 	bl	80019d4 <LCD_WR_REG>
					LCD_RD_DATA();   		//读回0X00	 
 80031a8:	f7fe fc5c 	bl	8001a64 <LCD_RD_DATA>
					LCD_WR_REG(0XDB00);
 80031ac:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80031b0:	f7fe fc10 	bl	80019d4 <LCD_WR_REG>
					lcddev.id = LCD_RD_DATA();   		//读回0X80
 80031b4:	f7fe fc56 	bl	8001a64 <LCD_RD_DATA>
 80031b8:	4603      	mov	r3, r0
 80031ba:	461a      	mov	r2, r3
 80031bc:	4b2d      	ldr	r3, [pc, #180]	; (8003274 <LCD_Init+0x254>)
 80031be:	809a      	strh	r2, [r3, #4]
					lcddev.id <<= 8;
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <LCD_Init+0x254>)
 80031c2:	889b      	ldrh	r3, [r3, #4]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	4b2a      	ldr	r3, [pc, #168]	; (8003274 <LCD_Init+0x254>)
 80031ca:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80031cc:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80031d0:	f7fe fc00 	bl	80019d4 <LCD_WR_REG>
					lcddev.id |= LCD_RD_DATA();   		//读回0X00
 80031d4:	f7fe fc46 	bl	8001a64 <LCD_RD_DATA>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	4b25      	ldr	r3, [pc, #148]	; (8003274 <LCD_Init+0x254>)
 80031de:	889b      	ldrh	r3, [r3, #4]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	4b23      	ldr	r3, [pc, #140]	; (8003274 <LCD_Init+0x254>)
 80031e6:	809a      	strh	r2, [r3, #4]
					if (lcddev.id == 0x8000)
 80031e8:	4b22      	ldr	r3, [pc, #136]	; (8003274 <LCD_Init+0x254>)
 80031ea:	889b      	ldrh	r3, [r3, #4]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	d103      	bne.n	80031fa <LCD_Init+0x1da>
						lcddev.id = 0x5510;   		//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80031f2:	4b20      	ldr	r3, [pc, #128]	; (8003274 <LCD_Init+0x254>)
 80031f4:	f245 5210 	movw	r2, #21776	; 0x5510
 80031f8:	809a      	strh	r2, [r3, #4]
					if (lcddev.id != 0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80031fa:	4b1e      	ldr	r3, [pc, #120]	; (8003274 <LCD_Init+0x254>)
 80031fc:	889b      	ldrh	r3, [r3, #4]
 80031fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8003202:	4293      	cmp	r3, r2
 8003204:	d028      	beq.n	8003258 <LCD_Init+0x238>
							{
						LCD_WR_REG(0XA1);
 8003206:	20a1      	movs	r0, #161	; 0xa1
 8003208:	f7fe fbe4 	bl	80019d4 <LCD_WR_REG>
						lcddev.id = LCD_RD_DATA();
 800320c:	f7fe fc2a 	bl	8001a64 <LCD_RD_DATA>
 8003210:	4603      	mov	r3, r0
 8003212:	461a      	mov	r2, r3
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <LCD_Init+0x254>)
 8003216:	809a      	strh	r2, [r3, #4]
						lcddev.id = LCD_RD_DATA();	//读回0X57
 8003218:	f7fe fc24 	bl	8001a64 <LCD_RD_DATA>
 800321c:	4603      	mov	r3, r0
 800321e:	461a      	mov	r2, r3
 8003220:	4b14      	ldr	r3, [pc, #80]	; (8003274 <LCD_Init+0x254>)
 8003222:	809a      	strh	r2, [r3, #4]
						lcddev.id <<= 8;
 8003224:	4b13      	ldr	r3, [pc, #76]	; (8003274 <LCD_Init+0x254>)
 8003226:	889b      	ldrh	r3, [r3, #4]
 8003228:	021b      	lsls	r3, r3, #8
 800322a:	b29a      	uxth	r2, r3
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <LCD_Init+0x254>)
 800322e:	809a      	strh	r2, [r3, #4]
						lcddev.id |= LCD_RD_DATA();	//读回0X61
 8003230:	f7fe fc18 	bl	8001a64 <LCD_RD_DATA>
 8003234:	4603      	mov	r3, r0
 8003236:	461a      	mov	r2, r3
 8003238:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <LCD_Init+0x254>)
 800323a:	889b      	ldrh	r3, [r3, #4]
 800323c:	4313      	orrs	r3, r2
 800323e:	b29a      	uxth	r2, r3
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <LCD_Init+0x254>)
 8003242:	809a      	strh	r2, [r3, #4]
						if (lcddev.id == 0X5761)
 8003244:	4b0b      	ldr	r3, [pc, #44]	; (8003274 <LCD_Init+0x254>)
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	f245 7261 	movw	r2, #22369	; 0x5761
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <LCD_Init+0x238>
							lcddev.id = 0X1963;	//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8003250:	4b08      	ldr	r3, [pc, #32]	; (8003274 <LCD_Init+0x254>)
 8003252:	f641 1263 	movw	r2, #6499	; 0x1963
 8003256:	809a      	strh	r2, [r3, #4]
				}
			}
		}
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if (lcddev.id == 0X9341)	//9341初始化
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <LCD_Init+0x254>)
 800325a:	889b      	ldrh	r3, [r3, #4]
 800325c:	f249 3241 	movw	r2, #37697	; 0x9341
 8003260:	4293      	cmp	r3, r2
 8003262:	f040 811f 	bne.w	80034a4 <LCD_Init+0x484>
 8003266:	e007      	b.n	8003278 <LCD_Init+0x258>
 8003268:	40021000 	.word	0x40021000
 800326c:	40011000 	.word	0x40011000
 8003270:	40010c00 	.word	0x40010c00
 8003274:	200000bc 	.word	0x200000bc
			{
		LCD_WR_REG(0xCF);
 8003278:	20cf      	movs	r0, #207	; 0xcf
 800327a:	f7fe fbab 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800327e:	2000      	movs	r0, #0
 8003280:	f7fe fbcc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC1);
 8003284:	20c1      	movs	r0, #193	; 0xc1
 8003286:	f7fe fbc9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X30);
 800328a:	2030      	movs	r0, #48	; 0x30
 800328c:	f7fe fbc6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xED);
 8003290:	20ed      	movs	r0, #237	; 0xed
 8003292:	f7fe fb9f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x64);
 8003296:	2064      	movs	r0, #100	; 0x64
 8003298:	f7fe fbc0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800329c:	2003      	movs	r0, #3
 800329e:	f7fe fbbd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X12);
 80032a2:	2012      	movs	r0, #18
 80032a4:	f7fe fbba 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X81);
 80032a8:	2081      	movs	r0, #129	; 0x81
 80032aa:	f7fe fbb7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xE8);
 80032ae:	20e8      	movs	r0, #232	; 0xe8
 80032b0:	f7fe fb90 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x85);
 80032b4:	2085      	movs	r0, #133	; 0x85
 80032b6:	f7fe fbb1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80032ba:	2010      	movs	r0, #16
 80032bc:	f7fe fbae 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 80032c0:	207a      	movs	r0, #122	; 0x7a
 80032c2:	f7fe fbab 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xCB);
 80032c6:	20cb      	movs	r0, #203	; 0xcb
 80032c8:	f7fe fb84 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x39);
 80032cc:	2039      	movs	r0, #57	; 0x39
 80032ce:	f7fe fba5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80032d2:	202c      	movs	r0, #44	; 0x2c
 80032d4:	f7fe fba2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80032d8:	2000      	movs	r0, #0
 80032da:	f7fe fb9f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 80032de:	2034      	movs	r0, #52	; 0x34
 80032e0:	f7fe fb9c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80032e4:	2002      	movs	r0, #2
 80032e6:	f7fe fb99 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xF7);
 80032ea:	20f7      	movs	r0, #247	; 0xf7
 80032ec:	f7fe fb72 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 80032f0:	2020      	movs	r0, #32
 80032f2:	f7fe fb93 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xEA);
 80032f6:	20ea      	movs	r0, #234	; 0xea
 80032f8:	f7fe fb6c 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7fe fb8d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003302:	2000      	movs	r0, #0
 8003304:	f7fe fb8a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xC0);    //Power control 
 8003308:	20c0      	movs	r0, #192	; 0xc0
 800330a:	f7fe fb63 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x1B);   //VRH[5:0] 
 800330e:	201b      	movs	r0, #27
 8003310:	f7fe fb84 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xC1);    //Power control 
 8003314:	20c1      	movs	r0, #193	; 0xc1
 8003316:	f7fe fb5d 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);   //SAP[2:0];BT[3:0] 
 800331a:	2001      	movs	r0, #1
 800331c:	f7fe fb7e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xC5);    //VCM control 
 8003320:	20c5      	movs	r0, #197	; 0xc5
 8003322:	f7fe fb57 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x30); 	 //3F
 8003326:	2030      	movs	r0, #48	; 0x30
 8003328:	f7fe fb78 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x30); 	 //3C
 800332c:	2030      	movs	r0, #48	; 0x30
 800332e:	f7fe fb75 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xC7);    //VCM control2 
 8003332:	20c7      	movs	r0, #199	; 0xc7
 8003334:	f7fe fb4e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0XB7);
 8003338:	20b7      	movs	r0, #183	; 0xb7
 800333a:	f7fe fb6f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x36);    // Memory Access Control 
 800333e:	2036      	movs	r0, #54	; 0x36
 8003340:	f7fe fb48 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x48);
 8003344:	2048      	movs	r0, #72	; 0x48
 8003346:	f7fe fb69 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x3A);
 800334a:	203a      	movs	r0, #58	; 0x3a
 800334c:	f7fe fb42 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);
 8003350:	2055      	movs	r0, #85	; 0x55
 8003352:	f7fe fb63 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xB1);
 8003356:	20b1      	movs	r0, #177	; 0xb1
 8003358:	f7fe fb3c 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800335c:	2000      	movs	r0, #0
 800335e:	f7fe fb5d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1A);
 8003362:	201a      	movs	r0, #26
 8003364:	f7fe fb5a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xB6);    // Display Function Control 
 8003368:	20b6      	movs	r0, #182	; 0xb6
 800336a:	f7fe fb33 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 800336e:	200a      	movs	r0, #10
 8003370:	f7fe fb54 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8003374:	20a2      	movs	r0, #162	; 0xa2
 8003376:	f7fe fb51 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable 
 800337a:	20f2      	movs	r0, #242	; 0xf2
 800337c:	f7fe fb2a 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003380:	2000      	movs	r0, #0
 8003382:	f7fe fb4b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x26);    //Gamma curve selected 
 8003386:	2026      	movs	r0, #38	; 0x26
 8003388:	f7fe fb24 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800338c:	2001      	movs	r0, #1
 800338e:	f7fe fb45 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xE0);    //Set Gamma 
 8003392:	20e0      	movs	r0, #224	; 0xe0
 8003394:	f7fe fb1e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0F);
 8003398:	200f      	movs	r0, #15
 800339a:	f7fe fb3f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 800339e:	202a      	movs	r0, #42	; 0x2a
 80033a0:	f7fe fb3c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x28);
 80033a4:	2028      	movs	r0, #40	; 0x28
 80033a6:	f7fe fb39 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80033aa:	2008      	movs	r0, #8
 80033ac:	f7fe fb36 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0E);
 80033b0:	200e      	movs	r0, #14
 80033b2:	f7fe fb33 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x08);
 80033b6:	2008      	movs	r0, #8
 80033b8:	f7fe fb30 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 80033bc:	2054      	movs	r0, #84	; 0x54
 80033be:	f7fe fb2d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XA9);
 80033c2:	20a9      	movs	r0, #169	; 0xa9
 80033c4:	f7fe fb2a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 80033c8:	2043      	movs	r0, #67	; 0x43
 80033ca:	f7fe fb27 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0A);
 80033ce:	200a      	movs	r0, #10
 80033d0:	f7fe fb24 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 80033d4:	200f      	movs	r0, #15
 80033d6:	f7fe fb21 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033da:	2000      	movs	r0, #0
 80033dc:	f7fe fb1e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7fe fb1b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033e6:	2000      	movs	r0, #0
 80033e8:	f7fe fb18 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80033ec:	2000      	movs	r0, #0
 80033ee:	f7fe fb15 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0XE1);    //Set Gamma 
 80033f2:	20e1      	movs	r0, #225	; 0xe1
 80033f4:	f7fe faee 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80033f8:	2000      	movs	r0, #0
 80033fa:	f7fe fb0f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x15);
 80033fe:	2015      	movs	r0, #21
 8003400:	f7fe fb0c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8003404:	2017      	movs	r0, #23
 8003406:	f7fe fb09 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x07);
 800340a:	2007      	movs	r0, #7
 800340c:	f7fe fb06 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 8003410:	2011      	movs	r0, #17
 8003412:	f7fe fb03 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x06);
 8003416:	2006      	movs	r0, #6
 8003418:	f7fe fb00 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2B);
 800341c:	202b      	movs	r0, #43	; 0x2b
 800341e:	f7fe fafd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 8003422:	2056      	movs	r0, #86	; 0x56
 8003424:	f7fe fafa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003428:	203c      	movs	r0, #60	; 0x3c
 800342a:	f7fe faf7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 800342e:	2005      	movs	r0, #5
 8003430:	f7fe faf4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 8003434:	2010      	movs	r0, #16
 8003436:	f7fe faf1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800343a:	200f      	movs	r0, #15
 800343c:	f7fe faee 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003440:	203f      	movs	r0, #63	; 0x3f
 8003442:	f7fe faeb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003446:	203f      	movs	r0, #63	; 0x3f
 8003448:	f7fe fae8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0F);
 800344c:	200f      	movs	r0, #15
 800344e:	f7fe fae5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x2B);
 8003452:	202b      	movs	r0, #43	; 0x2b
 8003454:	f7fe fabe 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003458:	2000      	movs	r0, #0
 800345a:	f7fe fadf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800345e:	2000      	movs	r0, #0
 8003460:	f7fe fadc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003464:	2001      	movs	r0, #1
 8003466:	f7fe fad9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3f);
 800346a:	203f      	movs	r0, #63	; 0x3f
 800346c:	f7fe fad6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x2A);
 8003470:	202a      	movs	r0, #42	; 0x2a
 8003472:	f7fe faaf 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003476:	2000      	movs	r0, #0
 8003478:	f7fe fad0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800347c:	2000      	movs	r0, #0
 800347e:	f7fe facd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003482:	2000      	movs	r0, #0
 8003484:	f7fe faca 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xef);
 8003488:	20ef      	movs	r0, #239	; 0xef
 800348a:	f7fe fac7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x11); //Exit Sleep
 800348e:	2011      	movs	r0, #17
 8003490:	f7fe faa0 	bl	80019d4 <LCD_WR_REG>
		HAL_Delay(120);
 8003494:	2078      	movs	r0, #120	; 0x78
 8003496:	f7fd fb17 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29); //display on	
 800349a:	2029      	movs	r0, #41	; 0x29
 800349c:	f7fe fa9a 	bl	80019d4 <LCD_WR_REG>
 80034a0:	f003 bcd8 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x6804) //6804初始化
 80034a4:	4b58      	ldr	r3, [pc, #352]	; (8003608 <LCD_Init+0x5e8>)
 80034a6:	889b      	ldrh	r3, [r3, #4]
 80034a8:	f646 0204 	movw	r2, #26628	; 0x6804
 80034ac:	4293      	cmp	r3, r2
 80034ae:	f040 80ad 	bne.w	800360c <LCD_Init+0x5ec>
			{
		LCD_WR_REG(0X11);
 80034b2:	2011      	movs	r0, #17
 80034b4:	f7fe fa8e 	bl	80019d4 <LCD_WR_REG>
		HAL_Delay(20);
 80034b8:	2014      	movs	r0, #20
 80034ba:	f7fd fb05 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0XD0); //VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80034be:	20d0      	movs	r0, #208	; 0xd0
 80034c0:	f7fe fa88 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X07);
 80034c4:	2007      	movs	r0, #7
 80034c6:	f7fe faa9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X42);
 80034ca:	2042      	movs	r0, #66	; 0x42
 80034cc:	f7fe faa6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1D);
 80034d0:	201d      	movs	r0, #29
 80034d2:	f7fe faa3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0XD1); //VCOMH VCOM_AC amplitude setting
 80034d6:	20d1      	movs	r0, #209	; 0xd1
 80034d8:	f7fe fa7c 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80034dc:	2000      	movs	r0, #0
 80034de:	f7fe fa9d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X1a);
 80034e2:	201a      	movs	r0, #26
 80034e4:	f7fe fa9a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X09);
 80034e8:	2009      	movs	r0, #9
 80034ea:	f7fe fa97 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0XD2); //Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 80034ee:	20d2      	movs	r0, #210	; 0xd2
 80034f0:	f7fe fa70 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 80034f4:	2001      	movs	r0, #1
 80034f6:	f7fe fa91 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X22);
 80034fa:	2022      	movs	r0, #34	; 0x22
 80034fc:	f7fe fa8e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0XC0); //REV SM GS
 8003500:	20c0      	movs	r0, #192	; 0xc0
 8003502:	f7fe fa67 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X10);
 8003506:	2010      	movs	r0, #16
 8003508:	f7fe fa88 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3B);
 800350c:	203b      	movs	r0, #59	; 0x3b
 800350e:	f7fe fa85 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003512:	2000      	movs	r0, #0
 8003514:	f7fe fa82 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003518:	2002      	movs	r0, #2
 800351a:	f7fe fa7f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X11);
 800351e:	2011      	movs	r0, #17
 8003520:	f7fe fa7c 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0XC5); // Frame rate setting = 72HZ  when setting 0x03
 8003524:	20c5      	movs	r0, #197	; 0xc5
 8003526:	f7fe fa55 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X03);
 800352a:	2003      	movs	r0, #3
 800352c:	f7fe fa76 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0XC8); //Gamma setting
 8003530:	20c8      	movs	r0, #200	; 0xc8
 8003532:	f7fe fa4f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003536:	2000      	movs	r0, #0
 8003538:	f7fe fa70 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 800353c:	2025      	movs	r0, #37	; 0x25
 800353e:	f7fe fa6d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X21);
 8003542:	2021      	movs	r0, #33	; 0x21
 8003544:	f7fe fa6a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X05);
 8003548:	2005      	movs	r0, #5
 800354a:	f7fe fa67 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 800354e:	2000      	movs	r0, #0
 8003550:	f7fe fa64 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0a);
 8003554:	200a      	movs	r0, #10
 8003556:	f7fe fa61 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X65);
 800355a:	2065      	movs	r0, #101	; 0x65
 800355c:	f7fe fa5e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X25);
 8003560:	2025      	movs	r0, #37	; 0x25
 8003562:	f7fe fa5b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X77);
 8003566:	2077      	movs	r0, #119	; 0x77
 8003568:	f7fe fa58 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X50);
 800356c:	2050      	movs	r0, #80	; 0x50
 800356e:	f7fe fa55 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X0f);
 8003572:	200f      	movs	r0, #15
 8003574:	f7fe fa52 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 8003578:	2000      	movs	r0, #0
 800357a:	f7fe fa4f 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0XF8);
 800357e:	20f8      	movs	r0, #248	; 0xf8
 8003580:	f7fe fa28 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X01);
 8003584:	2001      	movs	r0, #1
 8003586:	f7fe fa49 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0XFE);
 800358a:	20fe      	movs	r0, #254	; 0xfe
 800358c:	f7fe fa22 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 8003590:	2000      	movs	r0, #0
 8003592:	f7fe fa43 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X02);
 8003596:	2002      	movs	r0, #2
 8003598:	f7fe fa40 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0X20); //Exit invert mode
 800359c:	2020      	movs	r0, #32
 800359e:	f7fe fa19 	bl	80019d4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80035a2:	2036      	movs	r0, #54	; 0x36
 80035a4:	f7fe fa16 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X08); //原来是a
 80035a8:	2008      	movs	r0, #8
 80035aa:	f7fe fa37 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0X3A);
 80035ae:	203a      	movs	r0, #58	; 0x3a
 80035b0:	f7fe fa10 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X55); //16位模式
 80035b4:	2055      	movs	r0, #85	; 0x55
 80035b6:	f7fe fa31 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0X2B);
 80035ba:	202b      	movs	r0, #43	; 0x2b
 80035bc:	f7fe fa0a 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80035c0:	2000      	movs	r0, #0
 80035c2:	f7fe fa2b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80035c6:	2000      	movs	r0, #0
 80035c8:	f7fe fa28 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80035cc:	2001      	movs	r0, #1
 80035ce:	f7fe fa25 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X3F);
 80035d2:	203f      	movs	r0, #63	; 0x3f
 80035d4:	f7fe fa22 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0X2A);
 80035d8:	202a      	movs	r0, #42	; 0x2a
 80035da:	f7fe f9fb 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0X00);
 80035de:	2000      	movs	r0, #0
 80035e0:	f7fe fa1c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X00);
 80035e4:	2000      	movs	r0, #0
 80035e6:	f7fe fa19 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0X01);
 80035ea:	2001      	movs	r0, #1
 80035ec:	f7fe fa16 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0XDF);
 80035f0:	20df      	movs	r0, #223	; 0xdf
 80035f2:	f7fe fa13 	bl	8001a1c <LCD_WR_DATAX>
		HAL_Delay(120);
 80035f6:	2078      	movs	r0, #120	; 0x78
 80035f8:	f7fd fa66 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0X29);
 80035fc:	2029      	movs	r0, #41	; 0x29
 80035fe:	f7fe f9e9 	bl	80019d4 <LCD_WR_REG>
 8003602:	f003 bc27 	b.w	8006e54 <LCD_Init+0x3e34>
 8003606:	bf00      	nop
 8003608:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x5310) {
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <LCD_Init+0x5fc>)
 800360e:	889b      	ldrh	r3, [r3, #4]
 8003610:	f245 3210 	movw	r2, #21264	; 0x5310
 8003614:	4293      	cmp	r3, r2
 8003616:	f040 877c 	bne.w	8004512 <LCD_Init+0x14f2>
 800361a:	e001      	b.n	8003620 <LCD_Init+0x600>
 800361c:	200000bc 	.word	0x200000bc
		LCD_WR_REG(0xED);
 8003620:	20ed      	movs	r0, #237	; 0xed
 8003622:	f7fe f9d7 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003626:	2001      	movs	r0, #1
 8003628:	f7fe f9f8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFE);
 800362c:	20fe      	movs	r0, #254	; 0xfe
 800362e:	f7fe f9f5 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xEE);
 8003632:	20ee      	movs	r0, #238	; 0xee
 8003634:	f7fe f9ce 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0xDE);
 8003638:	20de      	movs	r0, #222	; 0xde
 800363a:	f7fe f9ef 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 800363e:	2021      	movs	r0, #33	; 0x21
 8003640:	f7fe f9ec 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xF1);
 8003644:	20f1      	movs	r0, #241	; 0xf1
 8003646:	f7fe f9c5 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 800364a:	2001      	movs	r0, #1
 800364c:	f7fe f9e6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xDF);
 8003650:	20df      	movs	r0, #223	; 0xdf
 8003652:	f7fe f9bf 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x10);
 8003656:	2010      	movs	r0, #16
 8003658:	f7fe f9e0 	bl	8001a1c <LCD_WR_DATAX>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800365c:	20c4      	movs	r0, #196	; 0xc4
 800365e:	f7fe f9b9 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8F);	  //5f
 8003662:	208f      	movs	r0, #143	; 0x8f
 8003664:	f7fe f9da 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8003668:	20c6      	movs	r0, #198	; 0xc6
 800366a:	f7fe f9b3 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800366e:	2000      	movs	r0, #0
 8003670:	f7fe f9d4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003674:	20e2      	movs	r0, #226	; 0xe2
 8003676:	f7fe f9d1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 800367a:	20e2      	movs	r0, #226	; 0xe2
 800367c:	f7fe f9ce 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE2);
 8003680:	20e2      	movs	r0, #226	; 0xe2
 8003682:	f7fe f9cb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xBF);
 8003686:	20bf      	movs	r0, #191	; 0xbf
 8003688:	f7fe f9a4 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 800368c:	20aa      	movs	r0, #170	; 0xaa
 800368e:	f7fe f9c5 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB0);
 8003692:	20b0      	movs	r0, #176	; 0xb0
 8003694:	f7fe f99e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0D);
 8003698:	200d      	movs	r0, #13
 800369a:	f7fe f9bf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800369e:	2000      	movs	r0, #0
 80036a0:	f7fe f9bc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0D);
 80036a4:	200d      	movs	r0, #13
 80036a6:	f7fe f9b9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036aa:	2000      	movs	r0, #0
 80036ac:	f7fe f9b6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x11);
 80036b0:	2011      	movs	r0, #17
 80036b2:	f7fe f9b3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036b6:	2000      	movs	r0, #0
 80036b8:	f7fe f9b0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x19);
 80036bc:	2019      	movs	r0, #25
 80036be:	f7fe f9ad 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036c2:	2000      	movs	r0, #0
 80036c4:	f7fe f9aa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 80036c8:	2021      	movs	r0, #33	; 0x21
 80036ca:	f7fe f9a7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036ce:	2000      	movs	r0, #0
 80036d0:	f7fe f9a4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2D);
 80036d4:	202d      	movs	r0, #45	; 0x2d
 80036d6:	f7fe f9a1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036da:	2000      	movs	r0, #0
 80036dc:	f7fe f99e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3D);
 80036e0:	203d      	movs	r0, #61	; 0x3d
 80036e2:	f7fe f99b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036e6:	2000      	movs	r0, #0
 80036e8:	f7fe f998 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80036ec:	205d      	movs	r0, #93	; 0x5d
 80036ee:	f7fe f995 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036f2:	2000      	movs	r0, #0
 80036f4:	f7fe f992 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80036f8:	205d      	movs	r0, #93	; 0x5d
 80036fa:	f7fe f98f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80036fe:	2000      	movs	r0, #0
 8003700:	f7fe f98c 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB1);
 8003704:	20b1      	movs	r0, #177	; 0xb1
 8003706:	f7fe f965 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x80);
 800370a:	2080      	movs	r0, #128	; 0x80
 800370c:	f7fe f986 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003710:	2000      	movs	r0, #0
 8003712:	f7fe f983 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003716:	208b      	movs	r0, #139	; 0x8b
 8003718:	f7fe f980 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800371c:	2000      	movs	r0, #0
 800371e:	f7fe f97d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003722:	2096      	movs	r0, #150	; 0x96
 8003724:	f7fe f97a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003728:	2000      	movs	r0, #0
 800372a:	f7fe f977 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB2);
 800372e:	20b2      	movs	r0, #178	; 0xb2
 8003730:	f7fe f950 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003734:	2000      	movs	r0, #0
 8003736:	f7fe f971 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800373a:	2000      	movs	r0, #0
 800373c:	f7fe f96e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003740:	2002      	movs	r0, #2
 8003742:	f7fe f96b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003746:	2000      	movs	r0, #0
 8003748:	f7fe f968 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800374c:	2003      	movs	r0, #3
 800374e:	f7fe f965 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003752:	2000      	movs	r0, #0
 8003754:	f7fe f962 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB3);
 8003758:	20b3      	movs	r0, #179	; 0xb3
 800375a:	f7fe f93b 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800375e:	2000      	movs	r0, #0
 8003760:	f7fe f95c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003764:	2000      	movs	r0, #0
 8003766:	f7fe f959 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800376a:	2000      	movs	r0, #0
 800376c:	f7fe f956 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003770:	2000      	movs	r0, #0
 8003772:	f7fe f953 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003776:	2000      	movs	r0, #0
 8003778:	f7fe f950 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800377c:	2000      	movs	r0, #0
 800377e:	f7fe f94d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003782:	2000      	movs	r0, #0
 8003784:	f7fe f94a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003788:	2000      	movs	r0, #0
 800378a:	f7fe f947 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800378e:	2000      	movs	r0, #0
 8003790:	f7fe f944 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003794:	2000      	movs	r0, #0
 8003796:	f7fe f941 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800379a:	2000      	movs	r0, #0
 800379c:	f7fe f93e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037a0:	2000      	movs	r0, #0
 80037a2:	f7fe f93b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037a6:	2000      	movs	r0, #0
 80037a8:	f7fe f938 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037ac:	2000      	movs	r0, #0
 80037ae:	f7fe f935 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7fe f932 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f7fe f92f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037be:	2000      	movs	r0, #0
 80037c0:	f7fe f92c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037c4:	2000      	movs	r0, #0
 80037c6:	f7fe f929 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037ca:	2000      	movs	r0, #0
 80037cc:	f7fe f926 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037d0:	2000      	movs	r0, #0
 80037d2:	f7fe f923 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037d6:	2000      	movs	r0, #0
 80037d8:	f7fe f920 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fe f91d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037e2:	2000      	movs	r0, #0
 80037e4:	f7fe f91a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037e8:	2000      	movs	r0, #0
 80037ea:	f7fe f917 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB4);
 80037ee:	20b4      	movs	r0, #180	; 0xb4
 80037f0:	f7fe f8f0 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x8B);
 80037f4:	208b      	movs	r0, #139	; 0x8b
 80037f6:	f7fe f911 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80037fa:	2000      	movs	r0, #0
 80037fc:	f7fe f90e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x96);
 8003800:	2096      	movs	r0, #150	; 0x96
 8003802:	f7fe f90b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003806:	2000      	movs	r0, #0
 8003808:	f7fe f908 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA1);
 800380c:	20a1      	movs	r0, #161	; 0xa1
 800380e:	f7fe f905 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003812:	2000      	movs	r0, #0
 8003814:	f7fe f902 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB5);
 8003818:	20b5      	movs	r0, #181	; 0xb5
 800381a:	f7fe f8db 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x02);
 800381e:	2002      	movs	r0, #2
 8003820:	f7fe f8fc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003824:	2000      	movs	r0, #0
 8003826:	f7fe f8f9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x03);
 800382a:	2003      	movs	r0, #3
 800382c:	f7fe f8f6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fe f8f3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 8003836:	2004      	movs	r0, #4
 8003838:	f7fe f8f0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800383c:	2000      	movs	r0, #0
 800383e:	f7fe f8ed 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB6);
 8003842:	20b6      	movs	r0, #182	; 0xb6
 8003844:	f7fe f8c6 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003848:	2000      	movs	r0, #0
 800384a:	f7fe f8e7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800384e:	2000      	movs	r0, #0
 8003850:	f7fe f8e4 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB7);
 8003854:	20b7      	movs	r0, #183	; 0xb7
 8003856:	f7fe f8bd 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 800385a:	2000      	movs	r0, #0
 800385c:	f7fe f8de 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003860:	2000      	movs	r0, #0
 8003862:	f7fe f8db 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3F);
 8003866:	203f      	movs	r0, #63	; 0x3f
 8003868:	f7fe f8d8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800386c:	2000      	movs	r0, #0
 800386e:	f7fe f8d5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5E);
 8003872:	205e      	movs	r0, #94	; 0x5e
 8003874:	f7fe f8d2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003878:	2000      	movs	r0, #0
 800387a:	f7fe f8cf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 800387e:	2064      	movs	r0, #100	; 0x64
 8003880:	f7fe f8cc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003884:	2000      	movs	r0, #0
 8003886:	f7fe f8c9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8C);
 800388a:	208c      	movs	r0, #140	; 0x8c
 800388c:	f7fe f8c6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003890:	2000      	movs	r0, #0
 8003892:	f7fe f8c3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAC);
 8003896:	20ac      	movs	r0, #172	; 0xac
 8003898:	f7fe f8c0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800389c:	2000      	movs	r0, #0
 800389e:	f7fe f8bd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80038a2:	20dc      	movs	r0, #220	; 0xdc
 80038a4:	f7fe f8ba 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7fe f8b7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x70);
 80038ae:	2070      	movs	r0, #112	; 0x70
 80038b0:	f7fe f8b4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038b4:	2000      	movs	r0, #0
 80038b6:	f7fe f8b1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x90);
 80038ba:	2090      	movs	r0, #144	; 0x90
 80038bc:	f7fe f8ae 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038c0:	2000      	movs	r0, #0
 80038c2:	f7fe f8ab 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xEB);
 80038c6:	20eb      	movs	r0, #235	; 0xeb
 80038c8:	f7fe f8a8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038cc:	2000      	movs	r0, #0
 80038ce:	f7fe f8a5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 80038d2:	20dc      	movs	r0, #220	; 0xdc
 80038d4:	f7fe f8a2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038d8:	2000      	movs	r0, #0
 80038da:	f7fe f89f 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xB8);
 80038de:	20b8      	movs	r0, #184	; 0xb8
 80038e0:	f7fe f878 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7fe f899 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038ea:	2000      	movs	r0, #0
 80038ec:	f7fe f896 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f0:	2000      	movs	r0, #0
 80038f2:	f7fe f893 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038f6:	2000      	movs	r0, #0
 80038f8:	f7fe f890 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80038fc:	2000      	movs	r0, #0
 80038fe:	f7fe f88d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003902:	2000      	movs	r0, #0
 8003904:	f7fe f88a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003908:	2000      	movs	r0, #0
 800390a:	f7fe f887 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800390e:	2000      	movs	r0, #0
 8003910:	f7fe f884 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xBA);
 8003914:	20ba      	movs	r0, #186	; 0xba
 8003916:	f7fe f85d 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x24);
 800391a:	2024      	movs	r0, #36	; 0x24
 800391c:	f7fe f87e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003920:	2000      	movs	r0, #0
 8003922:	f7fe f87b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003926:	2000      	movs	r0, #0
 8003928:	f7fe f878 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800392c:	2000      	movs	r0, #0
 800392e:	f7fe f875 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC1);
 8003932:	20c1      	movs	r0, #193	; 0xc1
 8003934:	f7fe f84e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003938:	2020      	movs	r0, #32
 800393a:	f7fe f86f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800393e:	2000      	movs	r0, #0
 8003940:	f7fe f86c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x54);
 8003944:	2054      	movs	r0, #84	; 0x54
 8003946:	f7fe f869 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800394a:	2000      	movs	r0, #0
 800394c:	f7fe f866 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xFF);
 8003950:	20ff      	movs	r0, #255	; 0xff
 8003952:	f7fe f863 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003956:	2000      	movs	r0, #0
 8003958:	f7fe f860 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC2);
 800395c:	20c2      	movs	r0, #194	; 0xc2
 800395e:	f7fe f839 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x0A);
 8003962:	200a      	movs	r0, #10
 8003964:	f7fe f85a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003968:	2000      	movs	r0, #0
 800396a:	f7fe f857 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x04);
 800396e:	2004      	movs	r0, #4
 8003970:	f7fe f854 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003974:	2000      	movs	r0, #0
 8003976:	f7fe f851 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC3);
 800397a:	20c3      	movs	r0, #195	; 0xc3
 800397c:	f7fe f82a 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x3C);
 8003980:	203c      	movs	r0, #60	; 0x3c
 8003982:	f7fe f84b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003986:	2000      	movs	r0, #0
 8003988:	f7fe f848 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3A);
 800398c:	203a      	movs	r0, #58	; 0x3a
 800398e:	f7fe f845 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003992:	2000      	movs	r0, #0
 8003994:	f7fe f842 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x39);
 8003998:	2039      	movs	r0, #57	; 0x39
 800399a:	f7fe f83f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800399e:	2000      	movs	r0, #0
 80039a0:	f7fe f83c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x37);
 80039a4:	2037      	movs	r0, #55	; 0x37
 80039a6:	f7fe f839 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039aa:	2000      	movs	r0, #0
 80039ac:	f7fe f836 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80039b0:	203c      	movs	r0, #60	; 0x3c
 80039b2:	f7fe f833 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039b6:	2000      	movs	r0, #0
 80039b8:	f7fe f830 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 80039bc:	2036      	movs	r0, #54	; 0x36
 80039be:	f7fe f82d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7fe f82a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 80039c8:	2032      	movs	r0, #50	; 0x32
 80039ca:	f7fe f827 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039ce:	2000      	movs	r0, #0
 80039d0:	f7fe f824 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 80039d4:	202f      	movs	r0, #47	; 0x2f
 80039d6:	f7fe f821 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039da:	2000      	movs	r0, #0
 80039dc:	f7fe f81e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 80039e0:	202c      	movs	r0, #44	; 0x2c
 80039e2:	f7fe f81b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039e6:	2000      	movs	r0, #0
 80039e8:	f7fe f818 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80039ec:	2029      	movs	r0, #41	; 0x29
 80039ee:	f7fe f815 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039f2:	2000      	movs	r0, #0
 80039f4:	f7fe f812 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 80039f8:	2026      	movs	r0, #38	; 0x26
 80039fa:	f7fe f80f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80039fe:	2000      	movs	r0, #0
 8003a00:	f7fe f80c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003a04:	2024      	movs	r0, #36	; 0x24
 8003a06:	f7fe f809 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fe f806 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003a10:	2024      	movs	r0, #36	; 0x24
 8003a12:	f7fe f803 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a16:	2000      	movs	r0, #0
 8003a18:	f7fe f800 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003a1c:	2023      	movs	r0, #35	; 0x23
 8003a1e:	f7fd fffd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a22:	2000      	movs	r0, #0
 8003a24:	f7fd fffa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003a28:	203c      	movs	r0, #60	; 0x3c
 8003a2a:	f7fd fff7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fd fff4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003a34:	2036      	movs	r0, #54	; 0x36
 8003a36:	f7fd fff1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	f7fd ffee 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x32);
 8003a40:	2032      	movs	r0, #50	; 0x32
 8003a42:	f7fd ffeb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a46:	2000      	movs	r0, #0
 8003a48:	f7fd ffe8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2F);
 8003a4c:	202f      	movs	r0, #47	; 0x2f
 8003a4e:	f7fd ffe5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a52:	2000      	movs	r0, #0
 8003a54:	f7fd ffe2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2C);
 8003a58:	202c      	movs	r0, #44	; 0x2c
 8003a5a:	f7fd ffdf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f7fd ffdc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 8003a64:	2029      	movs	r0, #41	; 0x29
 8003a66:	f7fd ffd9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a6a:	2000      	movs	r0, #0
 8003a6c:	f7fd ffd6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x26);
 8003a70:	2026      	movs	r0, #38	; 0x26
 8003a72:	f7fd ffd3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a76:	2000      	movs	r0, #0
 8003a78:	f7fd ffd0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003a7c:	2024      	movs	r0, #36	; 0x24
 8003a7e:	f7fd ffcd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a82:	2000      	movs	r0, #0
 8003a84:	f7fd ffca 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x24);
 8003a88:	2024      	movs	r0, #36	; 0x24
 8003a8a:	f7fd ffc7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a8e:	2000      	movs	r0, #0
 8003a90:	f7fd ffc4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 8003a94:	2023      	movs	r0, #35	; 0x23
 8003a96:	f7fd ffc1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	f7fd ffbe 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC4);
 8003aa0:	20c4      	movs	r0, #196	; 0xc4
 8003aa2:	f7fd ff97 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x62);
 8003aa6:	2062      	movs	r0, #98	; 0x62
 8003aa8:	f7fd ffb8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003aac:	2000      	movs	r0, #0
 8003aae:	f7fd ffb5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x05);
 8003ab2:	2005      	movs	r0, #5
 8003ab4:	f7fd ffb2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f7fd ffaf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 8003abe:	2084      	movs	r0, #132	; 0x84
 8003ac0:	f7fd ffac 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ac4:	2000      	movs	r0, #0
 8003ac6:	f7fd ffa9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF0);
 8003aca:	20f0      	movs	r0, #240	; 0xf0
 8003acc:	f7fd ffa6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fd ffa3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8003ad6:	2018      	movs	r0, #24
 8003ad8:	f7fd ffa0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7fd ff9d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA4);
 8003ae2:	20a4      	movs	r0, #164	; 0xa4
 8003ae4:	f7fd ff9a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7fd ff97 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x18);
 8003aee:	2018      	movs	r0, #24
 8003af0:	f7fd ff94 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f7fd ff91 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003afa:	2050      	movs	r0, #80	; 0x50
 8003afc:	f7fd ff8e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f7fd ff8b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0C);
 8003b06:	200c      	movs	r0, #12
 8003b08:	f7fd ff88 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b0c:	2000      	movs	r0, #0
 8003b0e:	f7fd ff85 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8003b12:	2017      	movs	r0, #23
 8003b14:	f7fd ff82 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b18:	2000      	movs	r0, #0
 8003b1a:	f7fd ff7f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x95);
 8003b1e:	2095      	movs	r0, #149	; 0x95
 8003b20:	f7fd ff7c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7fd ff79 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003b2a:	20f3      	movs	r0, #243	; 0xf3
 8003b2c:	f7fd ff76 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b30:	2000      	movs	r0, #0
 8003b32:	f7fd ff73 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE6);
 8003b36:	20e6      	movs	r0, #230	; 0xe6
 8003b38:	f7fd ff70 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7fd ff6d 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC5);
 8003b42:	20c5      	movs	r0, #197	; 0xc5
 8003b44:	f7fd ff46 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8003b48:	2032      	movs	r0, #50	; 0x32
 8003b4a:	f7fd ff67 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b4e:	2000      	movs	r0, #0
 8003b50:	f7fd ff64 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003b54:	2044      	movs	r0, #68	; 0x44
 8003b56:	f7fd ff61 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b5a:	2000      	movs	r0, #0
 8003b5c:	f7fd ff5e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x65);
 8003b60:	2065      	movs	r0, #101	; 0x65
 8003b62:	f7fd ff5b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b66:	2000      	movs	r0, #0
 8003b68:	f7fd ff58 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8003b6c:	2076      	movs	r0, #118	; 0x76
 8003b6e:	f7fd ff55 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b72:	2000      	movs	r0, #0
 8003b74:	f7fd ff52 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003b78:	2088      	movs	r0, #136	; 0x88
 8003b7a:	f7fd ff4f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b7e:	2000      	movs	r0, #0
 8003b80:	f7fd ff4c 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC6);
 8003b84:	20c6      	movs	r0, #198	; 0xc6
 8003b86:	f7fd ff25 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x20);
 8003b8a:	2020      	movs	r0, #32
 8003b8c:	f7fd ff46 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b90:	2000      	movs	r0, #0
 8003b92:	f7fd ff43 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x17);
 8003b96:	2017      	movs	r0, #23
 8003b98:	f7fd ff40 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	f7fd ff3d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	f7fd ff3a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7fd ff37 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC7);
 8003bae:	20c7      	movs	r0, #199	; 0xc7
 8003bb0:	f7fd ff10 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003bb4:	2000      	movs	r0, #0
 8003bb6:	f7fd ff31 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7fd ff2e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd ff2b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	f7fd ff28 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC8);
 8003bcc:	20c8      	movs	r0, #200	; 0xc8
 8003bce:	f7fd ff01 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fd ff22 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bd8:	2000      	movs	r0, #0
 8003bda:	f7fd ff1f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fd ff1c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003be4:	2000      	movs	r0, #0
 8003be6:	f7fd ff19 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xC9);
 8003bea:	20c9      	movs	r0, #201	; 0xc9
 8003bec:	f7fd fef2 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7fd ff13 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7fd ff10 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f7fd ff0d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7fd ff0a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fd ff07 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f7fd ff04 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7fd ff01 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c1a:	2000      	movs	r0, #0
 8003c1c:	f7fd fefe 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c20:	2000      	movs	r0, #0
 8003c22:	f7fd fefb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7fd fef8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f7fd fef5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7fd fef2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c38:	2000      	movs	r0, #0
 8003c3a:	f7fd feef 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c3e:	2000      	movs	r0, #0
 8003c40:	f7fd feec 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c44:	2000      	movs	r0, #0
 8003c46:	f7fd fee9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f7fd fee6 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE0);
 8003c50:	20e0      	movs	r0, #224	; 0xe0
 8003c52:	f7fd febf 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8003c56:	2016      	movs	r0, #22
 8003c58:	f7fd fee0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c5c:	2000      	movs	r0, #0
 8003c5e:	f7fd fedd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003c62:	201c      	movs	r0, #28
 8003c64:	f7fd feda 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c68:	2000      	movs	r0, #0
 8003c6a:	f7fd fed7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x21);
 8003c6e:	2021      	movs	r0, #33	; 0x21
 8003c70:	f7fd fed4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c74:	2000      	movs	r0, #0
 8003c76:	f7fd fed1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003c7a:	2036      	movs	r0, #54	; 0x36
 8003c7c:	f7fd fece 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c80:	2000      	movs	r0, #0
 8003c82:	f7fd fecb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x46);
 8003c86:	2046      	movs	r0, #70	; 0x46
 8003c88:	f7fd fec8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c8c:	2000      	movs	r0, #0
 8003c8e:	f7fd fec5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003c92:	2052      	movs	r0, #82	; 0x52
 8003c94:	f7fd fec2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003c98:	2000      	movs	r0, #0
 8003c9a:	f7fd febf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003c9e:	2064      	movs	r0, #100	; 0x64
 8003ca0:	f7fd febc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	f7fd feb9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003caa:	207a      	movs	r0, #122	; 0x7a
 8003cac:	f7fd feb6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	f7fd feb3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003cb6:	208b      	movs	r0, #139	; 0x8b
 8003cb8:	f7fd feb0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	f7fd fead 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003cc2:	2099      	movs	r0, #153	; 0x99
 8003cc4:	f7fd feaa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cc8:	2000      	movs	r0, #0
 8003cca:	f7fd fea7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003cce:	20a8      	movs	r0, #168	; 0xa8
 8003cd0:	f7fd fea4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	f7fd fea1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003cda:	20b9      	movs	r0, #185	; 0xb9
 8003cdc:	f7fd fe9e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	f7fd fe9b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003ce6:	20c4      	movs	r0, #196	; 0xc4
 8003ce8:	f7fd fe98 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cec:	2000      	movs	r0, #0
 8003cee:	f7fd fe95 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003cf2:	20ca      	movs	r0, #202	; 0xca
 8003cf4:	f7fd fe92 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	f7fd fe8f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003cfe:	20d2      	movs	r0, #210	; 0xd2
 8003d00:	f7fd fe8c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d04:	2000      	movs	r0, #0
 8003d06:	f7fd fe89 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD9);
 8003d0a:	20d9      	movs	r0, #217	; 0xd9
 8003d0c:	f7fd fe86 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d10:	2000      	movs	r0, #0
 8003d12:	f7fd fe83 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8003d16:	20e0      	movs	r0, #224	; 0xe0
 8003d18:	f7fd fe80 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d1c:	2000      	movs	r0, #0
 8003d1e:	f7fd fe7d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003d22:	20f3      	movs	r0, #243	; 0xf3
 8003d24:	f7fd fe7a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d28:	2000      	movs	r0, #0
 8003d2a:	f7fd fe77 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE1);
 8003d2e:	20e1      	movs	r0, #225	; 0xe1
 8003d30:	f7fd fe50 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x16);
 8003d34:	2016      	movs	r0, #22
 8003d36:	f7fd fe71 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d3a:	2000      	movs	r0, #0
 8003d3c:	f7fd fe6e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003d40:	201c      	movs	r0, #28
 8003d42:	f7fd fe6b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d46:	2000      	movs	r0, #0
 8003d48:	f7fd fe68 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x22);
 8003d4c:	2022      	movs	r0, #34	; 0x22
 8003d4e:	f7fd fe65 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d52:	2000      	movs	r0, #0
 8003d54:	f7fd fe62 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x36);
 8003d58:	2036      	movs	r0, #54	; 0x36
 8003d5a:	f7fd fe5f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d5e:	2000      	movs	r0, #0
 8003d60:	f7fd fe5c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8003d64:	2045      	movs	r0, #69	; 0x45
 8003d66:	f7fd fe59 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f7fd fe56 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x52);
 8003d70:	2052      	movs	r0, #82	; 0x52
 8003d72:	f7fd fe53 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f7fd fe50 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x64);
 8003d7c:	2064      	movs	r0, #100	; 0x64
 8003d7e:	f7fd fe4d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7fd fe4a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x7A);
 8003d88:	207a      	movs	r0, #122	; 0x7a
 8003d8a:	f7fd fe47 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d8e:	2000      	movs	r0, #0
 8003d90:	f7fd fe44 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x8B);
 8003d94:	208b      	movs	r0, #139	; 0x8b
 8003d96:	f7fd fe41 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7fd fe3e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8003da0:	2099      	movs	r0, #153	; 0x99
 8003da2:	f7fd fe3b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003da6:	2000      	movs	r0, #0
 8003da8:	f7fd fe38 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA8);
 8003dac:	20a8      	movs	r0, #168	; 0xa8
 8003dae:	f7fd fe35 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fd fe32 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB9);
 8003db8:	20b9      	movs	r0, #185	; 0xb9
 8003dba:	f7fd fe2f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7fd fe2c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8003dc4:	20c4      	movs	r0, #196	; 0xc4
 8003dc6:	f7fd fe29 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7fd fe26 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCA);
 8003dd0:	20ca      	movs	r0, #202	; 0xca
 8003dd2:	f7fd fe23 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7fd fe20 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD2);
 8003ddc:	20d2      	movs	r0, #210	; 0xd2
 8003dde:	f7fd fe1d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003de2:	2000      	movs	r0, #0
 8003de4:	f7fd fe1a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD8);
 8003de8:	20d8      	movs	r0, #216	; 0xd8
 8003dea:	f7fd fe17 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dee:	2000      	movs	r0, #0
 8003df0:	f7fd fe14 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xE0);
 8003df4:	20e0      	movs	r0, #224	; 0xe0
 8003df6:	f7fd fe11 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f7fd fe0e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003e00:	20f3      	movs	r0, #243	; 0xf3
 8003e02:	f7fd fe0b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7fd fe08 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE2);
 8003e0c:	20e2      	movs	r0, #226	; 0xe2
 8003e0e:	f7fd fde1 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003e12:	2005      	movs	r0, #5
 8003e14:	f7fd fe02 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7fd fdff 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x0B);
 8003e1e:	200b      	movs	r0, #11
 8003e20:	f7fd fdfc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fd fdf9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1B);
 8003e2a:	201b      	movs	r0, #27
 8003e2c:	f7fd fdf6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fd fdf3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8003e36:	2034      	movs	r0, #52	; 0x34
 8003e38:	f7fd fdf0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7fd fded 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003e42:	2044      	movs	r0, #68	; 0x44
 8003e44:	f7fd fdea 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f7fd fde7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4F);
 8003e4e:	204f      	movs	r0, #79	; 0x4f
 8003e50:	f7fd fde4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e54:	2000      	movs	r0, #0
 8003e56:	f7fd fde1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x61);
 8003e5a:	2061      	movs	r0, #97	; 0x61
 8003e5c:	f7fd fdde 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f7fd fddb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x79);
 8003e66:	2079      	movs	r0, #121	; 0x79
 8003e68:	f7fd fdd8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f7fd fdd5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003e72:	2088      	movs	r0, #136	; 0x88
 8003e74:	f7fd fdd2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e78:	2000      	movs	r0, #0
 8003e7a:	f7fd fdcf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003e7e:	2097      	movs	r0, #151	; 0x97
 8003e80:	f7fd fdcc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fd fdc9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003e8a:	20a6      	movs	r0, #166	; 0xa6
 8003e8c:	f7fd fdc6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e90:	2000      	movs	r0, #0
 8003e92:	f7fd fdc3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003e96:	20b7      	movs	r0, #183	; 0xb7
 8003e98:	f7fd fdc0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003e9c:	2000      	movs	r0, #0
 8003e9e:	f7fd fdbd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003ea2:	20c2      	movs	r0, #194	; 0xc2
 8003ea4:	f7fd fdba 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7fd fdb7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003eae:	20c7      	movs	r0, #199	; 0xc7
 8003eb0:	f7fd fdb4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	f7fd fdb1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003eba:	20d1      	movs	r0, #209	; 0xd1
 8003ebc:	f7fd fdae 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	f7fd fdab 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD6);
 8003ec6:	20d6      	movs	r0, #214	; 0xd6
 8003ec8:	f7fd fda8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ecc:	2000      	movs	r0, #0
 8003ece:	f7fd fda5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003ed2:	20dd      	movs	r0, #221	; 0xdd
 8003ed4:	f7fd fda2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ed8:	2000      	movs	r0, #0
 8003eda:	f7fd fd9f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003ede:	20f3      	movs	r0, #243	; 0xf3
 8003ee0:	f7fd fd9c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7fd fd99 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xE3);
 8003eea:	20e3      	movs	r0, #227	; 0xe3
 8003eec:	f7fd fd72 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x05);
 8003ef0:	2005      	movs	r0, #5
 8003ef2:	f7fd fd93 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	f7fd fd90 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA);
 8003efc:	200a      	movs	r0, #10
 8003efe:	f7fd fd8d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fd fd8a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x1C);
 8003f08:	201c      	movs	r0, #28
 8003f0a:	f7fd fd87 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fd fd84 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 8003f14:	2033      	movs	r0, #51	; 0x33
 8003f16:	f7fd fd81 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f7fd fd7e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 8003f20:	2044      	movs	r0, #68	; 0x44
 8003f22:	f7fd fd7b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f26:	2000      	movs	r0, #0
 8003f28:	f7fd fd78 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8003f2c:	2050      	movs	r0, #80	; 0x50
 8003f2e:	f7fd fd75 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f7fd fd72 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x62);
 8003f38:	2062      	movs	r0, #98	; 0x62
 8003f3a:	f7fd fd6f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7fd fd6c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x78);
 8003f44:	2078      	movs	r0, #120	; 0x78
 8003f46:	f7fd fd69 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	f7fd fd66 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 8003f50:	2088      	movs	r0, #136	; 0x88
 8003f52:	f7fd fd63 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f56:	2000      	movs	r0, #0
 8003f58:	f7fd fd60 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x97);
 8003f5c:	2097      	movs	r0, #151	; 0x97
 8003f5e:	f7fd fd5d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f62:	2000      	movs	r0, #0
 8003f64:	f7fd fd5a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA6);
 8003f68:	20a6      	movs	r0, #166	; 0xa6
 8003f6a:	f7fd fd57 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f6e:	2000      	movs	r0, #0
 8003f70:	f7fd fd54 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB7);
 8003f74:	20b7      	movs	r0, #183	; 0xb7
 8003f76:	f7fd fd51 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f7fd fd4e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC2);
 8003f80:	20c2      	movs	r0, #194	; 0xc2
 8003f82:	f7fd fd4b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f86:	2000      	movs	r0, #0
 8003f88:	f7fd fd48 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC7);
 8003f8c:	20c7      	movs	r0, #199	; 0xc7
 8003f8e:	f7fd fd45 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f92:	2000      	movs	r0, #0
 8003f94:	f7fd fd42 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD1);
 8003f98:	20d1      	movs	r0, #209	; 0xd1
 8003f9a:	f7fd fd3f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	f7fd fd3c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD5);
 8003fa4:	20d5      	movs	r0, #213	; 0xd5
 8003fa6:	f7fd fd39 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003faa:	2000      	movs	r0, #0
 8003fac:	f7fd fd36 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 8003fb0:	20dd      	movs	r0, #221	; 0xdd
 8003fb2:	f7fd fd33 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fb6:	2000      	movs	r0, #0
 8003fb8:	f7fd fd30 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8003fbc:	20f3      	movs	r0, #243	; 0xf3
 8003fbe:	f7fd fd2d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fc2:	2000      	movs	r0, #0
 8003fc4:	f7fd fd2a 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE4);
 8003fc8:	20e4      	movs	r0, #228	; 0xe4
 8003fca:	f7fd fd03 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x01);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f7fd fd24 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fd fd21 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x01);
 8003fda:	2001      	movs	r0, #1
 8003fdc:	f7fd fd1e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	f7fd fd1b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 8003fe6:	2002      	movs	r0, #2
 8003fe8:	f7fd fd18 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003fec:	2000      	movs	r0, #0
 8003fee:	f7fd fd15 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x2A);
 8003ff2:	202a      	movs	r0, #42	; 0x2a
 8003ff4:	f7fd fd12 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fd fd0f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 8003ffe:	203c      	movs	r0, #60	; 0x3c
 8004000:	f7fd fd0c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004004:	2000      	movs	r0, #0
 8004006:	f7fd fd09 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 800400a:	204b      	movs	r0, #75	; 0x4b
 800400c:	f7fd fd06 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004010:	2000      	movs	r0, #0
 8004012:	f7fd fd03 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 8004016:	205d      	movs	r0, #93	; 0x5d
 8004018:	f7fd fd00 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800401c:	2000      	movs	r0, #0
 800401e:	f7fd fcfd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004022:	2074      	movs	r0, #116	; 0x74
 8004024:	f7fd fcfa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004028:	2000      	movs	r0, #0
 800402a:	f7fd fcf7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800402e:	2084      	movs	r0, #132	; 0x84
 8004030:	f7fd fcf4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004034:	2000      	movs	r0, #0
 8004036:	f7fd fcf1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 800403a:	2093      	movs	r0, #147	; 0x93
 800403c:	f7fd fcee 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004040:	2000      	movs	r0, #0
 8004042:	f7fd fceb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004046:	20a2      	movs	r0, #162	; 0xa2
 8004048:	f7fd fce8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800404c:	2000      	movs	r0, #0
 800404e:	f7fd fce5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004052:	20b3      	movs	r0, #179	; 0xb3
 8004054:	f7fd fce2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004058:	2000      	movs	r0, #0
 800405a:	f7fd fcdf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800405e:	20be      	movs	r0, #190	; 0xbe
 8004060:	f7fd fcdc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004064:	2000      	movs	r0, #0
 8004066:	f7fd fcd9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 800406a:	20c4      	movs	r0, #196	; 0xc4
 800406c:	f7fd fcd6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004070:	2000      	movs	r0, #0
 8004072:	f7fd fcd3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004076:	20cd      	movs	r0, #205	; 0xcd
 8004078:	f7fd fcd0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fd fccd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004082:	20d3      	movs	r0, #211	; 0xd3
 8004084:	f7fd fcca 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004088:	2000      	movs	r0, #0
 800408a:	f7fd fcc7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDD);
 800408e:	20dd      	movs	r0, #221	; 0xdd
 8004090:	f7fd fcc4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004094:	2000      	movs	r0, #0
 8004096:	f7fd fcc1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 800409a:	20f3      	movs	r0, #243	; 0xf3
 800409c:	f7fd fcbe 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fd fcbb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0xE5);
 80040a6:	20e5      	movs	r0, #229	; 0xe5
 80040a8:	f7fd fc94 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80040ac:	2000      	movs	r0, #0
 80040ae:	f7fd fcb5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040b2:	2000      	movs	r0, #0
 80040b4:	f7fd fcb2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040b8:	2000      	movs	r0, #0
 80040ba:	f7fd fcaf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040be:	2000      	movs	r0, #0
 80040c0:	f7fd fcac 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x02);
 80040c4:	2002      	movs	r0, #2
 80040c6:	f7fd fca9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040ca:	2000      	movs	r0, #0
 80040cc:	f7fd fca6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80040d0:	2029      	movs	r0, #41	; 0x29
 80040d2:	f7fd fca3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040d6:	2000      	movs	r0, #0
 80040d8:	f7fd fca0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x3C);
 80040dc:	203c      	movs	r0, #60	; 0x3c
 80040de:	f7fd fc9d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040e2:	2000      	movs	r0, #0
 80040e4:	f7fd fc9a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x4B);
 80040e8:	204b      	movs	r0, #75	; 0x4b
 80040ea:	f7fd fc97 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7fd fc94 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x5D);
 80040f4:	205d      	movs	r0, #93	; 0x5d
 80040f6:	f7fd fc91 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80040fa:	2000      	movs	r0, #0
 80040fc:	f7fd fc8e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x74);
 8004100:	2074      	movs	r0, #116	; 0x74
 8004102:	f7fd fc8b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004106:	2000      	movs	r0, #0
 8004108:	f7fd fc88 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x84);
 800410c:	2084      	movs	r0, #132	; 0x84
 800410e:	f7fd fc85 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004112:	2000      	movs	r0, #0
 8004114:	f7fd fc82 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x93);
 8004118:	2093      	movs	r0, #147	; 0x93
 800411a:	f7fd fc7f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800411e:	2000      	movs	r0, #0
 8004120:	f7fd fc7c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xA2);
 8004124:	20a2      	movs	r0, #162	; 0xa2
 8004126:	f7fd fc79 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800412a:	2000      	movs	r0, #0
 800412c:	f7fd fc76 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xB3);
 8004130:	20b3      	movs	r0, #179	; 0xb3
 8004132:	f7fd fc73 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004136:	2000      	movs	r0, #0
 8004138:	f7fd fc70 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBE);
 800413c:	20be      	movs	r0, #190	; 0xbe
 800413e:	f7fd fc6d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004142:	2000      	movs	r0, #0
 8004144:	f7fd fc6a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xC4);
 8004148:	20c4      	movs	r0, #196	; 0xc4
 800414a:	f7fd fc67 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800414e:	2000      	movs	r0, #0
 8004150:	f7fd fc64 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xCD);
 8004154:	20cd      	movs	r0, #205	; 0xcd
 8004156:	f7fd fc61 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800415a:	2000      	movs	r0, #0
 800415c:	f7fd fc5e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xD3);
 8004160:	20d3      	movs	r0, #211	; 0xd3
 8004162:	f7fd fc5b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004166:	2000      	movs	r0, #0
 8004168:	f7fd fc58 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xDC);
 800416c:	20dc      	movs	r0, #220	; 0xdc
 800416e:	f7fd fc55 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004172:	2000      	movs	r0, #0
 8004174:	f7fd fc52 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xF3);
 8004178:	20f3      	movs	r0, #243	; 0xf3
 800417a:	f7fd fc4f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800417e:	2000      	movs	r0, #0
 8004180:	f7fd fc4c 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE6);
 8004184:	20e6      	movs	r0, #230	; 0xe6
 8004186:	f7fd fc25 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x11);
 800418a:	2011      	movs	r0, #17
 800418c:	f7fd fc46 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004190:	2000      	movs	r0, #0
 8004192:	f7fd fc43 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x34);
 8004196:	2034      	movs	r0, #52	; 0x34
 8004198:	f7fd fc40 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800419c:	2000      	movs	r0, #0
 800419e:	f7fd fc3d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80041a2:	2056      	movs	r0, #86	; 0x56
 80041a4:	f7fd fc3a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041a8:	2000      	movs	r0, #0
 80041aa:	f7fd fc37 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 80041ae:	2076      	movs	r0, #118	; 0x76
 80041b0:	f7fd fc34 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041b4:	2000      	movs	r0, #0
 80041b6:	f7fd fc31 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80041ba:	2077      	movs	r0, #119	; 0x77
 80041bc:	f7fd fc2e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041c0:	2000      	movs	r0, #0
 80041c2:	f7fd fc2b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 80041c6:	2066      	movs	r0, #102	; 0x66
 80041c8:	f7fd fc28 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041cc:	2000      	movs	r0, #0
 80041ce:	f7fd fc25 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 80041d2:	2088      	movs	r0, #136	; 0x88
 80041d4:	f7fd fc22 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041d8:	2000      	movs	r0, #0
 80041da:	f7fd fc1f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80041de:	2099      	movs	r0, #153	; 0x99
 80041e0:	f7fd fc1c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041e4:	2000      	movs	r0, #0
 80041e6:	f7fd fc19 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80041ea:	20bb      	movs	r0, #187	; 0xbb
 80041ec:	f7fd fc16 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7fd fc13 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80041f6:	2099      	movs	r0, #153	; 0x99
 80041f8:	f7fd fc10 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80041fc:	2000      	movs	r0, #0
 80041fe:	f7fd fc0d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004202:	2066      	movs	r0, #102	; 0x66
 8004204:	f7fd fc0a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004208:	2000      	movs	r0, #0
 800420a:	f7fd fc07 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800420e:	2055      	movs	r0, #85	; 0x55
 8004210:	f7fd fc04 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004214:	2000      	movs	r0, #0
 8004216:	f7fd fc01 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800421a:	2055      	movs	r0, #85	; 0x55
 800421c:	f7fd fbfe 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004220:	2000      	movs	r0, #0
 8004222:	f7fd fbfb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004226:	2045      	movs	r0, #69	; 0x45
 8004228:	f7fd fbf8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800422c:	2000      	movs	r0, #0
 800422e:	f7fd fbf5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x43);
 8004232:	2043      	movs	r0, #67	; 0x43
 8004234:	f7fd fbf2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004238:	2000      	movs	r0, #0
 800423a:	f7fd fbef 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 800423e:	2044      	movs	r0, #68	; 0x44
 8004240:	f7fd fbec 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004244:	2000      	movs	r0, #0
 8004246:	f7fd fbe9 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE7);
 800424a:	20e7      	movs	r0, #231	; 0xe7
 800424c:	f7fd fbc2 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x32);
 8004250:	2032      	movs	r0, #50	; 0x32
 8004252:	f7fd fbe3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004256:	2000      	movs	r0, #0
 8004258:	f7fd fbe0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800425c:	2055      	movs	r0, #85	; 0x55
 800425e:	f7fd fbdd 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004262:	2000      	movs	r0, #0
 8004264:	f7fd fbda 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x76);
 8004268:	2076      	movs	r0, #118	; 0x76
 800426a:	f7fd fbd7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800426e:	2000      	movs	r0, #0
 8004270:	f7fd fbd4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004274:	2066      	movs	r0, #102	; 0x66
 8004276:	f7fd fbd1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800427a:	2000      	movs	r0, #0
 800427c:	f7fd fbce 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 8004280:	2067      	movs	r0, #103	; 0x67
 8004282:	f7fd fbcb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004286:	2000      	movs	r0, #0
 8004288:	f7fd fbc8 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x67);
 800428c:	2067      	movs	r0, #103	; 0x67
 800428e:	f7fd fbc5 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004292:	2000      	movs	r0, #0
 8004294:	f7fd fbc2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 8004298:	2087      	movs	r0, #135	; 0x87
 800429a:	f7fd fbbf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800429e:	2000      	movs	r0, #0
 80042a0:	f7fd fbbc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80042a4:	2099      	movs	r0, #153	; 0x99
 80042a6:	f7fd fbb9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042aa:	2000      	movs	r0, #0
 80042ac:	f7fd fbb6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 80042b0:	20bb      	movs	r0, #187	; 0xbb
 80042b2:	f7fd fbb3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042b6:	2000      	movs	r0, #0
 80042b8:	f7fd fbb0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 80042bc:	2099      	movs	r0, #153	; 0x99
 80042be:	f7fd fbad 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7fd fbaa 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 80042c8:	2077      	movs	r0, #119	; 0x77
 80042ca:	f7fd fba7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f7fd fba4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80042d4:	2044      	movs	r0, #68	; 0x44
 80042d6:	f7fd fba1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fd fb9e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x56);
 80042e0:	2056      	movs	r0, #86	; 0x56
 80042e2:	f7fd fb9b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042e6:	2000      	movs	r0, #0
 80042e8:	f7fd fb98 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x23);
 80042ec:	2023      	movs	r0, #35	; 0x23
 80042ee:	f7fd fb95 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042f2:	2000      	movs	r0, #0
 80042f4:	f7fd fb92 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x33);
 80042f8:	2033      	movs	r0, #51	; 0x33
 80042fa:	f7fd fb8f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80042fe:	2000      	movs	r0, #0
 8004300:	f7fd fb8c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x45);
 8004304:	2045      	movs	r0, #69	; 0x45
 8004306:	f7fd fb89 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800430a:	2000      	movs	r0, #0
 800430c:	f7fd fb86 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE8);
 8004310:	20e8      	movs	r0, #232	; 0xe8
 8004312:	f7fd fb5f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004316:	2000      	movs	r0, #0
 8004318:	f7fd fb80 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800431c:	2000      	movs	r0, #0
 800431e:	f7fd fb7d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004322:	2099      	movs	r0, #153	; 0x99
 8004324:	f7fd fb7a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004328:	2000      	movs	r0, #0
 800432a:	f7fd fb77 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x87);
 800432e:	2087      	movs	r0, #135	; 0x87
 8004330:	f7fd fb74 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004334:	2000      	movs	r0, #0
 8004336:	f7fd fb71 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800433a:	2088      	movs	r0, #136	; 0x88
 800433c:	f7fd fb6e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004340:	2000      	movs	r0, #0
 8004342:	f7fd fb6b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x77);
 8004346:	2077      	movs	r0, #119	; 0x77
 8004348:	f7fd fb68 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800434c:	2000      	movs	r0, #0
 800434e:	f7fd fb65 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 8004352:	2066      	movs	r0, #102	; 0x66
 8004354:	f7fd fb62 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004358:	2000      	movs	r0, #0
 800435a:	f7fd fb5f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x88);
 800435e:	2088      	movs	r0, #136	; 0x88
 8004360:	f7fd fb5c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004364:	2000      	movs	r0, #0
 8004366:	f7fd fb59 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xAA);
 800436a:	20aa      	movs	r0, #170	; 0xaa
 800436c:	f7fd fb56 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004370:	2000      	movs	r0, #0
 8004372:	f7fd fb53 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0xBB);
 8004376:	20bb      	movs	r0, #187	; 0xbb
 8004378:	f7fd fb50 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800437c:	2000      	movs	r0, #0
 800437e:	f7fd fb4d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x99);
 8004382:	2099      	movs	r0, #153	; 0x99
 8004384:	f7fd fb4a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004388:	2000      	movs	r0, #0
 800438a:	f7fd fb47 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x66);
 800438e:	2066      	movs	r0, #102	; 0x66
 8004390:	f7fd fb44 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004394:	2000      	movs	r0, #0
 8004396:	f7fd fb41 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 800439a:	2055      	movs	r0, #85	; 0x55
 800439c:	f7fd fb3e 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043a0:	2000      	movs	r0, #0
 80043a2:	f7fd fb3b 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80043a6:	2055      	movs	r0, #85	; 0x55
 80043a8:	f7fd fb38 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043ac:	2000      	movs	r0, #0
 80043ae:	f7fd fb35 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80043b2:	2044      	movs	r0, #68	; 0x44
 80043b4:	f7fd fb32 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7fd fb2f 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x44);
 80043be:	2044      	movs	r0, #68	; 0x44
 80043c0:	f7fd fb2c 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043c4:	2000      	movs	r0, #0
 80043c6:	f7fd fb29 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x55);
 80043ca:	2055      	movs	r0, #85	; 0x55
 80043cc:	f7fd fb26 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043d0:	2000      	movs	r0, #0
 80043d2:	f7fd fb23 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xE9);
 80043d6:	20e9      	movs	r0, #233	; 0xe9
 80043d8:	f7fd fafc 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80043dc:	20aa      	movs	r0, #170	; 0xaa
 80043de:	f7fd fb1d 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043e2:	2000      	movs	r0, #0
 80043e4:	f7fd fb1a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043e8:	2000      	movs	r0, #0
 80043ea:	f7fd fb17 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7fd fb14 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0x00);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f7fd faed 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0xAA);
 80043fa:	20aa      	movs	r0, #170	; 0xaa
 80043fc:	f7fd fb0e 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xCF);
 8004400:	20cf      	movs	r0, #207	; 0xcf
 8004402:	f7fd fae7 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004406:	2000      	movs	r0, #0
 8004408:	f7fd fb08 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800440c:	2000      	movs	r0, #0
 800440e:	f7fd fb05 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004412:	2000      	movs	r0, #0
 8004414:	f7fd fb02 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004418:	2000      	movs	r0, #0
 800441a:	f7fd faff 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800441e:	2000      	movs	r0, #0
 8004420:	f7fd fafc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004424:	2000      	movs	r0, #0
 8004426:	f7fd faf9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800442a:	2000      	movs	r0, #0
 800442c:	f7fd faf6 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004430:	2000      	movs	r0, #0
 8004432:	f7fd faf3 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004436:	2000      	movs	r0, #0
 8004438:	f7fd faf0 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800443c:	2000      	movs	r0, #0
 800443e:	f7fd faed 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004442:	2000      	movs	r0, #0
 8004444:	f7fd faea 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004448:	2000      	movs	r0, #0
 800444a:	f7fd fae7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800444e:	2000      	movs	r0, #0
 8004450:	f7fd fae4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004454:	2000      	movs	r0, #0
 8004456:	f7fd fae1 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800445a:	2000      	movs	r0, #0
 800445c:	f7fd fade 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004460:	2000      	movs	r0, #0
 8004462:	f7fd fadb 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004466:	2000      	movs	r0, #0
 8004468:	f7fd fad8 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xF0);
 800446c:	20f0      	movs	r0, #240	; 0xf0
 800446e:	f7fd fab1 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004472:	2000      	movs	r0, #0
 8004474:	f7fd fad2 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x50);
 8004478:	2050      	movs	r0, #80	; 0x50
 800447a:	f7fd facf 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800447e:	2000      	movs	r0, #0
 8004480:	f7fd facc 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 8004484:	2000      	movs	r0, #0
 8004486:	f7fd fac9 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 800448a:	2000      	movs	r0, #0
 800448c:	f7fd fac6 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xF3);
 8004490:	20f3      	movs	r0, #243	; 0xf3
 8004492:	f7fd fa9f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 8004496:	2000      	movs	r0, #0
 8004498:	f7fd fac0 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0xF9);
 800449c:	20f9      	movs	r0, #249	; 0xf9
 800449e:	f7fd fa99 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x06);
 80044a2:	2006      	movs	r0, #6
 80044a4:	f7fd faba 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x10);
 80044a8:	2010      	movs	r0, #16
 80044aa:	f7fd fab7 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x29);
 80044ae:	2029      	movs	r0, #41	; 0x29
 80044b0:	f7fd fab4 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_DATAX(0x00);
 80044b4:	2000      	movs	r0, #0
 80044b6:	f7fd fab1 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0x3A);
 80044ba:	203a      	movs	r0, #58	; 0x3a
 80044bc:	f7fd fa8a 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x55);	//66
 80044c0:	2055      	movs	r0, #85	; 0x55
 80044c2:	f7fd faab 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0x11);
 80044c6:	2011      	movs	r0, #17
 80044c8:	f7fd fa84 	bl	80019d4 <LCD_WR_REG>
		HAL_Delay(100);
 80044cc:	2064      	movs	r0, #100	; 0x64
 80044ce:	f7fc fafb 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x29);
 80044d2:	2029      	movs	r0, #41	; 0x29
 80044d4:	f7fd fa7e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 80044d8:	2035      	movs	r0, #53	; 0x35
 80044da:	f7fd fa7b 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x00);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fd fa9c 	bl	8001a1c <LCD_WR_DATAX>

		LCD_WR_REG(0x51);
 80044e4:	2051      	movs	r0, #81	; 0x51
 80044e6:	f7fd fa75 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0xFF);
 80044ea:	20ff      	movs	r0, #255	; 0xff
 80044ec:	f7fd fa96 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x53);
 80044f0:	2053      	movs	r0, #83	; 0x53
 80044f2:	f7fd fa6f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x2C);
 80044f6:	202c      	movs	r0, #44	; 0x2c
 80044f8:	f7fd fa90 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x55);
 80044fc:	2055      	movs	r0, #85	; 0x55
 80044fe:	f7fd fa69 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATAX(0x82);
 8004502:	2082      	movs	r0, #130	; 0x82
 8004504:	f7fd fa8a 	bl	8001a1c <LCD_WR_DATAX>
		LCD_WR_REG(0x2c);
 8004508:	202c      	movs	r0, #44	; 0x2c
 800450a:	f7fd fa63 	bl	80019d4 <LCD_WR_REG>
 800450e:	f002 bca1 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x5510) {
 8004512:	4b04      	ldr	r3, [pc, #16]	; (8004524 <LCD_Init+0x1504>)
 8004514:	889b      	ldrh	r3, [r3, #4]
 8004516:	f245 5210 	movw	r2, #21776	; 0x5510
 800451a:	4293      	cmp	r3, r2
 800451c:	f040 8782 	bne.w	8005424 <LCD_Init+0x2404>
 8004520:	e002      	b.n	8004528 <LCD_Init+0x1508>
 8004522:	bf00      	nop
 8004524:	200000bc 	.word	0x200000bc
		LCD_WriteReg(0xF000, 0x55);
 8004528:	2155      	movs	r1, #85	; 0x55
 800452a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800452e:	f7fd fadd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8004532:	21aa      	movs	r1, #170	; 0xaa
 8004534:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004538:	f7fd fad8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800453c:	2152      	movs	r1, #82	; 0x52
 800453e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8004542:	f7fd fad3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8004546:	2108      	movs	r1, #8
 8004548:	f24f 0003 	movw	r0, #61443	; 0xf003
 800454c:	f7fd face 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x01);
 8004550:	2101      	movs	r1, #1
 8004552:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004556:	f7fd fac9 	bl	8001aec <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000, 0x0D);
 800455a:	210d      	movs	r1, #13
 800455c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8004560:	f7fd fac4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB001, 0x0D);
 8004564:	210d      	movs	r1, #13
 8004566:	f24b 0001 	movw	r0, #45057	; 0xb001
 800456a:	f7fd fabf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB002, 0x0D);
 800456e:	210d      	movs	r1, #13
 8004570:	f24b 0002 	movw	r0, #45058	; 0xb002
 8004574:	f7fd faba 	bl	8001aec <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600, 0x34);
 8004578:	2134      	movs	r1, #52	; 0x34
 800457a:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800457e:	f7fd fab5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB601, 0x34);
 8004582:	2134      	movs	r1, #52	; 0x34
 8004584:	f24b 6001 	movw	r0, #46593	; 0xb601
 8004588:	f7fd fab0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB602, 0x34);
 800458c:	2134      	movs	r1, #52	; 0x34
 800458e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004592:	f7fd faab 	bl	8001aec <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100, 0x0D);
 8004596:	210d      	movs	r1, #13
 8004598:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800459c:	f7fd faa6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x0D);
 80045a0:	210d      	movs	r1, #13
 80045a2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80045a6:	f7fd faa1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB102, 0x0D);
 80045aa:	210d      	movs	r1, #13
 80045ac:	f24b 1002 	movw	r0, #45314	; 0xb102
 80045b0:	f7fd fa9c 	bl	8001aec <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700, 0x34);
 80045b4:	2134      	movs	r1, #52	; 0x34
 80045b6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80045ba:	f7fd fa97 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x34);
 80045be:	2134      	movs	r1, #52	; 0x34
 80045c0:	f24b 7001 	movw	r0, #46849	; 0xb701
 80045c4:	f7fd fa92 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB702, 0x34);
 80045c8:	2134      	movs	r1, #52	; 0x34
 80045ca:	f24b 7002 	movw	r0, #46850	; 0xb702
 80045ce:	f7fd fa8d 	bl	8001aec <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200, 0x00);
 80045d2:	2100      	movs	r1, #0
 80045d4:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 80045d8:	f7fd fa88 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB201, 0x00);
 80045dc:	2100      	movs	r1, #0
 80045de:	f24b 2001 	movw	r0, #45569	; 0xb201
 80045e2:	f7fd fa83 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB202, 0x00);
 80045e6:	2100      	movs	r1, #0
 80045e8:	f24b 2002 	movw	r0, #45570	; 0xb202
 80045ec:	f7fd fa7e 	bl	8001aec <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800, 0x24);
 80045f0:	2124      	movs	r1, #36	; 0x24
 80045f2:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80045f6:	f7fd fa79 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x24);
 80045fa:	2124      	movs	r1, #36	; 0x24
 80045fc:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004600:	f7fd fa74 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x24);
 8004604:	2124      	movs	r1, #36	; 0x24
 8004606:	f64b 0002 	movw	r0, #47106	; 0xb802
 800460a:	f7fd fa6f 	bl	8001aec <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00, 0x01);
 800460e:	2101      	movs	r1, #1
 8004610:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004614:	f7fd fa6a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB300, 0x0F);
 8004618:	210f      	movs	r1, #15
 800461a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800461e:	f7fd fa65 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB301, 0x0F);
 8004622:	210f      	movs	r1, #15
 8004624:	f24b 3001 	movw	r0, #45825	; 0xb301
 8004628:	f7fd fa60 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB302, 0x0F);
 800462c:	210f      	movs	r1, #15
 800462e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8004632:	f7fd fa5b 	bl	8001aec <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900, 0x34);
 8004636:	2134      	movs	r1, #52	; 0x34
 8004638:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800463c:	f7fd fa56 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB901, 0x34);
 8004640:	2134      	movs	r1, #52	; 0x34
 8004642:	f64b 1001 	movw	r0, #47361	; 0xb901
 8004646:	f7fd fa51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB902, 0x34);
 800464a:	2134      	movs	r1, #52	; 0x34
 800464c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8004650:	f7fd fa4c 	bl	8001aec <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500, 0x08);
 8004654:	2108      	movs	r1, #8
 8004656:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800465a:	f7fd fa47 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB501, 0x08);
 800465e:	2108      	movs	r1, #8
 8004660:	f24b 5001 	movw	r0, #46337	; 0xb501
 8004664:	f7fd fa42 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB502, 0x08);
 8004668:	2108      	movs	r1, #8
 800466a:	f24b 5002 	movw	r0, #46338	; 0xb502
 800466e:	f7fd fa3d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xC200, 0x03);
 8004672:	2103      	movs	r1, #3
 8004674:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8004678:	f7fd fa38 	bl	8001aec <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00, 0x24);
 800467c:	2124      	movs	r1, #36	; 0x24
 800467e:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8004682:	f7fd fa33 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBA01, 0x24);
 8004686:	2124      	movs	r1, #36	; 0x24
 8004688:	f64b 2001 	movw	r0, #47617	; 0xba01
 800468c:	f7fd fa2e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBA02, 0x24);
 8004690:	2124      	movs	r1, #36	; 0x24
 8004692:	f64b 2002 	movw	r0, #47618	; 0xba02
 8004696:	f7fd fa29 	bl	8001aec <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00, 0x00);
 800469a:	2100      	movs	r1, #0
 800469c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80046a0:	f7fd fa24 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x78);
 80046a4:	2178      	movs	r1, #120	; 0x78
 80046a6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80046aa:	f7fd fa1f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80046ae:	2100      	movs	r1, #0
 80046b0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80046b4:	f7fd fa1a 	bl	8001aec <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00, 0x00);
 80046b8:	2100      	movs	r1, #0
 80046ba:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80046be:	f7fd fa15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBD01, 0x78);
 80046c2:	2178      	movs	r1, #120	; 0x78
 80046c4:	f64b 5001 	movw	r0, #48385	; 0xbd01
 80046c8:	f7fd fa10 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBD02, 0x00);
 80046cc:	2100      	movs	r1, #0
 80046ce:	f64b 5002 	movw	r0, #48386	; 0xbd02
 80046d2:	f7fd fa0b 	bl	8001aec <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00, 0x00);
 80046d6:	2100      	movs	r1, #0
 80046d8:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 80046dc:	f7fd fa06 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBE01, 0x64);
 80046e0:	2164      	movs	r1, #100	; 0x64
 80046e2:	f64b 6001 	movw	r0, #48641	; 0xbe01
 80046e6:	f7fd fa01 	bl	8001aec <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100, 0x00);
 80046ea:	2100      	movs	r1, #0
 80046ec:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 80046f0:	f7fd f9fc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD101, 0x33);
 80046f4:	2133      	movs	r1, #51	; 0x33
 80046f6:	f24d 1001 	movw	r0, #53505	; 0xd101
 80046fa:	f7fd f9f7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD102, 0x00);
 80046fe:	2100      	movs	r1, #0
 8004700:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004704:	f7fd f9f2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD103, 0x34);
 8004708:	2134      	movs	r1, #52	; 0x34
 800470a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800470e:	f7fd f9ed 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD104, 0x00);
 8004712:	2100      	movs	r1, #0
 8004714:	f24d 1004 	movw	r0, #53508	; 0xd104
 8004718:	f7fd f9e8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD105, 0x3A);
 800471c:	213a      	movs	r1, #58	; 0x3a
 800471e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004722:	f7fd f9e3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD106, 0x00);
 8004726:	2100      	movs	r1, #0
 8004728:	f24d 1006 	movw	r0, #53510	; 0xd106
 800472c:	f7fd f9de 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD107, 0x4A);
 8004730:	214a      	movs	r1, #74	; 0x4a
 8004732:	f24d 1007 	movw	r0, #53511	; 0xd107
 8004736:	f7fd f9d9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD108, 0x00);
 800473a:	2100      	movs	r1, #0
 800473c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8004740:	f7fd f9d4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD109, 0x5C);
 8004744:	215c      	movs	r1, #92	; 0x5c
 8004746:	f24d 1009 	movw	r0, #53513	; 0xd109
 800474a:	f7fd f9cf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10A, 0x00);
 800474e:	2100      	movs	r1, #0
 8004750:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8004754:	f7fd f9ca 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10B, 0x81);
 8004758:	2181      	movs	r1, #129	; 0x81
 800475a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 800475e:	f7fd f9c5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10C, 0x00);
 8004762:	2100      	movs	r1, #0
 8004764:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8004768:	f7fd f9c0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10D, 0xA6);
 800476c:	21a6      	movs	r1, #166	; 0xa6
 800476e:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8004772:	f7fd f9bb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10E, 0x00);
 8004776:	2100      	movs	r1, #0
 8004778:	f24d 100e 	movw	r0, #53518	; 0xd10e
 800477c:	f7fd f9b6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD10F, 0xE5);
 8004780:	21e5      	movs	r1, #229	; 0xe5
 8004782:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8004786:	f7fd f9b1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD110, 0x01);
 800478a:	2101      	movs	r1, #1
 800478c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004790:	f7fd f9ac 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD111, 0x13);
 8004794:	2113      	movs	r1, #19
 8004796:	f24d 1011 	movw	r0, #53521	; 0xd111
 800479a:	f7fd f9a7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD112, 0x01);
 800479e:	2101      	movs	r1, #1
 80047a0:	f24d 1012 	movw	r0, #53522	; 0xd112
 80047a4:	f7fd f9a2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD113, 0x54);
 80047a8:	2154      	movs	r1, #84	; 0x54
 80047aa:	f24d 1013 	movw	r0, #53523	; 0xd113
 80047ae:	f7fd f99d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD114, 0x01);
 80047b2:	2101      	movs	r1, #1
 80047b4:	f24d 1014 	movw	r0, #53524	; 0xd114
 80047b8:	f7fd f998 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD115, 0x82);
 80047bc:	2182      	movs	r1, #130	; 0x82
 80047be:	f24d 1015 	movw	r0, #53525	; 0xd115
 80047c2:	f7fd f993 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD116, 0x01);
 80047c6:	2101      	movs	r1, #1
 80047c8:	f24d 1016 	movw	r0, #53526	; 0xd116
 80047cc:	f7fd f98e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD117, 0xCA);
 80047d0:	21ca      	movs	r1, #202	; 0xca
 80047d2:	f24d 1017 	movw	r0, #53527	; 0xd117
 80047d6:	f7fd f989 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD118, 0x02);
 80047da:	2102      	movs	r1, #2
 80047dc:	f24d 1018 	movw	r0, #53528	; 0xd118
 80047e0:	f7fd f984 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD119, 0x00);
 80047e4:	2100      	movs	r1, #0
 80047e6:	f24d 1019 	movw	r0, #53529	; 0xd119
 80047ea:	f7fd f97f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11A, 0x02);
 80047ee:	2102      	movs	r1, #2
 80047f0:	f24d 101a 	movw	r0, #53530	; 0xd11a
 80047f4:	f7fd f97a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11B, 0x01);
 80047f8:	2101      	movs	r1, #1
 80047fa:	f24d 101b 	movw	r0, #53531	; 0xd11b
 80047fe:	f7fd f975 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11C, 0x02);
 8004802:	2102      	movs	r1, #2
 8004804:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8004808:	f7fd f970 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11D, 0x34);
 800480c:	2134      	movs	r1, #52	; 0x34
 800480e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004812:	f7fd f96b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11E, 0x02);
 8004816:	2102      	movs	r1, #2
 8004818:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800481c:	f7fd f966 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD11F, 0x67);
 8004820:	2167      	movs	r1, #103	; 0x67
 8004822:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8004826:	f7fd f961 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD120, 0x02);
 800482a:	2102      	movs	r1, #2
 800482c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8004830:	f7fd f95c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD121, 0x84);
 8004834:	2184      	movs	r1, #132	; 0x84
 8004836:	f24d 1021 	movw	r0, #53537	; 0xd121
 800483a:	f7fd f957 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD122, 0x02);
 800483e:	2102      	movs	r1, #2
 8004840:	f24d 1022 	movw	r0, #53538	; 0xd122
 8004844:	f7fd f952 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD123, 0xA4);
 8004848:	21a4      	movs	r1, #164	; 0xa4
 800484a:	f24d 1023 	movw	r0, #53539	; 0xd123
 800484e:	f7fd f94d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD124, 0x02);
 8004852:	2102      	movs	r1, #2
 8004854:	f24d 1024 	movw	r0, #53540	; 0xd124
 8004858:	f7fd f948 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD125, 0xB7);
 800485c:	21b7      	movs	r1, #183	; 0xb7
 800485e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8004862:	f7fd f943 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD126, 0x02);
 8004866:	2102      	movs	r1, #2
 8004868:	f24d 1026 	movw	r0, #53542	; 0xd126
 800486c:	f7fd f93e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD127, 0xCF);
 8004870:	21cf      	movs	r1, #207	; 0xcf
 8004872:	f24d 1027 	movw	r0, #53543	; 0xd127
 8004876:	f7fd f939 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD128, 0x02);
 800487a:	2102      	movs	r1, #2
 800487c:	f24d 1028 	movw	r0, #53544	; 0xd128
 8004880:	f7fd f934 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD129, 0xDE);
 8004884:	21de      	movs	r1, #222	; 0xde
 8004886:	f24d 1029 	movw	r0, #53545	; 0xd129
 800488a:	f7fd f92f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12A, 0x02);
 800488e:	2102      	movs	r1, #2
 8004890:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004894:	f7fd f92a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12B, 0xF2);
 8004898:	21f2      	movs	r1, #242	; 0xf2
 800489a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 800489e:	f7fd f925 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12C, 0x02);
 80048a2:	2102      	movs	r1, #2
 80048a4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 80048a8:	f7fd f920 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12D, 0xFE);
 80048ac:	21fe      	movs	r1, #254	; 0xfe
 80048ae:	f24d 102d 	movw	r0, #53549	; 0xd12d
 80048b2:	f7fd f91b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12E, 0x03);
 80048b6:	2103      	movs	r1, #3
 80048b8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 80048bc:	f7fd f916 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD12F, 0x10);
 80048c0:	2110      	movs	r1, #16
 80048c2:	f24d 102f 	movw	r0, #53551	; 0xd12f
 80048c6:	f7fd f911 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD130, 0x03);
 80048ca:	2103      	movs	r1, #3
 80048cc:	f24d 1030 	movw	r0, #53552	; 0xd130
 80048d0:	f7fd f90c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD131, 0x33);
 80048d4:	2133      	movs	r1, #51	; 0x33
 80048d6:	f24d 1031 	movw	r0, #53553	; 0xd131
 80048da:	f7fd f907 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD132, 0x03);
 80048de:	2103      	movs	r1, #3
 80048e0:	f24d 1032 	movw	r0, #53554	; 0xd132
 80048e4:	f7fd f902 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD133, 0x6D);
 80048e8:	216d      	movs	r1, #109	; 0x6d
 80048ea:	f24d 1033 	movw	r0, #53555	; 0xd133
 80048ee:	f7fd f8fd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD200, 0x00);
 80048f2:	2100      	movs	r1, #0
 80048f4:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 80048f8:	f7fd f8f8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD201, 0x33);
 80048fc:	2133      	movs	r1, #51	; 0x33
 80048fe:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004902:	f7fd f8f3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD202, 0x00);
 8004906:	2100      	movs	r1, #0
 8004908:	f24d 2002 	movw	r0, #53762	; 0xd202
 800490c:	f7fd f8ee 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD203, 0x34);
 8004910:	2134      	movs	r1, #52	; 0x34
 8004912:	f24d 2003 	movw	r0, #53763	; 0xd203
 8004916:	f7fd f8e9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD204, 0x00);
 800491a:	2100      	movs	r1, #0
 800491c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004920:	f7fd f8e4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD205, 0x3A);
 8004924:	213a      	movs	r1, #58	; 0x3a
 8004926:	f24d 2005 	movw	r0, #53765	; 0xd205
 800492a:	f7fd f8df 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD206, 0x00);
 800492e:	2100      	movs	r1, #0
 8004930:	f24d 2006 	movw	r0, #53766	; 0xd206
 8004934:	f7fd f8da 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD207, 0x4A);
 8004938:	214a      	movs	r1, #74	; 0x4a
 800493a:	f24d 2007 	movw	r0, #53767	; 0xd207
 800493e:	f7fd f8d5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD208, 0x00);
 8004942:	2100      	movs	r1, #0
 8004944:	f24d 2008 	movw	r0, #53768	; 0xd208
 8004948:	f7fd f8d0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD209, 0x5C);
 800494c:	215c      	movs	r1, #92	; 0x5c
 800494e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8004952:	f7fd f8cb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD20A, 0x00);
 8004956:	2100      	movs	r1, #0
 8004958:	f24d 200a 	movw	r0, #53770	; 0xd20a
 800495c:	f7fd f8c6 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0xD20B, 0x81);
 8004960:	2181      	movs	r1, #129	; 0x81
 8004962:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8004966:	f7fd f8c1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD20C, 0x00);
 800496a:	2100      	movs	r1, #0
 800496c:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8004970:	f7fd f8bc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD20D, 0xA6);
 8004974:	21a6      	movs	r1, #166	; 0xa6
 8004976:	f24d 200d 	movw	r0, #53773	; 0xd20d
 800497a:	f7fd f8b7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD20E, 0x00);
 800497e:	2100      	movs	r1, #0
 8004980:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8004984:	f7fd f8b2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD20F, 0xE5);
 8004988:	21e5      	movs	r1, #229	; 0xe5
 800498a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 800498e:	f7fd f8ad 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD210, 0x01);
 8004992:	2101      	movs	r1, #1
 8004994:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004998:	f7fd f8a8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD211, 0x13);
 800499c:	2113      	movs	r1, #19
 800499e:	f24d 2011 	movw	r0, #53777	; 0xd211
 80049a2:	f7fd f8a3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD212, 0x01);
 80049a6:	2101      	movs	r1, #1
 80049a8:	f24d 2012 	movw	r0, #53778	; 0xd212
 80049ac:	f7fd f89e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD213, 0x54);
 80049b0:	2154      	movs	r1, #84	; 0x54
 80049b2:	f24d 2013 	movw	r0, #53779	; 0xd213
 80049b6:	f7fd f899 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD214, 0x01);
 80049ba:	2101      	movs	r1, #1
 80049bc:	f24d 2014 	movw	r0, #53780	; 0xd214
 80049c0:	f7fd f894 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD215, 0x82);
 80049c4:	2182      	movs	r1, #130	; 0x82
 80049c6:	f24d 2015 	movw	r0, #53781	; 0xd215
 80049ca:	f7fd f88f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD216, 0x01);
 80049ce:	2101      	movs	r1, #1
 80049d0:	f24d 2016 	movw	r0, #53782	; 0xd216
 80049d4:	f7fd f88a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD217, 0xCA);
 80049d8:	21ca      	movs	r1, #202	; 0xca
 80049da:	f24d 2017 	movw	r0, #53783	; 0xd217
 80049de:	f7fd f885 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD218, 0x02);
 80049e2:	2102      	movs	r1, #2
 80049e4:	f24d 2018 	movw	r0, #53784	; 0xd218
 80049e8:	f7fd f880 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD219, 0x00);
 80049ec:	2100      	movs	r1, #0
 80049ee:	f24d 2019 	movw	r0, #53785	; 0xd219
 80049f2:	f7fd f87b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21A, 0x02);
 80049f6:	2102      	movs	r1, #2
 80049f8:	f24d 201a 	movw	r0, #53786	; 0xd21a
 80049fc:	f7fd f876 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21B, 0x01);
 8004a00:	2101      	movs	r1, #1
 8004a02:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004a06:	f7fd f871 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21C, 0x02);
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004a10:	f7fd f86c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21D, 0x34);
 8004a14:	2134      	movs	r1, #52	; 0x34
 8004a16:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004a1a:	f7fd f867 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21E, 0x02);
 8004a1e:	2102      	movs	r1, #2
 8004a20:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004a24:	f7fd f862 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD21F, 0x67);
 8004a28:	2167      	movs	r1, #103	; 0x67
 8004a2a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004a2e:	f7fd f85d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD220, 0x02);
 8004a32:	2102      	movs	r1, #2
 8004a34:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004a38:	f7fd f858 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD221, 0x84);
 8004a3c:	2184      	movs	r1, #132	; 0x84
 8004a3e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004a42:	f7fd f853 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD222, 0x02);
 8004a46:	2102      	movs	r1, #2
 8004a48:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004a4c:	f7fd f84e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD223, 0xA4);
 8004a50:	21a4      	movs	r1, #164	; 0xa4
 8004a52:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004a56:	f7fd f849 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD224, 0x02);
 8004a5a:	2102      	movs	r1, #2
 8004a5c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004a60:	f7fd f844 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD225, 0xB7);
 8004a64:	21b7      	movs	r1, #183	; 0xb7
 8004a66:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004a6a:	f7fd f83f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD226, 0x02);
 8004a6e:	2102      	movs	r1, #2
 8004a70:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004a74:	f7fd f83a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD227, 0xCF);
 8004a78:	21cf      	movs	r1, #207	; 0xcf
 8004a7a:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004a7e:	f7fd f835 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD228, 0x02);
 8004a82:	2102      	movs	r1, #2
 8004a84:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004a88:	f7fd f830 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD229, 0xDE);
 8004a8c:	21de      	movs	r1, #222	; 0xde
 8004a8e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8004a92:	f7fd f82b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22A, 0x02);
 8004a96:	2102      	movs	r1, #2
 8004a98:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004a9c:	f7fd f826 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22B, 0xF2);
 8004aa0:	21f2      	movs	r1, #242	; 0xf2
 8004aa2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004aa6:	f7fd f821 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22C, 0x02);
 8004aaa:	2102      	movs	r1, #2
 8004aac:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004ab0:	f7fd f81c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22D, 0xFE);
 8004ab4:	21fe      	movs	r1, #254	; 0xfe
 8004ab6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004aba:	f7fd f817 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22E, 0x03);
 8004abe:	2103      	movs	r1, #3
 8004ac0:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004ac4:	f7fd f812 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD22F, 0x10);
 8004ac8:	2110      	movs	r1, #16
 8004aca:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004ace:	f7fd f80d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD230, 0x03);
 8004ad2:	2103      	movs	r1, #3
 8004ad4:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004ad8:	f7fd f808 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD231, 0x33);
 8004adc:	2133      	movs	r1, #51	; 0x33
 8004ade:	f24d 2031 	movw	r0, #53809	; 0xd231
 8004ae2:	f7fd f803 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD232, 0x03);
 8004ae6:	2103      	movs	r1, #3
 8004ae8:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004aec:	f7fc fffe 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD233, 0x6D);
 8004af0:	216d      	movs	r1, #109	; 0x6d
 8004af2:	f24d 2033 	movw	r0, #53811	; 0xd233
 8004af6:	f7fc fff9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD300, 0x00);
 8004afa:	2100      	movs	r1, #0
 8004afc:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004b00:	f7fc fff4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD301, 0x33);
 8004b04:	2133      	movs	r1, #51	; 0x33
 8004b06:	f24d 3001 	movw	r0, #54017	; 0xd301
 8004b0a:	f7fc ffef 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD302, 0x00);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	f24d 3002 	movw	r0, #54018	; 0xd302
 8004b14:	f7fc ffea 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD303, 0x34);
 8004b18:	2134      	movs	r1, #52	; 0x34
 8004b1a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8004b1e:	f7fc ffe5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD304, 0x00);
 8004b22:	2100      	movs	r1, #0
 8004b24:	f24d 3004 	movw	r0, #54020	; 0xd304
 8004b28:	f7fc ffe0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD305, 0x3A);
 8004b2c:	213a      	movs	r1, #58	; 0x3a
 8004b2e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8004b32:	f7fc ffdb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD306, 0x00);
 8004b36:	2100      	movs	r1, #0
 8004b38:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004b3c:	f7fc ffd6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD307, 0x4A);
 8004b40:	214a      	movs	r1, #74	; 0x4a
 8004b42:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004b46:	f7fc ffd1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD308, 0x00);
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8004b50:	f7fc ffcc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD309, 0x5C);
 8004b54:	215c      	movs	r1, #92	; 0x5c
 8004b56:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004b5a:	f7fc ffc7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD30A, 0x00);
 8004b5e:	2100      	movs	r1, #0
 8004b60:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8004b64:	f7fc ffc2 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0xD30B, 0x81);
 8004b68:	2181      	movs	r1, #129	; 0x81
 8004b6a:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004b6e:	f7fc ffbd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD30C, 0x00);
 8004b72:	2100      	movs	r1, #0
 8004b74:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004b78:	f7fc ffb8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD30D, 0xA6);
 8004b7c:	21a6      	movs	r1, #166	; 0xa6
 8004b7e:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8004b82:	f7fc ffb3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD30E, 0x00);
 8004b86:	2100      	movs	r1, #0
 8004b88:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004b8c:	f7fc ffae 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD30F, 0xE5);
 8004b90:	21e5      	movs	r1, #229	; 0xe5
 8004b92:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8004b96:	f7fc ffa9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD310, 0x01);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004ba0:	f7fc ffa4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD311, 0x13);
 8004ba4:	2113      	movs	r1, #19
 8004ba6:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004baa:	f7fc ff9f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD312, 0x01);
 8004bae:	2101      	movs	r1, #1
 8004bb0:	f24d 3012 	movw	r0, #54034	; 0xd312
 8004bb4:	f7fc ff9a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD313, 0x54);
 8004bb8:	2154      	movs	r1, #84	; 0x54
 8004bba:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004bbe:	f7fc ff95 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD314, 0x01);
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004bc8:	f7fc ff90 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD315, 0x82);
 8004bcc:	2182      	movs	r1, #130	; 0x82
 8004bce:	f24d 3015 	movw	r0, #54037	; 0xd315
 8004bd2:	f7fc ff8b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD316, 0x01);
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004bdc:	f7fc ff86 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD317, 0xCA);
 8004be0:	21ca      	movs	r1, #202	; 0xca
 8004be2:	f24d 3017 	movw	r0, #54039	; 0xd317
 8004be6:	f7fc ff81 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD318, 0x02);
 8004bea:	2102      	movs	r1, #2
 8004bec:	f24d 3018 	movw	r0, #54040	; 0xd318
 8004bf0:	f7fc ff7c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD319, 0x00);
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004bfa:	f7fc ff77 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31A, 0x02);
 8004bfe:	2102      	movs	r1, #2
 8004c00:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8004c04:	f7fc ff72 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31B, 0x01);
 8004c08:	2101      	movs	r1, #1
 8004c0a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8004c0e:	f7fc ff6d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31C, 0x02);
 8004c12:	2102      	movs	r1, #2
 8004c14:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8004c18:	f7fc ff68 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31D, 0x34);
 8004c1c:	2134      	movs	r1, #52	; 0x34
 8004c1e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8004c22:	f7fc ff63 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31E, 0x02);
 8004c26:	2102      	movs	r1, #2
 8004c28:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8004c2c:	f7fc ff5e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD31F, 0x67);
 8004c30:	2167      	movs	r1, #103	; 0x67
 8004c32:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8004c36:	f7fc ff59 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD320, 0x02);
 8004c3a:	2102      	movs	r1, #2
 8004c3c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8004c40:	f7fc ff54 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD321, 0x84);
 8004c44:	2184      	movs	r1, #132	; 0x84
 8004c46:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004c4a:	f7fc ff4f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD322, 0x02);
 8004c4e:	2102      	movs	r1, #2
 8004c50:	f24d 3022 	movw	r0, #54050	; 0xd322
 8004c54:	f7fc ff4a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD323, 0xA4);
 8004c58:	21a4      	movs	r1, #164	; 0xa4
 8004c5a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8004c5e:	f7fc ff45 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD324, 0x02);
 8004c62:	2102      	movs	r1, #2
 8004c64:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004c68:	f7fc ff40 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD325, 0xB7);
 8004c6c:	21b7      	movs	r1, #183	; 0xb7
 8004c6e:	f24d 3025 	movw	r0, #54053	; 0xd325
 8004c72:	f7fc ff3b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD326, 0x02);
 8004c76:	2102      	movs	r1, #2
 8004c78:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004c7c:	f7fc ff36 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD327, 0xCF);
 8004c80:	21cf      	movs	r1, #207	; 0xcf
 8004c82:	f24d 3027 	movw	r0, #54055	; 0xd327
 8004c86:	f7fc ff31 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD328, 0x02);
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004c90:	f7fc ff2c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD329, 0xDE);
 8004c94:	21de      	movs	r1, #222	; 0xde
 8004c96:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004c9a:	f7fc ff27 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32A, 0x02);
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8004ca4:	f7fc ff22 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32B, 0xF2);
 8004ca8:	21f2      	movs	r1, #242	; 0xf2
 8004caa:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004cae:	f7fc ff1d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32C, 0x02);
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004cb8:	f7fc ff18 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32D, 0xFE);
 8004cbc:	21fe      	movs	r1, #254	; 0xfe
 8004cbe:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8004cc2:	f7fc ff13 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32E, 0x03);
 8004cc6:	2103      	movs	r1, #3
 8004cc8:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004ccc:	f7fc ff0e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD32F, 0x10);
 8004cd0:	2110      	movs	r1, #16
 8004cd2:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8004cd6:	f7fc ff09 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD330, 0x03);
 8004cda:	2103      	movs	r1, #3
 8004cdc:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004ce0:	f7fc ff04 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD331, 0x33);
 8004ce4:	2133      	movs	r1, #51	; 0x33
 8004ce6:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004cea:	f7fc feff 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD332, 0x03);
 8004cee:	2103      	movs	r1, #3
 8004cf0:	f24d 3032 	movw	r0, #54066	; 0xd332
 8004cf4:	f7fc fefa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD333, 0x6D);
 8004cf8:	216d      	movs	r1, #109	; 0x6d
 8004cfa:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004cfe:	f7fc fef5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD400, 0x00);
 8004d02:	2100      	movs	r1, #0
 8004d04:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8004d08:	f7fc fef0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD401, 0x33);
 8004d0c:	2133      	movs	r1, #51	; 0x33
 8004d0e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8004d12:	f7fc feeb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD402, 0x00);
 8004d16:	2100      	movs	r1, #0
 8004d18:	f24d 4002 	movw	r0, #54274	; 0xd402
 8004d1c:	f7fc fee6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD403, 0x34);
 8004d20:	2134      	movs	r1, #52	; 0x34
 8004d22:	f24d 4003 	movw	r0, #54275	; 0xd403
 8004d26:	f7fc fee1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD404, 0x00);
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8004d30:	f7fc fedc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD405, 0x3A);
 8004d34:	213a      	movs	r1, #58	; 0x3a
 8004d36:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004d3a:	f7fc fed7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD406, 0x00);
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f24d 4006 	movw	r0, #54278	; 0xd406
 8004d44:	f7fc fed2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD407, 0x4A);
 8004d48:	214a      	movs	r1, #74	; 0x4a
 8004d4a:	f24d 4007 	movw	r0, #54279	; 0xd407
 8004d4e:	f7fc fecd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD408, 0x00);
 8004d52:	2100      	movs	r1, #0
 8004d54:	f24d 4008 	movw	r0, #54280	; 0xd408
 8004d58:	f7fc fec8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD409, 0x5C);
 8004d5c:	215c      	movs	r1, #92	; 0x5c
 8004d5e:	f24d 4009 	movw	r0, #54281	; 0xd409
 8004d62:	f7fc fec3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD40A, 0x00);
 8004d66:	2100      	movs	r1, #0
 8004d68:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004d6c:	f7fc febe 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD40B, 0x81);
 8004d70:	2181      	movs	r1, #129	; 0x81
 8004d72:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8004d76:	f7fc feb9 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0xD40C, 0x00);
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8004d80:	f7fc feb4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD40D, 0xA6);
 8004d84:	21a6      	movs	r1, #166	; 0xa6
 8004d86:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004d8a:	f7fc feaf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD40E, 0x00);
 8004d8e:	2100      	movs	r1, #0
 8004d90:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8004d94:	f7fc feaa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD40F, 0xE5);
 8004d98:	21e5      	movs	r1, #229	; 0xe5
 8004d9a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8004d9e:	f7fc fea5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD410, 0x01);
 8004da2:	2101      	movs	r1, #1
 8004da4:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004da8:	f7fc fea0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD411, 0x13);
 8004dac:	2113      	movs	r1, #19
 8004dae:	f24d 4011 	movw	r0, #54289	; 0xd411
 8004db2:	f7fc fe9b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD412, 0x01);
 8004db6:	2101      	movs	r1, #1
 8004db8:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004dbc:	f7fc fe96 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD413, 0x54);
 8004dc0:	2154      	movs	r1, #84	; 0x54
 8004dc2:	f24d 4013 	movw	r0, #54291	; 0xd413
 8004dc6:	f7fc fe91 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD414, 0x01);
 8004dca:	2101      	movs	r1, #1
 8004dcc:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004dd0:	f7fc fe8c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD415, 0x82);
 8004dd4:	2182      	movs	r1, #130	; 0x82
 8004dd6:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004dda:	f7fc fe87 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD416, 0x01);
 8004dde:	2101      	movs	r1, #1
 8004de0:	f24d 4016 	movw	r0, #54294	; 0xd416
 8004de4:	f7fc fe82 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD417, 0xCA);
 8004de8:	21ca      	movs	r1, #202	; 0xca
 8004dea:	f24d 4017 	movw	r0, #54295	; 0xd417
 8004dee:	f7fc fe7d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD418, 0x02);
 8004df2:	2102      	movs	r1, #2
 8004df4:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004df8:	f7fc fe78 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD419, 0x00);
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	f24d 4019 	movw	r0, #54297	; 0xd419
 8004e02:	f7fc fe73 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41A, 0x02);
 8004e06:	2102      	movs	r1, #2
 8004e08:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8004e0c:	f7fc fe6e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41B, 0x01);
 8004e10:	2101      	movs	r1, #1
 8004e12:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8004e16:	f7fc fe69 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41C, 0x02);
 8004e1a:	2102      	movs	r1, #2
 8004e1c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8004e20:	f7fc fe64 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41D, 0x34);
 8004e24:	2134      	movs	r1, #52	; 0x34
 8004e26:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8004e2a:	f7fc fe5f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41E, 0x02);
 8004e2e:	2102      	movs	r1, #2
 8004e30:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8004e34:	f7fc fe5a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD41F, 0x67);
 8004e38:	2167      	movs	r1, #103	; 0x67
 8004e3a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8004e3e:	f7fc fe55 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD420, 0x02);
 8004e42:	2102      	movs	r1, #2
 8004e44:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004e48:	f7fc fe50 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD421, 0x84);
 8004e4c:	2184      	movs	r1, #132	; 0x84
 8004e4e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8004e52:	f7fc fe4b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD422, 0x02);
 8004e56:	2102      	movs	r1, #2
 8004e58:	f24d 4022 	movw	r0, #54306	; 0xd422
 8004e5c:	f7fc fe46 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD423, 0xA4);
 8004e60:	21a4      	movs	r1, #164	; 0xa4
 8004e62:	f24d 4023 	movw	r0, #54307	; 0xd423
 8004e66:	f7fc fe41 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD424, 0x02);
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004e70:	f7fc fe3c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD425, 0xB7);
 8004e74:	21b7      	movs	r1, #183	; 0xb7
 8004e76:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004e7a:	f7fc fe37 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD426, 0x02);
 8004e7e:	2102      	movs	r1, #2
 8004e80:	f24d 4026 	movw	r0, #54310	; 0xd426
 8004e84:	f7fc fe32 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD427, 0xCF);
 8004e88:	21cf      	movs	r1, #207	; 0xcf
 8004e8a:	f24d 4027 	movw	r0, #54311	; 0xd427
 8004e8e:	f7fc fe2d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD428, 0x02);
 8004e92:	2102      	movs	r1, #2
 8004e94:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004e98:	f7fc fe28 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD429, 0xDE);
 8004e9c:	21de      	movs	r1, #222	; 0xde
 8004e9e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004ea2:	f7fc fe23 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42A, 0x02);
 8004ea6:	2102      	movs	r1, #2
 8004ea8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004eac:	f7fc fe1e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42B, 0xF2);
 8004eb0:	21f2      	movs	r1, #242	; 0xf2
 8004eb2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004eb6:	f7fc fe19 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42C, 0x02);
 8004eba:	2102      	movs	r1, #2
 8004ebc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004ec0:	f7fc fe14 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42D, 0xFE);
 8004ec4:	21fe      	movs	r1, #254	; 0xfe
 8004ec6:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004eca:	f7fc fe0f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42E, 0x03);
 8004ece:	2103      	movs	r1, #3
 8004ed0:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004ed4:	f7fc fe0a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD42F, 0x10);
 8004ed8:	2110      	movs	r1, #16
 8004eda:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004ede:	f7fc fe05 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD430, 0x03);
 8004ee2:	2103      	movs	r1, #3
 8004ee4:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004ee8:	f7fc fe00 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD431, 0x33);
 8004eec:	2133      	movs	r1, #51	; 0x33
 8004eee:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004ef2:	f7fc fdfb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD432, 0x03);
 8004ef6:	2103      	movs	r1, #3
 8004ef8:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004efc:	f7fc fdf6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD433, 0x6D);
 8004f00:	216d      	movs	r1, #109	; 0x6d
 8004f02:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004f06:	f7fc fdf1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD500, 0x00);
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004f10:	f7fc fdec 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD501, 0x33);
 8004f14:	2133      	movs	r1, #51	; 0x33
 8004f16:	f24d 5001 	movw	r0, #54529	; 0xd501
 8004f1a:	f7fc fde7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD502, 0x00);
 8004f1e:	2100      	movs	r1, #0
 8004f20:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004f24:	f7fc fde2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD503, 0x34);
 8004f28:	2134      	movs	r1, #52	; 0x34
 8004f2a:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004f2e:	f7fc fddd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD504, 0x00);
 8004f32:	2100      	movs	r1, #0
 8004f34:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004f38:	f7fc fdd8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD505, 0x3A);
 8004f3c:	213a      	movs	r1, #58	; 0x3a
 8004f3e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8004f42:	f7fc fdd3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD506, 0x00);
 8004f46:	2100      	movs	r1, #0
 8004f48:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004f4c:	f7fc fdce 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD507, 0x4A);
 8004f50:	214a      	movs	r1, #74	; 0x4a
 8004f52:	f24d 5007 	movw	r0, #54535	; 0xd507
 8004f56:	f7fc fdc9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD508, 0x00);
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004f60:	f7fc fdc4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD509, 0x5C);
 8004f64:	215c      	movs	r1, #92	; 0x5c
 8004f66:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004f6a:	f7fc fdbf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD50A, 0x00);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004f74:	f7fc fdba 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD50B, 0x81);
 8004f78:	2181      	movs	r1, #129	; 0x81
 8004f7a:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004f7e:	f7fc fdb5 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0xD50C, 0x00);
 8004f82:	2100      	movs	r1, #0
 8004f84:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004f88:	f7fc fdb0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD50D, 0xA6);
 8004f8c:	21a6      	movs	r1, #166	; 0xa6
 8004f8e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004f92:	f7fc fdab 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD50E, 0x00);
 8004f96:	2100      	movs	r1, #0
 8004f98:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8004f9c:	f7fc fda6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD50F, 0xE5);
 8004fa0:	21e5      	movs	r1, #229	; 0xe5
 8004fa2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004fa6:	f7fc fda1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD510, 0x01);
 8004faa:	2101      	movs	r1, #1
 8004fac:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004fb0:	f7fc fd9c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD511, 0x13);
 8004fb4:	2113      	movs	r1, #19
 8004fb6:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004fba:	f7fc fd97 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD512, 0x01);
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004fc4:	f7fc fd92 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD513, 0x54);
 8004fc8:	2154      	movs	r1, #84	; 0x54
 8004fca:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004fce:	f7fc fd8d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD514, 0x01);
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004fd8:	f7fc fd88 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD515, 0x82);
 8004fdc:	2182      	movs	r1, #130	; 0x82
 8004fde:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004fe2:	f7fc fd83 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD516, 0x01);
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004fec:	f7fc fd7e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD517, 0xCA);
 8004ff0:	21ca      	movs	r1, #202	; 0xca
 8004ff2:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004ff6:	f7fc fd79 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD518, 0x02);
 8004ffa:	2102      	movs	r1, #2
 8004ffc:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005000:	f7fc fd74 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD519, 0x00);
 8005004:	2100      	movs	r1, #0
 8005006:	f24d 5019 	movw	r0, #54553	; 0xd519
 800500a:	f7fc fd6f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51A, 0x02);
 800500e:	2102      	movs	r1, #2
 8005010:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8005014:	f7fc fd6a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51B, 0x01);
 8005018:	2101      	movs	r1, #1
 800501a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800501e:	f7fc fd65 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51C, 0x02);
 8005022:	2102      	movs	r1, #2
 8005024:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8005028:	f7fc fd60 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51D, 0x34);
 800502c:	2134      	movs	r1, #52	; 0x34
 800502e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8005032:	f7fc fd5b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51E, 0x02);
 8005036:	2102      	movs	r1, #2
 8005038:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800503c:	f7fc fd56 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD51F, 0x67);
 8005040:	2167      	movs	r1, #103	; 0x67
 8005042:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8005046:	f7fc fd51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD520, 0x02);
 800504a:	2102      	movs	r1, #2
 800504c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8005050:	f7fc fd4c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD521, 0x84);
 8005054:	2184      	movs	r1, #132	; 0x84
 8005056:	f24d 5021 	movw	r0, #54561	; 0xd521
 800505a:	f7fc fd47 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD522, 0x02);
 800505e:	2102      	movs	r1, #2
 8005060:	f24d 5022 	movw	r0, #54562	; 0xd522
 8005064:	f7fc fd42 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD523, 0xA4);
 8005068:	21a4      	movs	r1, #164	; 0xa4
 800506a:	f24d 5023 	movw	r0, #54563	; 0xd523
 800506e:	f7fc fd3d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD524, 0x02);
 8005072:	2102      	movs	r1, #2
 8005074:	f24d 5024 	movw	r0, #54564	; 0xd524
 8005078:	f7fc fd38 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD525, 0xB7);
 800507c:	21b7      	movs	r1, #183	; 0xb7
 800507e:	f24d 5025 	movw	r0, #54565	; 0xd525
 8005082:	f7fc fd33 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD526, 0x02);
 8005086:	2102      	movs	r1, #2
 8005088:	f24d 5026 	movw	r0, #54566	; 0xd526
 800508c:	f7fc fd2e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD527, 0xCF);
 8005090:	21cf      	movs	r1, #207	; 0xcf
 8005092:	f24d 5027 	movw	r0, #54567	; 0xd527
 8005096:	f7fc fd29 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD528, 0x02);
 800509a:	2102      	movs	r1, #2
 800509c:	f24d 5028 	movw	r0, #54568	; 0xd528
 80050a0:	f7fc fd24 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD529, 0xDE);
 80050a4:	21de      	movs	r1, #222	; 0xde
 80050a6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80050aa:	f7fc fd1f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52A, 0x02);
 80050ae:	2102      	movs	r1, #2
 80050b0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80050b4:	f7fc fd1a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52B, 0xF2);
 80050b8:	21f2      	movs	r1, #242	; 0xf2
 80050ba:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80050be:	f7fc fd15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52C, 0x02);
 80050c2:	2102      	movs	r1, #2
 80050c4:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80050c8:	f7fc fd10 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52D, 0xFE);
 80050cc:	21fe      	movs	r1, #254	; 0xfe
 80050ce:	f24d 502d 	movw	r0, #54573	; 0xd52d
 80050d2:	f7fc fd0b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52E, 0x03);
 80050d6:	2103      	movs	r1, #3
 80050d8:	f24d 502e 	movw	r0, #54574	; 0xd52e
 80050dc:	f7fc fd06 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD52F, 0x10);
 80050e0:	2110      	movs	r1, #16
 80050e2:	f24d 502f 	movw	r0, #54575	; 0xd52f
 80050e6:	f7fc fd01 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD530, 0x03);
 80050ea:	2103      	movs	r1, #3
 80050ec:	f24d 5030 	movw	r0, #54576	; 0xd530
 80050f0:	f7fc fcfc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD531, 0x33);
 80050f4:	2133      	movs	r1, #51	; 0x33
 80050f6:	f24d 5031 	movw	r0, #54577	; 0xd531
 80050fa:	f7fc fcf7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD532, 0x03);
 80050fe:	2103      	movs	r1, #3
 8005100:	f24d 5032 	movw	r0, #54578	; 0xd532
 8005104:	f7fc fcf2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD533, 0x6D);
 8005108:	216d      	movs	r1, #109	; 0x6d
 800510a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800510e:	f7fc fced 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD600, 0x00);
 8005112:	2100      	movs	r1, #0
 8005114:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8005118:	f7fc fce8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD601, 0x33);
 800511c:	2133      	movs	r1, #51	; 0x33
 800511e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8005122:	f7fc fce3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD602, 0x00);
 8005126:	2100      	movs	r1, #0
 8005128:	f24d 6002 	movw	r0, #54786	; 0xd602
 800512c:	f7fc fcde 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD603, 0x34);
 8005130:	2134      	movs	r1, #52	; 0x34
 8005132:	f24d 6003 	movw	r0, #54787	; 0xd603
 8005136:	f7fc fcd9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD604, 0x00);
 800513a:	2100      	movs	r1, #0
 800513c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8005140:	f7fc fcd4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD605, 0x3A);
 8005144:	213a      	movs	r1, #58	; 0x3a
 8005146:	f24d 6005 	movw	r0, #54789	; 0xd605
 800514a:	f7fc fccf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD606, 0x00);
 800514e:	2100      	movs	r1, #0
 8005150:	f24d 6006 	movw	r0, #54790	; 0xd606
 8005154:	f7fc fcca 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD607, 0x4A);
 8005158:	214a      	movs	r1, #74	; 0x4a
 800515a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800515e:	f7fc fcc5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD608, 0x00);
 8005162:	2100      	movs	r1, #0
 8005164:	f24d 6008 	movw	r0, #54792	; 0xd608
 8005168:	f7fc fcc0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD609, 0x5C);
 800516c:	215c      	movs	r1, #92	; 0x5c
 800516e:	f24d 6009 	movw	r0, #54793	; 0xd609
 8005172:	f7fc fcbb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD60A, 0x00);
 8005176:	2100      	movs	r1, #0
 8005178:	f24d 600a 	movw	r0, #54794	; 0xd60a
 800517c:	f7fc fcb6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD60B, 0x81);
 8005180:	2181      	movs	r1, #129	; 0x81
 8005182:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8005186:	f7fc fcb1 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0xD60C, 0x00);
 800518a:	2100      	movs	r1, #0
 800518c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005190:	f7fc fcac 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD60D, 0xA6);
 8005194:	21a6      	movs	r1, #166	; 0xa6
 8005196:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800519a:	f7fc fca7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD60E, 0x00);
 800519e:	2100      	movs	r1, #0
 80051a0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80051a4:	f7fc fca2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD60F, 0xE5);
 80051a8:	21e5      	movs	r1, #229	; 0xe5
 80051aa:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80051ae:	f7fc fc9d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD610, 0x01);
 80051b2:	2101      	movs	r1, #1
 80051b4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80051b8:	f7fc fc98 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD611, 0x13);
 80051bc:	2113      	movs	r1, #19
 80051be:	f24d 6011 	movw	r0, #54801	; 0xd611
 80051c2:	f7fc fc93 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD612, 0x01);
 80051c6:	2101      	movs	r1, #1
 80051c8:	f24d 6012 	movw	r0, #54802	; 0xd612
 80051cc:	f7fc fc8e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD613, 0x54);
 80051d0:	2154      	movs	r1, #84	; 0x54
 80051d2:	f24d 6013 	movw	r0, #54803	; 0xd613
 80051d6:	f7fc fc89 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD614, 0x01);
 80051da:	2101      	movs	r1, #1
 80051dc:	f24d 6014 	movw	r0, #54804	; 0xd614
 80051e0:	f7fc fc84 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD615, 0x82);
 80051e4:	2182      	movs	r1, #130	; 0x82
 80051e6:	f24d 6015 	movw	r0, #54805	; 0xd615
 80051ea:	f7fc fc7f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD616, 0x01);
 80051ee:	2101      	movs	r1, #1
 80051f0:	f24d 6016 	movw	r0, #54806	; 0xd616
 80051f4:	f7fc fc7a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD617, 0xCA);
 80051f8:	21ca      	movs	r1, #202	; 0xca
 80051fa:	f24d 6017 	movw	r0, #54807	; 0xd617
 80051fe:	f7fc fc75 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD618, 0x02);
 8005202:	2102      	movs	r1, #2
 8005204:	f24d 6018 	movw	r0, #54808	; 0xd618
 8005208:	f7fc fc70 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD619, 0x00);
 800520c:	2100      	movs	r1, #0
 800520e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8005212:	f7fc fc6b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61A, 0x02);
 8005216:	2102      	movs	r1, #2
 8005218:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800521c:	f7fc fc66 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61B, 0x01);
 8005220:	2101      	movs	r1, #1
 8005222:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8005226:	f7fc fc61 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61C, 0x02);
 800522a:	2102      	movs	r1, #2
 800522c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8005230:	f7fc fc5c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61D, 0x34);
 8005234:	2134      	movs	r1, #52	; 0x34
 8005236:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800523a:	f7fc fc57 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61E, 0x02);
 800523e:	2102      	movs	r1, #2
 8005240:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8005244:	f7fc fc52 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD61F, 0x67);
 8005248:	2167      	movs	r1, #103	; 0x67
 800524a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800524e:	f7fc fc4d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD620, 0x02);
 8005252:	2102      	movs	r1, #2
 8005254:	f24d 6020 	movw	r0, #54816	; 0xd620
 8005258:	f7fc fc48 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD621, 0x84);
 800525c:	2184      	movs	r1, #132	; 0x84
 800525e:	f24d 6021 	movw	r0, #54817	; 0xd621
 8005262:	f7fc fc43 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD622, 0x02);
 8005266:	2102      	movs	r1, #2
 8005268:	f24d 6022 	movw	r0, #54818	; 0xd622
 800526c:	f7fc fc3e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD623, 0xA4);
 8005270:	21a4      	movs	r1, #164	; 0xa4
 8005272:	f24d 6023 	movw	r0, #54819	; 0xd623
 8005276:	f7fc fc39 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD624, 0x02);
 800527a:	2102      	movs	r1, #2
 800527c:	f24d 6024 	movw	r0, #54820	; 0xd624
 8005280:	f7fc fc34 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD625, 0xB7);
 8005284:	21b7      	movs	r1, #183	; 0xb7
 8005286:	f24d 6025 	movw	r0, #54821	; 0xd625
 800528a:	f7fc fc2f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD626, 0x02);
 800528e:	2102      	movs	r1, #2
 8005290:	f24d 6026 	movw	r0, #54822	; 0xd626
 8005294:	f7fc fc2a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD627, 0xCF);
 8005298:	21cf      	movs	r1, #207	; 0xcf
 800529a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800529e:	f7fc fc25 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD628, 0x02);
 80052a2:	2102      	movs	r1, #2
 80052a4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80052a8:	f7fc fc20 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD629, 0xDE);
 80052ac:	21de      	movs	r1, #222	; 0xde
 80052ae:	f24d 6029 	movw	r0, #54825	; 0xd629
 80052b2:	f7fc fc1b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62A, 0x02);
 80052b6:	2102      	movs	r1, #2
 80052b8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80052bc:	f7fc fc16 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62B, 0xF2);
 80052c0:	21f2      	movs	r1, #242	; 0xf2
 80052c2:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80052c6:	f7fc fc11 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62C, 0x02);
 80052ca:	2102      	movs	r1, #2
 80052cc:	f24d 602c 	movw	r0, #54828	; 0xd62c
 80052d0:	f7fc fc0c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62D, 0xFE);
 80052d4:	21fe      	movs	r1, #254	; 0xfe
 80052d6:	f24d 602d 	movw	r0, #54829	; 0xd62d
 80052da:	f7fc fc07 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62E, 0x03);
 80052de:	2103      	movs	r1, #3
 80052e0:	f24d 602e 	movw	r0, #54830	; 0xd62e
 80052e4:	f7fc fc02 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD62F, 0x10);
 80052e8:	2110      	movs	r1, #16
 80052ea:	f24d 602f 	movw	r0, #54831	; 0xd62f
 80052ee:	f7fc fbfd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD630, 0x03);
 80052f2:	2103      	movs	r1, #3
 80052f4:	f24d 6030 	movw	r0, #54832	; 0xd630
 80052f8:	f7fc fbf8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD631, 0x33);
 80052fc:	2133      	movs	r1, #51	; 0x33
 80052fe:	f24d 6031 	movw	r0, #54833	; 0xd631
 8005302:	f7fc fbf3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD632, 0x03);
 8005306:	2103      	movs	r1, #3
 8005308:	f24d 6032 	movw	r0, #54834	; 0xd632
 800530c:	f7fc fbee 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xD633, 0x6D);
 8005310:	216d      	movs	r1, #109	; 0x6d
 8005312:	f24d 6033 	movw	r0, #54835	; 0xd633
 8005316:	f7fc fbe9 	bl	8001aec <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000, 0x55);
 800531a:	2155      	movs	r1, #85	; 0x55
 800531c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005320:	f7fc fbe4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF001, 0xAA);
 8005324:	21aa      	movs	r1, #170	; 0xaa
 8005326:	f24f 0001 	movw	r0, #61441	; 0xf001
 800532a:	f7fc fbdf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF002, 0x52);
 800532e:	2152      	movs	r1, #82	; 0x52
 8005330:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005334:	f7fc fbda 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF003, 0x08);
 8005338:	2108      	movs	r1, #8
 800533a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800533e:	f7fc fbd5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xF004, 0x00);
 8005342:	2100      	movs	r1, #0
 8005344:	f24f 0004 	movw	r0, #61444	; 0xf004
 8005348:	f7fc fbd0 	bl	8001aec <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800534c:	21cc      	movs	r1, #204	; 0xcc
 800534e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8005352:	f7fc fbcb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8005356:	2100      	movs	r1, #0
 8005358:	f24b 1001 	movw	r0, #45313	; 0xb101
 800535c:	f7fc fbc6 	bl	8001aec <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600, 0x05);
 8005360:	2105      	movs	r1, #5
 8005362:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8005366:	f7fc fbc1 	bl	8001aec <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700, 0x70);
 800536a:	2170      	movs	r1, #112	; 0x70
 800536c:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8005370:	f7fc fbbc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB701, 0x70);
 8005374:	2170      	movs	r1, #112	; 0x70
 8005376:	f24b 7001 	movw	r0, #46849	; 0xb701
 800537a:	f7fc fbb7 	bl	8001aec <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800, 0x01);
 800537e:	2101      	movs	r1, #1
 8005380:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005384:	f7fc fbb2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB801, 0x03);
 8005388:	2103      	movs	r1, #3
 800538a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800538e:	f7fc fbad 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB802, 0x03);
 8005392:	2103      	movs	r1, #3
 8005394:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005398:	f7fc fba8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xB803, 0x03);
 800539c:	2103      	movs	r1, #3
 800539e:	f64b 0003 	movw	r0, #47107	; 0xb803
 80053a2:	f7fc fba3 	bl	8001aec <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00, 0x02);
 80053a6:	2102      	movs	r1, #2
 80053a8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80053ac:	f7fc fb9e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBC01, 0x00);
 80053b0:	2100      	movs	r1, #0
 80053b2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80053b6:	f7fc fb99 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xBC02, 0x00);
 80053ba:	2100      	movs	r1, #0
 80053bc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80053c0:	f7fc fb94 	bl	8001aec <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900, 0xD0);
 80053c4:	21d0      	movs	r1, #208	; 0xd0
 80053c6:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80053ca:	f7fc fb8f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xC901, 0x02);
 80053ce:	2102      	movs	r1, #2
 80053d0:	f64c 1001 	movw	r0, #51457	; 0xc901
 80053d4:	f7fc fb8a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xC902, 0x50);
 80053d8:	2150      	movs	r1, #80	; 0x50
 80053da:	f64c 1002 	movw	r0, #51458	; 0xc902
 80053de:	f7fc fb85 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xC903, 0x50);
 80053e2:	2150      	movs	r1, #80	; 0x50
 80053e4:	f64c 1003 	movw	r0, #51459	; 0xc903
 80053e8:	f7fc fb80 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xC904, 0x50);
 80053ec:	2150      	movs	r1, #80	; 0x50
 80053ee:	f64c 1004 	movw	r0, #51460	; 0xc904
 80053f2:	f7fc fb7b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x3500, 0x00);
 80053f6:	2100      	movs	r1, #0
 80053f8:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 80053fc:	f7fc fb76 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x3A00, 0x55);  //16-bit/pixel
 8005400:	2155      	movs	r1, #85	; 0x55
 8005402:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8005406:	f7fc fb71 	bl	8001aec <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800540a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800540e:	f7fc fae1 	bl	80019d4 <LCD_WR_REG>
//		delay_us(120); // us
		HAL_Delay(1);
 8005412:	2001      	movs	r0, #1
 8005414:	f7fb fb58 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x2900);
 8005418:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800541c:	f7fc fada 	bl	80019d4 <LCD_WR_REG>
 8005420:	f001 bd18 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9325)  //9325
 8005424:	4bec      	ldr	r3, [pc, #944]	; (80057d8 <LCD_Init+0x27b8>)
 8005426:	889b      	ldrh	r3, [r3, #4]
 8005428:	f249 3225 	movw	r2, #37669	; 0x9325
 800542c:	4293      	cmp	r3, r2
 800542e:	f040 80d7 	bne.w	80055e0 <LCD_Init+0x25c0>
			{
		LCD_WriteReg(0x00E5, 0x78F0);
 8005432:	f647 01f0 	movw	r1, #30960	; 0x78f0
 8005436:	20e5      	movs	r0, #229	; 0xe5
 8005438:	f7fc fb58 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100);
 800543c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005440:	2001      	movs	r0, #1
 8005442:	f7fc fb53 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005446:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800544a:	2002      	movs	r0, #2
 800544c:	f7fc fb4e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005450:	f241 0130 	movw	r1, #4144	; 0x1030
 8005454:	2003      	movs	r0, #3
 8005456:	f7fc fb49 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 800545a:	2100      	movs	r1, #0
 800545c:	2004      	movs	r0, #4
 800545e:	f7fc fb45 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005462:	f240 2102 	movw	r1, #514	; 0x202
 8005466:	2008      	movs	r0, #8
 8005468:	f7fc fb40 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 800546c:	2100      	movs	r1, #0
 800546e:	2009      	movs	r0, #9
 8005470:	f7fc fb3c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000);
 8005474:	2100      	movs	r1, #0
 8005476:	200a      	movs	r0, #10
 8005478:	f7fc fb38 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800547c:	2100      	movs	r1, #0
 800547e:	200c      	movs	r0, #12
 8005480:	f7fc fb34 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000);
 8005484:	2100      	movs	r1, #0
 8005486:	200d      	movs	r0, #13
 8005488:	f7fc fb30 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800548c:	2100      	movs	r1, #0
 800548e:	200f      	movs	r0, #15
 8005490:	f7fc fb2c 	bl	8001aec <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010, 0x0000);
 8005494:	2100      	movs	r1, #0
 8005496:	2010      	movs	r0, #16
 8005498:	f7fc fb28 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 800549c:	2107      	movs	r1, #7
 800549e:	2011      	movs	r0, #17
 80054a0:	f7fc fb24 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 80054a4:	2100      	movs	r1, #0
 80054a6:	2012      	movs	r0, #18
 80054a8:	f7fc fb20 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 80054ac:	2100      	movs	r1, #0
 80054ae:	2013      	movs	r0, #19
 80054b0:	f7fc fb1c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0000);
 80054b4:	2100      	movs	r1, #0
 80054b6:	2007      	movs	r0, #7
 80054b8:	f7fc fb18 	bl	8001aec <LCD_WriteReg>
		//vgh 
		LCD_WriteReg(0x0010, 0x1690);
 80054bc:	f241 6190 	movw	r1, #5776	; 0x1690
 80054c0:	2010      	movs	r0, #16
 80054c2:	f7fc fb13 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 80054c6:	f240 2127 	movw	r1, #551	; 0x227
 80054ca:	2011      	movs	r0, #17
 80054cc:	f7fc fb0e 	bl	8001aec <LCD_WriteReg>
		//delayms(100);
		//vregiout 
		LCD_WriteReg(0x0012, 0x009D); //0x001b
 80054d0:	219d      	movs	r1, #157	; 0x9d
 80054d2:	2012      	movs	r0, #18
 80054d4:	f7fc fb0a 	bl	8001aec <LCD_WriteReg>
		//delayms(100); 
		//vom amplitude
		LCD_WriteReg(0x0013, 0x1900);
 80054d8:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80054dc:	2013      	movs	r0, #19
 80054de:	f7fc fb05 	bl	8001aec <LCD_WriteReg>
		//delayms(100); 
		//vom H
		LCD_WriteReg(0x0029, 0x0025);
 80054e2:	2125      	movs	r1, #37	; 0x25
 80054e4:	2029      	movs	r0, #41	; 0x29
 80054e6:	f7fc fb01 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000D);
 80054ea:	210d      	movs	r1, #13
 80054ec:	202b      	movs	r0, #43	; 0x2b
 80054ee:	f7fc fafd 	bl	8001aec <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030, 0x0007);
 80054f2:	2107      	movs	r1, #7
 80054f4:	2030      	movs	r0, #48	; 0x30
 80054f6:	f7fc faf9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0303);
 80054fa:	f240 3103 	movw	r1, #771	; 0x303
 80054fe:	2031      	movs	r0, #49	; 0x31
 8005500:	f7fc faf4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0003);		// 0006
 8005504:	2103      	movs	r1, #3
 8005506:	2032      	movs	r0, #50	; 0x32
 8005508:	f7fc faf0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0206);
 800550c:	f240 2106 	movw	r1, #518	; 0x206
 8005510:	2035      	movs	r0, #53	; 0x35
 8005512:	f7fc faeb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0008);
 8005516:	2108      	movs	r1, #8
 8005518:	2036      	movs	r0, #54	; 0x36
 800551a:	f7fc fae7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0406);
 800551e:	f240 4106 	movw	r1, #1030	; 0x406
 8005522:	2037      	movs	r0, #55	; 0x37
 8005524:	f7fc fae2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0304);		//0200
 8005528:	f44f 7141 	mov.w	r1, #772	; 0x304
 800552c:	2038      	movs	r0, #56	; 0x38
 800552e:	f7fc fadd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0007);
 8005532:	2107      	movs	r1, #7
 8005534:	2039      	movs	r0, #57	; 0x39
 8005536:	f7fc fad9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0602);		// 0504
 800553a:	f240 6102 	movw	r1, #1538	; 0x602
 800553e:	203c      	movs	r0, #60	; 0x3c
 8005540:	f7fc fad4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0008);
 8005544:	2108      	movs	r1, #8
 8005546:	203d      	movs	r0, #61	; 0x3d
 8005548:	f7fc fad0 	bl	8001aec <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050, 0x0000);
 800554c:	2100      	movs	r1, #0
 800554e:	2050      	movs	r0, #80	; 0x50
 8005550:	f7fc facc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005554:	21ef      	movs	r1, #239	; 0xef
 8005556:	2051      	movs	r0, #81	; 0x51
 8005558:	f7fc fac8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800555c:	2100      	movs	r1, #0
 800555e:	2052      	movs	r0, #82	; 0x52
 8005560:	f7fc fac4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005564:	f240 113f 	movw	r1, #319	; 0x13f
 8005568:	2053      	movs	r0, #83	; 0x53
 800556a:	f7fc fabf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0xA700);
 800556e:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005572:	2060      	movs	r0, #96	; 0x60
 8005574:	f7fc faba 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005578:	2101      	movs	r1, #1
 800557a:	2061      	movs	r0, #97	; 0x61
 800557c:	f7fc fab6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005580:	2100      	movs	r1, #0
 8005582:	206a      	movs	r0, #106	; 0x6a
 8005584:	f7fc fab2 	bl	8001aec <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080, 0x0000);
 8005588:	2100      	movs	r1, #0
 800558a:	2080      	movs	r0, #128	; 0x80
 800558c:	f7fc faae 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005590:	2100      	movs	r1, #0
 8005592:	2081      	movs	r0, #129	; 0x81
 8005594:	f7fc faaa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005598:	2100      	movs	r1, #0
 800559a:	2082      	movs	r0, #130	; 0x82
 800559c:	f7fc faa6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 80055a0:	2100      	movs	r1, #0
 80055a2:	2083      	movs	r0, #131	; 0x83
 80055a4:	f7fc faa2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80055a8:	2100      	movs	r1, #0
 80055aa:	2084      	movs	r0, #132	; 0x84
 80055ac:	f7fc fa9e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80055b0:	2100      	movs	r1, #0
 80055b2:	2085      	movs	r0, #133	; 0x85
 80055b4:	f7fc fa9a 	bl	8001aec <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090, 0x0010);
 80055b8:	2110      	movs	r1, #16
 80055ba:	2090      	movs	r0, #144	; 0x90
 80055bc:	f7fc fa96 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80055c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c4:	2092      	movs	r0, #146	; 0x92
 80055c6:	f7fc fa91 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0007, 0x0133);
 80055ca:	f240 1133 	movw	r1, #307	; 0x133
 80055ce:	2007      	movs	r0, #7
 80055d0:	f7fc fa8c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x0022);		//
 80055d4:	2122      	movs	r1, #34	; 0x22
 80055d6:	2000      	movs	r0, #0
 80055d8:	f7fc fa88 	bl	8001aec <LCD_WriteReg>
 80055dc:	f001 bc3a 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x9328)		//ILI9328   OK
 80055e0:	4b7d      	ldr	r3, [pc, #500]	; (80057d8 <LCD_Init+0x27b8>)
 80055e2:	889b      	ldrh	r3, [r3, #4]
 80055e4:	f249 3228 	movw	r2, #37672	; 0x9328
 80055e8:	4293      	cmp	r3, r2
 80055ea:	f040 80f7 	bne.w	80057dc <LCD_Init+0x27bc>
			{
		LCD_WriteReg(0x00EC, 0x108F);		// internal timeing
 80055ee:	f241 018f 	movw	r1, #4239	; 0x108f
 80055f2:	20ec      	movs	r0, #236	; 0xec
 80055f4:	f7fc fa7a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x00EF, 0x1234);		// ADD
 80055f8:	f241 2134 	movw	r1, #4660	; 0x1234
 80055fc:	20ef      	movs	r0, #239	; 0xef
 80055fe:	f7fc fa75 	bl	8001aec <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);      
		//LCD_WriteReg(0x0000,0x0001);//开启内部时钟
		LCD_WriteReg(0x0001, 0x0100);
 8005602:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005606:	2001      	movs	r0, #1
 8005608:	f7fc fa70 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);        //电源开启
 800560c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005610:	2002      	movs	r0, #2
 8005612:	f7fc fa6b 	bl	8001aec <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (0 << 3));		//65K
 8005616:	f241 0130 	movw	r1, #4144	; 0x1030
 800561a:	2003      	movs	r0, #3
 800561c:	f7fc fa66 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005620:	2100      	movs	r1, #0
 8005622:	2004      	movs	r0, #4
 8005624:	f7fc fa62 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005628:	f240 2102 	movw	r1, #514	; 0x202
 800562c:	2008      	movs	r0, #8
 800562e:	f7fc fa5d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000);
 8005632:	2100      	movs	r1, #0
 8005634:	2009      	movs	r0, #9
 8005636:	f7fc fa59 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);		//display setting
 800563a:	2100      	movs	r1, #0
 800563c:	200a      	movs	r0, #10
 800563e:	f7fc fa55 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0001);		//display setting
 8005642:	2101      	movs	r1, #1
 8005644:	200c      	movs	r0, #12
 8005646:	f7fc fa51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);		//0f3c
 800564a:	2100      	movs	r1, #0
 800564c:	200d      	movs	r0, #13
 800564e:	f7fc fa4d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000f, 0x0000);
 8005652:	2100      	movs	r1, #0
 8005654:	200f      	movs	r0, #15
 8005656:	f7fc fa49 	bl	8001aec <LCD_WriteReg>
		//电源配置
		LCD_WriteReg(0x0010, 0x0000);
 800565a:	2100      	movs	r1, #0
 800565c:	2010      	movs	r0, #16
 800565e:	f7fc fa45 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005662:	2107      	movs	r1, #7
 8005664:	2011      	movs	r0, #17
 8005666:	f7fc fa41 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 800566a:	2100      	movs	r1, #0
 800566c:	2012      	movs	r0, #18
 800566e:	f7fc fa3d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005672:	2100      	movs	r1, #0
 8005674:	2013      	movs	r0, #19
 8005676:	f7fc fa39 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0001);
 800567a:	2101      	movs	r1, #1
 800567c:	2007      	movs	r0, #7
 800567e:	f7fc fa35 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005682:	2032      	movs	r0, #50	; 0x32
 8005684:	f7fb fa20 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1490);
 8005688:	f241 4190 	movw	r1, #5264	; 0x1490
 800568c:	2010      	movs	r0, #16
 800568e:	f7fc fa2d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227);
 8005692:	f240 2127 	movw	r1, #551	; 0x227
 8005696:	2011      	movs	r0, #17
 8005698:	f7fc fa28 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 800569c:	2032      	movs	r0, #50	; 0x32
 800569e:	f7fb fa13 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x008A);
 80056a2:	218a      	movs	r1, #138	; 0x8a
 80056a4:	2012      	movs	r0, #18
 80056a6:	f7fc fa21 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 80056aa:	2032      	movs	r0, #50	; 0x32
 80056ac:	f7fb fa0c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x1a00);
 80056b0:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80056b4:	2013      	movs	r0, #19
 80056b6:	f7fc fa19 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0006);
 80056ba:	2106      	movs	r1, #6
 80056bc:	2029      	movs	r0, #41	; 0x29
 80056be:	f7fc fa15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002b, 0x000d);
 80056c2:	210d      	movs	r1, #13
 80056c4:	202b      	movs	r0, #43	; 0x2b
 80056c6:	f7fc fa11 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 80056ca:	2032      	movs	r0, #50	; 0x32
 80056cc:	f7fb f9fc 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000);
 80056d0:	2100      	movs	r1, #0
 80056d2:	2020      	movs	r0, #32
 80056d4:	f7fc fa0a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80056d8:	2100      	movs	r1, #0
 80056da:	2021      	movs	r0, #33	; 0x21
 80056dc:	f7fc fa06 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 80056e0:	2032      	movs	r0, #50	; 0x32
 80056e2:	f7fb f9f1 	bl	8000ac8 <HAL_Delay>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0000);
 80056e6:	2100      	movs	r1, #0
 80056e8:	2030      	movs	r0, #48	; 0x30
 80056ea:	f7fc f9ff 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0604);
 80056ee:	f240 6104 	movw	r1, #1540	; 0x604
 80056f2:	2031      	movs	r0, #49	; 0x31
 80056f4:	f7fc f9fa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0305);
 80056f8:	f240 3105 	movw	r1, #773	; 0x305
 80056fc:	2032      	movs	r0, #50	; 0x32
 80056fe:	f7fc f9f5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0000);
 8005702:	2100      	movs	r1, #0
 8005704:	2035      	movs	r0, #53	; 0x35
 8005706:	f7fc f9f1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0C09);
 800570a:	f640 4109 	movw	r1, #3081	; 0xc09
 800570e:	2036      	movs	r0, #54	; 0x36
 8005710:	f7fc f9ec 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0204);
 8005714:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005718:	2037      	movs	r0, #55	; 0x37
 800571a:	f7fc f9e7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0301);
 800571e:	f240 3101 	movw	r1, #769	; 0x301
 8005722:	2038      	movs	r0, #56	; 0x38
 8005724:	f7fc f9e2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005728:	f240 7107 	movw	r1, #1799	; 0x707
 800572c:	2039      	movs	r0, #57	; 0x39
 800572e:	f7fc f9dd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003c, 0x0000);
 8005732:	2100      	movs	r1, #0
 8005734:	203c      	movs	r0, #60	; 0x3c
 8005736:	f7fc f9d9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003d, 0x0a0a);
 800573a:	f640 210a 	movw	r1, #2570	; 0xa0a
 800573e:	203d      	movs	r0, #61	; 0x3d
 8005740:	f7fc f9d4 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005744:	2032      	movs	r0, #50	; 0x32
 8005746:	f7fb f9bf 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0050, 0x0000); //水平GRAM起始位置
 800574a:	2100      	movs	r1, #0
 800574c:	2050      	movs	r0, #80	; 0x50
 800574e:	f7fc f9cd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef); //水平GRAM终止位置
 8005752:	21ef      	movs	r1, #239	; 0xef
 8005754:	2051      	movs	r0, #81	; 0x51
 8005756:	f7fc f9c9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); //垂直GRAM起始位置
 800575a:	2100      	movs	r1, #0
 800575c:	2052      	movs	r0, #82	; 0x52
 800575e:	f7fc f9c5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f); //垂直GRAM终止位置
 8005762:	f240 113f 	movw	r1, #319	; 0x13f
 8005766:	2053      	movs	r0, #83	; 0x53
 8005768:	f7fc f9c0 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0060, 0xa700);
 800576c:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8005770:	2060      	movs	r0, #96	; 0x60
 8005772:	f7fc f9bb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005776:	2101      	movs	r1, #1
 8005778:	2061      	movs	r0, #97	; 0x61
 800577a:	f7fc f9b7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 800577e:	2100      	movs	r1, #0
 8005780:	206a      	movs	r0, #106	; 0x6a
 8005782:	f7fc f9b3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8005786:	2100      	movs	r1, #0
 8005788:	2080      	movs	r0, #128	; 0x80
 800578a:	f7fc f9af 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 800578e:	2100      	movs	r1, #0
 8005790:	2081      	movs	r0, #129	; 0x81
 8005792:	f7fc f9ab 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005796:	2100      	movs	r1, #0
 8005798:	2082      	movs	r0, #130	; 0x82
 800579a:	f7fc f9a7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 800579e:	2100      	movs	r1, #0
 80057a0:	2083      	movs	r0, #131	; 0x83
 80057a2:	f7fc f9a3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 80057a6:	2100      	movs	r1, #0
 80057a8:	2084      	movs	r0, #132	; 0x84
 80057aa:	f7fc f99f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 80057ae:	2100      	movs	r1, #0
 80057b0:	2085      	movs	r0, #133	; 0x85
 80057b2:	f7fc f99b 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0010);
 80057b6:	2110      	movs	r1, #16
 80057b8:	2090      	movs	r0, #144	; 0x90
 80057ba:	f7fc f997 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 80057be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057c2:	2092      	movs	r0, #146	; 0x92
 80057c4:	f7fc f992 	bl	8001aec <LCD_WriteReg>
		//开启显示设置
		LCD_WriteReg(0x0007, 0x0133);
 80057c8:	f240 1133 	movw	r1, #307	; 0x133
 80057cc:	2007      	movs	r0, #7
 80057ce:	f7fc f98d 	bl	8001aec <LCD_WriteReg>
 80057d2:	f001 bb3f 	b.w	8006e54 <LCD_Init+0x3e34>
 80057d6:	bf00      	nop
 80057d8:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x9320) //测试OK.
 80057dc:	4bce      	ldr	r3, [pc, #824]	; (8005b18 <LCD_Init+0x2af8>)
 80057de:	889b      	ldrh	r3, [r3, #4]
 80057e0:	f249 3220 	movw	r2, #37664	; 0x9320
 80057e4:	4293      	cmp	r3, r2
 80057e6:	f040 80ad 	bne.w	8005944 <LCD_Init+0x2924>
			{
		LCD_WriteReg(0x00, 0x0000);
 80057ea:	2100      	movs	r1, #0
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fc f97d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x01, 0x0100);	//Driver Output Contral.
 80057f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057f6:	2001      	movs	r0, #1
 80057f8:	f7fc f978 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700);	//LCD Driver Waveform Contral.
 80057fc:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005800:	2002      	movs	r0, #2
 8005802:	f7fc f973 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030);	//Entry Mode Set.
 8005806:	f241 0130 	movw	r1, #4144	; 0x1030
 800580a:	2003      	movs	r0, #3
 800580c:	f7fc f96e 	bl	8001aec <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04, 0x0000);	//Scalling Contral.
 8005810:	2100      	movs	r1, #0
 8005812:	2004      	movs	r0, #4
 8005814:	f7fc f96a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0202);	//Display Contral 2.(0x0207)
 8005818:	f240 2102 	movw	r1, #514	; 0x202
 800581c:	2008      	movs	r0, #8
 800581e:	f7fc f965 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000);	//Display Contral 3.(0x0000)
 8005822:	2100      	movs	r1, #0
 8005824:	2009      	movs	r0, #9
 8005826:	f7fc f961 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0a, 0x0000);	//Frame Cycle Contal.(0x0000)
 800582a:	2100      	movs	r1, #0
 800582c:	200a      	movs	r0, #10
 800582e:	f7fc f95d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0c, (1 << 0));	//Extern Display Interface Contral 1.(0x0000)
 8005832:	2101      	movs	r1, #1
 8005834:	200c      	movs	r0, #12
 8005836:	f7fc f959 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0d, 0x0000);	//Frame Maker Position.
 800583a:	2100      	movs	r1, #0
 800583c:	200d      	movs	r0, #13
 800583e:	f7fc f955 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0f, 0x0000);	//Extern Display Interface Contral 2.
 8005842:	2100      	movs	r1, #0
 8005844:	200f      	movs	r0, #15
 8005846:	f7fc f951 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 800584a:	2032      	movs	r0, #50	; 0x32
 800584c:	f7fb f93c 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x07, 0x0101);	//Display Contral.
 8005850:	f240 1101 	movw	r1, #257	; 0x101
 8005854:	2007      	movs	r0, #7
 8005856:	f7fc f949 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 800585a:	2032      	movs	r0, #50	; 0x32
 800585c:	f7fb f934 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x10, (1 << 12) | (0 << 8) | (1 << 7) | (1 << 6) | (0 << 4));//Power Control 1.(0x16b0)
 8005860:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8005864:	2010      	movs	r0, #16
 8005866:	f7fc f941 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0007);								//Power Control 2.(0x0001)
 800586a:	2107      	movs	r1, #7
 800586c:	2011      	movs	r0, #17
 800586e:	f7fc f93d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x12, (1 << 8) | (1 << 4) | (0 << 0));	//Power Control 3.(0x0138)
 8005872:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005876:	2012      	movs	r0, #18
 8005878:	f7fc f938 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0b00);								//Power Control 4.
 800587c:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8005880:	2013      	movs	r0, #19
 8005882:	f7fc f933 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0000);								//Power Control 7.
 8005886:	2100      	movs	r1, #0
 8005888:	2029      	movs	r0, #41	; 0x29
 800588a:	f7fc f92f 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x2b, (1 << 14) | (1 << 4));
 800588e:	f244 0110 	movw	r1, #16400	; 0x4010
 8005892:	202b      	movs	r0, #43	; 0x2b
 8005894:	f7fc f92a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x50, 0);	//Set X Star
 8005898:	2100      	movs	r1, #0
 800589a:	2050      	movs	r0, #80	; 0x50
 800589c:	f7fc f926 	bl	8001aec <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51, 239);	//Set Y Star
 80058a0:	21ef      	movs	r1, #239	; 0xef
 80058a2:	2051      	movs	r0, #81	; 0x51
 80058a4:	f7fc f922 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x52, 0);	//Set Y End.t.
 80058a8:	2100      	movs	r1, #0
 80058aa:	2052      	movs	r0, #82	; 0x52
 80058ac:	f7fc f91e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x53, 319);	//
 80058b0:	f240 113f 	movw	r1, #319	; 0x13f
 80058b4:	2053      	movs	r0, #83	; 0x53
 80058b6:	f7fc f919 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x60, 0x2700);	//Driver Output Control.
 80058ba:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80058be:	2060      	movs	r0, #96	; 0x60
 80058c0:	f7fc f914 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x61, 0x0001);	//Driver Output Control.
 80058c4:	2101      	movs	r1, #1
 80058c6:	2061      	movs	r0, #97	; 0x61
 80058c8:	f7fc f910 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x6a, 0x0000);	//Vertical Srcoll Control.
 80058cc:	2100      	movs	r1, #0
 80058ce:	206a      	movs	r0, #106	; 0x6a
 80058d0:	f7fc f90c 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x80, 0x0000);	//Display Position? Partial Display 1.
 80058d4:	2100      	movs	r1, #0
 80058d6:	2080      	movs	r0, #128	; 0x80
 80058d8:	f7fc f908 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000);	//RAM Address Start? Partial Display 1.
 80058dc:	2100      	movs	r1, #0
 80058de:	2081      	movs	r0, #129	; 0x81
 80058e0:	f7fc f904 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000);	//RAM Address End-Partial Display 1.
 80058e4:	2100      	movs	r1, #0
 80058e6:	2082      	movs	r0, #130	; 0x82
 80058e8:	f7fc f900 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000);	//Displsy Position? Partial Display 2.
 80058ec:	2100      	movs	r1, #0
 80058ee:	2083      	movs	r0, #131	; 0x83
 80058f0:	f7fc f8fc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000);	//RAM Address Start? Partial Display 2.
 80058f4:	2100      	movs	r1, #0
 80058f6:	2084      	movs	r0, #132	; 0x84
 80058f8:	f7fc f8f8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000);	//RAM Address End? Partial Display 2.
 80058fc:	2100      	movs	r1, #0
 80058fe:	2085      	movs	r0, #133	; 0x85
 8005900:	f7fc f8f4 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x90, (0 << 7) | (16 << 0));	//Frame Cycle Contral.(0x0013)
 8005904:	2110      	movs	r1, #16
 8005906:	2090      	movs	r0, #144	; 0x90
 8005908:	f7fc f8f0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);	//Panel Interface Contral 2.(0x0000)
 800590c:	2100      	movs	r1, #0
 800590e:	2092      	movs	r0, #146	; 0x92
 8005910:	f7fc f8ec 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0001);	//Panel Interface Contral 3.
 8005914:	2101      	movs	r1, #1
 8005916:	2093      	movs	r0, #147	; 0x93
 8005918:	f7fc f8e8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);	//Frame Cycle Contral.(0x0110)
 800591c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005920:	2095      	movs	r0, #149	; 0x95
 8005922:	f7fc f8e3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x97, (0 << 8));	//
 8005926:	2100      	movs	r1, #0
 8005928:	2097      	movs	r0, #151	; 0x97
 800592a:	f7fc f8df 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x98, 0x0000);	//Frame Cycle Contral.
 800592e:	2100      	movs	r1, #0
 8005930:	2098      	movs	r0, #152	; 0x98
 8005932:	f7fc f8db 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);	//(0x0173)
 8005936:	f240 1173 	movw	r1, #371	; 0x173
 800593a:	2007      	movs	r0, #7
 800593c:	f7fc f8d6 	bl	8001aec <LCD_WriteReg>
 8005940:	f001 ba88 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0X9331)	//OK |/|/|
 8005944:	4b74      	ldr	r3, [pc, #464]	; (8005b18 <LCD_Init+0x2af8>)
 8005946:	889b      	ldrh	r3, [r3, #4]
 8005948:	f249 3231 	movw	r2, #37681	; 0x9331
 800594c:	4293      	cmp	r3, r2
 800594e:	f040 80e5 	bne.w	8005b1c <LCD_Init+0x2afc>
			{
		LCD_WriteReg(0x00E7, 0x1014);
 8005952:	f241 0114 	movw	r1, #4116	; 0x1014
 8005956:	20e7      	movs	r0, #231	; 0xe7
 8005958:	f7fc f8c8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 800595c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005960:	2001      	movs	r0, #1
 8005962:	f7fc f8c3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8005966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800596a:	2002      	movs	r0, #2
 800596c:	f7fc f8be 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, (1 << 12) | (3 << 4) | (1 << 3)); //65K
 8005970:	f241 0138 	movw	r1, #4152	; 0x1038
 8005974:	2003      	movs	r0, #3
 8005976:	f7fc f8b9 	bl	8001aec <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 800597a:	f240 2102 	movw	r1, #514	; 0x202
 800597e:	2008      	movs	r0, #8
 8005980:	f7fc f8b4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8005984:	2100      	movs	r1, #0
 8005986:	2009      	movs	r0, #9
 8005988:	f7fc f8b0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 800598c:	2100      	movs	r1, #0
 800598e:	200a      	movs	r0, #10
 8005990:	f7fc f8ac 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005994:	2100      	movs	r1, #0
 8005996:	200c      	movs	r0, #12
 8005998:	f7fc f8a8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 800599c:	2100      	movs	r1, #0
 800599e:	200d      	movs	r0, #13
 80059a0:	f7fc f8a4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 80059a4:	2100      	movs	r1, #0
 80059a6:	200f      	movs	r0, #15
 80059a8:	f7fc f8a0 	bl	8001aec <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80059ac:	2100      	movs	r1, #0
 80059ae:	2010      	movs	r0, #16
 80059b0:	f7fc f89c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 80059b4:	2107      	movs	r1, #7
 80059b6:	2011      	movs	r0, #17
 80059b8:	f7fc f898 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 80059bc:	2100      	movs	r1, #0
 80059be:	2012      	movs	r0, #18
 80059c0:	f7fc f894 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 80059c4:	2100      	movs	r1, #0
 80059c6:	2013      	movs	r0, #19
 80059c8:	f7fc f890 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 80059cc:	20c8      	movs	r0, #200	; 0xc8
 80059ce:	f7fb f87b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 80059d2:	f241 6190 	movw	r1, #5776	; 0x1690
 80059d6:	2010      	movs	r0, #16
 80059d8:	f7fc f888 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 80059dc:	f240 2127 	movw	r1, #551	; 0x227
 80059e0:	2011      	movs	r0, #17
 80059e2:	f7fc f883 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80059e6:	2032      	movs	r0, #50	; 0x32
 80059e8:	f7fb f86e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 80059ec:	210c      	movs	r1, #12
 80059ee:	2012      	movs	r0, #18
 80059f0:	f7fc f87c 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 80059f4:	2032      	movs	r0, #50	; 0x32
 80059f6:	f7fb f867 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 80059fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059fe:	2013      	movs	r0, #19
 8005a00:	f7fc f874 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8005a04:	2111      	movs	r1, #17
 8005a06:	2029      	movs	r0, #41	; 0x29
 8005a08:	f7fc f870 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8005a0c:	210b      	movs	r1, #11
 8005a0e:	202b      	movs	r0, #43	; 0x2b
 8005a10:	f7fc f86c 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005a14:	2032      	movs	r0, #50	; 0x32
 8005a16:	f7fb f857 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	2020      	movs	r0, #32
 8005a1e:	f7fc f865 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8005a22:	f240 113f 	movw	r1, #319	; 0x13f
 8005a26:	2021      	movs	r0, #33	; 0x21
 8005a28:	f7fc f860 	bl	8001aec <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	2030      	movs	r0, #48	; 0x30
 8005a30:	f7fc f85c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8005a34:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005a38:	2031      	movs	r0, #49	; 0x31
 8005a3a:	f7fc f857 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005a3e:	2100      	movs	r1, #0
 8005a40:	2032      	movs	r0, #50	; 0x32
 8005a42:	f7fc f853 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005a46:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005a4a:	2035      	movs	r0, #53	; 0x35
 8005a4c:	f7fc f84e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8005a50:	f241 610a 	movw	r1, #5642	; 0x160a
 8005a54:	2036      	movs	r0, #54	; 0x36
 8005a56:	f7fc f849 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005a5a:	f240 7107 	movw	r1, #1799	; 0x707
 8005a5e:	2037      	movs	r0, #55	; 0x37
 8005a60:	f7fc f844 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8005a64:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005a68:	2038      	movs	r0, #56	; 0x38
 8005a6a:	f7fc f83f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005a6e:	f240 7107 	movw	r1, #1799	; 0x707
 8005a72:	2039      	movs	r0, #57	; 0x39
 8005a74:	f7fc f83a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005a78:	f240 4102 	movw	r1, #1026	; 0x402
 8005a7c:	203c      	movs	r0, #60	; 0x3c
 8005a7e:	f7fc f835 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8005a82:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005a86:	203d      	movs	r0, #61	; 0x3d
 8005a88:	f7fc f830 	bl	8001aec <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	2050      	movs	r0, #80	; 0x50
 8005a90:	f7fc f82c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8005a94:	21ef      	movs	r1, #239	; 0xef
 8005a96:	2051      	movs	r0, #81	; 0x51
 8005a98:	f7fc f828 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2052      	movs	r0, #82	; 0x52
 8005aa0:	f7fc f824 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8005aa4:	f240 113f 	movw	r1, #319	; 0x13f
 8005aa8:	2053      	movs	r0, #83	; 0x53
 8005aaa:	f7fc f81f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005aae:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005ab2:	2060      	movs	r0, #96	; 0x60
 8005ab4:	f7fc f81a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV 
 8005ab8:	2101      	movs	r1, #1
 8005aba:	2061      	movs	r0, #97	; 0x61
 8005abc:	f7fc f816 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005ac0:	2100      	movs	r1, #0
 8005ac2:	206a      	movs	r0, #106	; 0x6a
 8005ac4:	f7fc f812 	bl	8001aec <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005ac8:	2100      	movs	r1, #0
 8005aca:	2080      	movs	r0, #128	; 0x80
 8005acc:	f7fc f80e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	2081      	movs	r0, #129	; 0x81
 8005ad4:	f7fc f80a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005ad8:	2100      	movs	r1, #0
 8005ada:	2082      	movs	r0, #130	; 0x82
 8005adc:	f7fc f806 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	2083      	movs	r0, #131	; 0x83
 8005ae4:	f7fc f802 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005ae8:	2100      	movs	r1, #0
 8005aea:	2084      	movs	r0, #132	; 0x84
 8005aec:	f7fb fffe 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005af0:	2100      	movs	r1, #0
 8005af2:	2085      	movs	r0, #133	; 0x85
 8005af4:	f7fb fffa 	bl	8001aec <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005af8:	2110      	movs	r1, #16
 8005afa:	2090      	movs	r0, #144	; 0x90
 8005afc:	f7fb fff6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005b00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b04:	2092      	movs	r0, #146	; 0x92
 8005b06:	f7fb fff1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8005b0a:	f240 1133 	movw	r1, #307	; 0x133
 8005b0e:	2007      	movs	r0, #7
 8005b10:	f7fb ffec 	bl	8001aec <LCD_WriteReg>
 8005b14:	f001 b99e 	b.w	8006e54 <LCD_Init+0x3e34>
 8005b18:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x5408) {
 8005b1c:	4be2      	ldr	r3, [pc, #904]	; (8005ea8 <LCD_Init+0x2e88>)
 8005b1e:	889b      	ldrh	r3, [r3, #4]
 8005b20:	f245 4208 	movw	r2, #21512	; 0x5408
 8005b24:	4293      	cmp	r3, r2
 8005b26:	f040 80a3 	bne.w	8005c70 <LCD_Init+0x2c50>
		LCD_WriteReg(0x01, 0x0100);
 8005b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b2e:	2001      	movs	r0, #1
 8005b30:	f7fb ffdc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x02, 0x0700); //LCD Driving Waveform Contral
 8005b34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005b38:	2002      	movs	r0, #2
 8005b3a:	f7fb ffd7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x03, 0x1030); //Entry Mode设置
 8005b3e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005b42:	2003      	movs	r0, #3
 8005b44:	f7fb ffd2 	bl	8001aec <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04, 0x0000); //Scalling Control register
 8005b48:	2100      	movs	r1, #0
 8005b4a:	2004      	movs	r0, #4
 8005b4c:	f7fb ffce 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x08, 0x0207); //Display Control 2
 8005b50:	f240 2107 	movw	r1, #519	; 0x207
 8005b54:	2008      	movs	r0, #8
 8005b56:	f7fb ffc9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x09, 0x0000); //Display Control 3
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	2009      	movs	r0, #9
 8005b5e:	f7fb ffc5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0A, 0x0000); //Frame Cycle Control
 8005b62:	2100      	movs	r1, #0
 8005b64:	200a      	movs	r0, #10
 8005b66:	f7fb ffc1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0C, 0x0000); //External Display Interface Control 1
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	200c      	movs	r0, #12
 8005b6e:	f7fb ffbd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0D, 0x0000); //Frame Maker Position
 8005b72:	2100      	movs	r1, #0
 8005b74:	200d      	movs	r0, #13
 8005b76:	f7fb ffb9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0F, 0x0000); //External Display Interface Control 2
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	200f      	movs	r0, #15
 8005b7e:	f7fb ffb5 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005b82:	2014      	movs	r0, #20
 8005b84:	f7fa ffa0 	bl	8000ac8 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10, 0x16B0); //0x14B0 //Power Control 1
 8005b88:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005b8c:	2010      	movs	r0, #16
 8005b8e:	f7fb ffad 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x11, 0x0001); //0x0007 //Power Control 2
 8005b92:	2101      	movs	r1, #1
 8005b94:	2011      	movs	r0, #17
 8005b96:	f7fb ffa9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x17, 0x0001); //0x0000 //Power Control 3
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	2017      	movs	r0, #23
 8005b9e:	f7fb ffa5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x12, 0x0138); //0x013B //Power Control 4
 8005ba2:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005ba6:	2012      	movs	r0, #18
 8005ba8:	f7fb ffa0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x13, 0x0800); //0x0800 //Power Control 5
 8005bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bb0:	2013      	movs	r0, #19
 8005bb2:	f7fb ff9b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x29, 0x0009); //NVM read data 2
 8005bb6:	2109      	movs	r1, #9
 8005bb8:	2029      	movs	r0, #41	; 0x29
 8005bba:	f7fb ff97 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x2a, 0x0009); //NVM read data 3
 8005bbe:	2109      	movs	r1, #9
 8005bc0:	202a      	movs	r0, #42	; 0x2a
 8005bc2:	f7fb ff93 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0xa4, 0x0000);
 8005bc6:	2100      	movs	r1, #0
 8005bc8:	20a4      	movs	r0, #164	; 0xa4
 8005bca:	f7fb ff8f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x50, 0x0000); //设置操作窗口的X轴开始列
 8005bce:	2100      	movs	r1, #0
 8005bd0:	2050      	movs	r0, #80	; 0x50
 8005bd2:	f7fb ff8b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x51, 0x00EF); //设置操作窗口的X轴结束列
 8005bd6:	21ef      	movs	r1, #239	; 0xef
 8005bd8:	2051      	movs	r0, #81	; 0x51
 8005bda:	f7fb ff87 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x52, 0x0000); //设置操作窗口的Y轴开始行
 8005bde:	2100      	movs	r1, #0
 8005be0:	2052      	movs	r0, #82	; 0x52
 8005be2:	f7fb ff83 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x53, 0x013F); //设置操作窗口的Y轴结束行
 8005be6:	f240 113f 	movw	r1, #319	; 0x13f
 8005bea:	2053      	movs	r0, #83	; 0x53
 8005bec:	f7fb ff7e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x60, 0x2700); //Driver Output Control
 8005bf0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005bf4:	2060      	movs	r0, #96	; 0x60
 8005bf6:	f7fb ff79 	bl	8001aec <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61, 0x0001); //Driver Output Control
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	2061      	movs	r0, #97	; 0x61
 8005bfe:	f7fb ff75 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x6A, 0x0000); //Vertical Scroll Control
 8005c02:	2100      	movs	r1, #0
 8005c04:	206a      	movs	r0, #106	; 0x6a
 8005c06:	f7fb ff71 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x80, 0x0000); //Display Position – Partial Display 1
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	2080      	movs	r0, #128	; 0x80
 8005c0e:	f7fb ff6d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x81, 0x0000); //RAM Address Start – Partial Display 1
 8005c12:	2100      	movs	r1, #0
 8005c14:	2081      	movs	r0, #129	; 0x81
 8005c16:	f7fb ff69 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x82, 0x0000); //RAM address End - Partial Display 1
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	2082      	movs	r0, #130	; 0x82
 8005c1e:	f7fb ff65 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x83, 0x0000); //Display Position – Partial Display 2
 8005c22:	2100      	movs	r1, #0
 8005c24:	2083      	movs	r0, #131	; 0x83
 8005c26:	f7fb ff61 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x84, 0x0000); //RAM Address Start – Partial Display 2
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	2084      	movs	r0, #132	; 0x84
 8005c2e:	f7fb ff5d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x85, 0x0000); //RAM address End – Partail Display2
 8005c32:	2100      	movs	r1, #0
 8005c34:	2085      	movs	r0, #133	; 0x85
 8005c36:	f7fb ff59 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x90, 0x0013); //Frame Cycle Control
 8005c3a:	2113      	movs	r1, #19
 8005c3c:	2090      	movs	r0, #144	; 0x90
 8005c3e:	f7fb ff55 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x92, 0x0000);  //Panel Interface Control 2
 8005c42:	2100      	movs	r1, #0
 8005c44:	2092      	movs	r0, #146	; 0x92
 8005c46:	f7fb ff51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x93, 0x0003); //Panel Interface control 3
 8005c4a:	2103      	movs	r1, #3
 8005c4c:	2093      	movs	r0, #147	; 0x93
 8005c4e:	f7fb ff4d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x95, 0x0110);  //Frame Cycle Control
 8005c52:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005c56:	2095      	movs	r0, #149	; 0x95
 8005c58:	f7fb ff48 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x07, 0x0173);
 8005c5c:	f240 1173 	movw	r1, #371	; 0x173
 8005c60:	2007      	movs	r0, #7
 8005c62:	f7fb ff43 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005c66:	2032      	movs	r0, #50	; 0x32
 8005c68:	f7fa ff2e 	bl	8000ac8 <HAL_Delay>
 8005c6c:	f001 b8f2 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x1505)  //OK
 8005c70:	4b8d      	ldr	r3, [pc, #564]	; (8005ea8 <LCD_Init+0x2e88>)
 8005c72:	889b      	ldrh	r3, [r3, #4]
 8005c74:	f241 5205 	movw	r2, #5381	; 0x1505
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	f040 8117 	bne.w	8005eac <LCD_Init+0x2e8c>
			{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
		LCD_WriteReg(0x0007, 0x0000);
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2007      	movs	r0, #7
 8005c82:	f7fb ff33 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005c86:	2032      	movs	r0, #50	; 0x32
 8005c88:	f7fa ff1e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x011C);  //0x011A   why need to set several times?
 8005c8c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005c90:	2012      	movs	r0, #18
 8005c92:	f7fb ff2b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x00A4, 0x0001);  //NVM
 8005c96:	2101      	movs	r1, #1
 8005c98:	20a4      	movs	r0, #164	; 0xa4
 8005c9a:	f7fb ff27 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x000F);
 8005c9e:	210f      	movs	r1, #15
 8005ca0:	2008      	movs	r0, #8
 8005ca2:	f7fb ff23 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0008);
 8005ca6:	2108      	movs	r1, #8
 8005ca8:	200a      	movs	r0, #10
 8005caa:	f7fb ff1f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0008);
 8005cae:	2108      	movs	r1, #8
 8005cb0:	200d      	movs	r0, #13
 8005cb2:	f7fb ff1b 	bl	8001aec <LCD_WriteReg>
		//伽马校正
		LCD_WriteReg(0x0030, 0x0707);
 8005cb6:	f240 7107 	movw	r1, #1799	; 0x707
 8005cba:	2030      	movs	r0, #48	; 0x30
 8005cbc:	f7fb ff16 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0007); //0x0707
 8005cc0:	2107      	movs	r1, #7
 8005cc2:	2031      	movs	r0, #49	; 0x31
 8005cc4:	f7fb ff12 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0603);
 8005cc8:	f240 6103 	movw	r1, #1539	; 0x603
 8005ccc:	2032      	movs	r0, #50	; 0x32
 8005cce:	f7fb ff0d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0700);
 8005cd2:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005cd6:	2033      	movs	r0, #51	; 0x33
 8005cd8:	f7fb ff08 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0202);
 8005cdc:	f240 2102 	movw	r1, #514	; 0x202
 8005ce0:	2034      	movs	r0, #52	; 0x34
 8005ce2:	f7fb ff03 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0002); //?0x0606
 8005ce6:	2102      	movs	r1, #2
 8005ce8:	2035      	movs	r0, #53	; 0x35
 8005cea:	f7fb feff 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x1F0F);
 8005cee:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8005cf2:	2036      	movs	r0, #54	; 0x36
 8005cf4:	f7fb fefa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707); //0x0f0f  0x0105
 8005cf8:	f240 7107 	movw	r1, #1799	; 0x707
 8005cfc:	2037      	movs	r0, #55	; 0x37
 8005cfe:	f7fb fef5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0000);
 8005d02:	2100      	movs	r1, #0
 8005d04:	2038      	movs	r0, #56	; 0x38
 8005d06:	f7fb fef1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0000);
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2039      	movs	r0, #57	; 0x39
 8005d0e:	f7fb feed 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0707);
 8005d12:	f240 7107 	movw	r1, #1799	; 0x707
 8005d16:	203a      	movs	r0, #58	; 0x3a
 8005d18:	f7fb fee8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0000); //0x0303
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	203b      	movs	r0, #59	; 0x3b
 8005d20:	f7fb fee4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0007); //?0x0707
 8005d24:	2107      	movs	r1, #7
 8005d26:	203c      	movs	r0, #60	; 0x3c
 8005d28:	f7fb fee0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0000); //0x1313//0x1f08
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	203d      	movs	r0, #61	; 0x3d
 8005d30:	f7fb fedc 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005d34:	2032      	movs	r0, #50	; 0x32
 8005d36:	f7fa fec7 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0001);
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	2007      	movs	r0, #7
 8005d3e:	f7fb fed5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0001); //开启电源
 8005d42:	2101      	movs	r1, #1
 8005d44:	2017      	movs	r0, #23
 8005d46:	f7fb fed1 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(50);
 8005d4a:	2032      	movs	r0, #50	; 0x32
 8005d4c:	f7fa febc 	bl	8000ac8 <HAL_Delay>
		//电源配置
		LCD_WriteReg(0x0010, 0x17A0);
 8005d50:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8005d54:	2010      	movs	r0, #16
 8005d56:	f7fb fec9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0217); //reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8005d5a:	f240 2117 	movw	r1, #535	; 0x217
 8005d5e:	2011      	movs	r0, #17
 8005d60:	f7fb fec4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x011E); //0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8005d64:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005d68:	2012      	movs	r0, #18
 8005d6a:	f7fb febf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0F00); //VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8005d6e:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005d72:	2013      	movs	r0, #19
 8005d74:	f7fb feba 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x0000);
 8005d78:	2100      	movs	r1, #0
 8005d7a:	202a      	movs	r0, #42	; 0x2a
 8005d7c:	f7fb feb6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x000A); //0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8005d80:	210a      	movs	r1, #10
 8005d82:	2029      	movs	r0, #41	; 0x29
 8005d84:	f7fb feb2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x013E); // 0x013C  power supply on
 8005d88:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005d8c:	2012      	movs	r0, #18
 8005d8e:	f7fb fead 	bl	8001aec <LCD_WriteReg>
		//Coordinates Control//
		LCD_WriteReg(0x0050, 0x0000);        //0x0e00
 8005d92:	2100      	movs	r1, #0
 8005d94:	2050      	movs	r0, #80	; 0x50
 8005d96:	f7fb fea9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF);
 8005d9a:	21ef      	movs	r1, #239	; 0xef
 8005d9c:	2051      	movs	r0, #81	; 0x51
 8005d9e:	f7fb fea5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005da2:	2100      	movs	r1, #0
 8005da4:	2052      	movs	r0, #82	; 0x52
 8005da6:	f7fb fea1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8005daa:	f240 113f 	movw	r1, #319	; 0x13f
 8005dae:	2053      	movs	r0, #83	; 0x53
 8005db0:	f7fb fe9c 	bl	8001aec <LCD_WriteReg>
		//Pannel Image Control//
		LCD_WriteReg(0x0060, 0x2700);
 8005db4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005db8:	2060      	movs	r0, #96	; 0x60
 8005dba:	f7fb fe97 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 8005dbe:	2101      	movs	r1, #1
 8005dc0:	2061      	movs	r0, #97	; 0x61
 8005dc2:	f7fb fe93 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	206a      	movs	r0, #106	; 0x6a
 8005dca:	f7fb fe8f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0080, 0x0000);
 8005dce:	2100      	movs	r1, #0
 8005dd0:	2080      	movs	r0, #128	; 0x80
 8005dd2:	f7fb fe8b 	bl	8001aec <LCD_WriteReg>
		//Partial Image Control//
		LCD_WriteReg(0x0081, 0x0000);
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	2081      	movs	r0, #129	; 0x81
 8005dda:	f7fb fe87 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005dde:	2100      	movs	r1, #0
 8005de0:	2082      	movs	r0, #130	; 0x82
 8005de2:	f7fb fe83 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005de6:	2100      	movs	r1, #0
 8005de8:	2083      	movs	r0, #131	; 0x83
 8005dea:	f7fb fe7f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005dee:	2100      	movs	r1, #0
 8005df0:	2084      	movs	r0, #132	; 0x84
 8005df2:	f7fb fe7b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005df6:	2100      	movs	r1, #0
 8005df8:	2085      	movs	r0, #133	; 0x85
 8005dfa:	f7fb fe77 	bl	8001aec <LCD_WriteReg>
		//Panel Interface Control//
		LCD_WriteReg(0x0090, 0x0013);        //0x0010 frenqucy
 8005dfe:	2113      	movs	r1, #19
 8005e00:	2090      	movs	r0, #144	; 0x90
 8005e02:	f7fb fe73 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 8005e06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005e0a:	2092      	movs	r0, #146	; 0x92
 8005e0c:	f7fb fe6e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0005);
 8005e10:	2105      	movs	r1, #5
 8005e12:	2093      	movs	r0, #147	; 0x93
 8005e14:	f7fb fe6a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0095, 0x0000);
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2095      	movs	r0, #149	; 0x95
 8005e1c:	f7fb fe66 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0097, 0x0000);
 8005e20:	2100      	movs	r1, #0
 8005e22:	2097      	movs	r0, #151	; 0x97
 8005e24:	f7fb fe62 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0098, 0x0000);
 8005e28:	2100      	movs	r1, #0
 8005e2a:	2098      	movs	r0, #152	; 0x98
 8005e2c:	f7fb fe5e 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0001, 0x0100);
 8005e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e34:	2001      	movs	r0, #1
 8005e36:	f7fb fe59 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005e3a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005e3e:	2002      	movs	r0, #2
 8005e40:	f7fb fe54 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005e44:	f241 0138 	movw	r1, #4152	; 0x1038
 8005e48:	2003      	movs	r0, #3
 8005e4a:	f7fb fe4f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0004, 0x0000);
 8005e4e:	2100      	movs	r1, #0
 8005e50:	2004      	movs	r0, #4
 8005e52:	f7fb fe4b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005e56:	2100      	movs	r1, #0
 8005e58:	200c      	movs	r0, #12
 8005e5a:	f7fb fe47 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005e5e:	2100      	movs	r1, #0
 8005e60:	200f      	movs	r0, #15
 8005e62:	f7fb fe43 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);
 8005e66:	2100      	movs	r1, #0
 8005e68:	2020      	movs	r0, #32
 8005e6a:	f7fb fe3f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 8005e6e:	2100      	movs	r1, #0
 8005e70:	2021      	movs	r0, #33	; 0x21
 8005e72:	f7fb fe3b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0021);
 8005e76:	2121      	movs	r1, #33	; 0x21
 8005e78:	2007      	movs	r0, #7
 8005e7a:	f7fb fe37 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005e7e:	2014      	movs	r0, #20
 8005e80:	f7fa fe22 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8005e84:	2161      	movs	r1, #97	; 0x61
 8005e86:	2007      	movs	r0, #7
 8005e88:	f7fb fe30 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005e8c:	2014      	movs	r0, #20
 8005e8e:	f7fa fe1b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0173);
 8005e92:	f240 1173 	movw	r1, #371	; 0x173
 8005e96:	2007      	movs	r0, #7
 8005e98:	f7fb fe28 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005e9c:	2014      	movs	r0, #20
 8005e9e:	f7fa fe13 	bl	8000ac8 <HAL_Delay>
 8005ea2:	f000 bfd7 	b.w	8006e54 <LCD_Init+0x3e34>
 8005ea6:	bf00      	nop
 8005ea8:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0xB505) {
 8005eac:	4bf0      	ldr	r3, [pc, #960]	; (8006270 <LCD_Init+0x3250>)
 8005eae:	889b      	ldrh	r3, [r3, #4]
 8005eb0:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	f040 8103 	bne.w	80060c0 <LCD_Init+0x30a0>
		LCD_WriteReg(0x0000, 0x0000);
 8005eba:	2100      	movs	r1, #0
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f7fb fe15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f7fb fe11 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005eca:	2100      	movs	r1, #0
 8005ecc:	2000      	movs	r0, #0
 8005ece:	f7fb fe0d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	f7fb fe09 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x00a4, 0x0001);
 8005eda:	2101      	movs	r1, #1
 8005edc:	20a4      	movs	r0, #164	; 0xa4
 8005ede:	f7fb fe05 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005ee2:	2014      	movs	r0, #20
 8005ee4:	f7fa fdf0 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8005ee8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005eec:	2060      	movs	r0, #96	; 0x60
 8005eee:	f7fb fdfd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005ef2:	f240 2102 	movw	r1, #514	; 0x202
 8005ef6:	2008      	movs	r0, #8
 8005ef8:	f7fb fdf8 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0214);
 8005efc:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005f00:	2030      	movs	r0, #48	; 0x30
 8005f02:	f7fb fdf3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x3715);
 8005f06:	f243 7115 	movw	r1, #14101	; 0x3715
 8005f0a:	2031      	movs	r0, #49	; 0x31
 8005f0c:	f7fb fdee 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0604);
 8005f10:	f240 6104 	movw	r1, #1540	; 0x604
 8005f14:	2032      	movs	r0, #50	; 0x32
 8005f16:	f7fb fde9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0e16);
 8005f1a:	f640 6116 	movw	r1, #3606	; 0xe16
 8005f1e:	2033      	movs	r0, #51	; 0x33
 8005f20:	f7fb fde4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x2211);
 8005f24:	f242 2111 	movw	r1, #8721	; 0x2211
 8005f28:	2034      	movs	r0, #52	; 0x34
 8005f2a:	f7fb fddf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x1500);
 8005f2e:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8005f32:	2035      	movs	r0, #53	; 0x35
 8005f34:	f7fb fdda 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x8507);
 8005f38:	f248 5107 	movw	r1, #34055	; 0x8507
 8005f3c:	2036      	movs	r0, #54	; 0x36
 8005f3e:	f7fb fdd5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x1407);
 8005f42:	f241 4107 	movw	r1, #5127	; 0x1407
 8005f46:	2037      	movs	r0, #55	; 0x37
 8005f48:	f7fb fdd0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x1403);
 8005f4c:	f241 4103 	movw	r1, #5123	; 0x1403
 8005f50:	2038      	movs	r0, #56	; 0x38
 8005f52:	f7fb fdcb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0020);
 8005f56:	2120      	movs	r1, #32
 8005f58:	2039      	movs	r0, #57	; 0x39
 8005f5a:	f7fb fdc7 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x001a);
 8005f5e:	211a      	movs	r1, #26
 8005f60:	2090      	movs	r0, #144	; 0x90
 8005f62:	f7fb fdc3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 8005f66:	2100      	movs	r1, #0
 8005f68:	2010      	movs	r0, #16
 8005f6a:	f7fb fdbf 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007);
 8005f6e:	2107      	movs	r1, #7
 8005f70:	2011      	movs	r0, #17
 8005f72:	f7fb fdbb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000);
 8005f76:	2100      	movs	r1, #0
 8005f78:	2012      	movs	r0, #18
 8005f7a:	f7fb fdb7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	2013      	movs	r0, #19
 8005f82:	f7fb fdb3 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005f86:	2014      	movs	r0, #20
 8005f88:	f7fa fd9e 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0010, 0x0730);
 8005f8c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005f90:	2010      	movs	r0, #16
 8005f92:	f7fb fdab 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0137);
 8005f96:	f240 1137 	movw	r1, #311	; 0x137
 8005f9a:	2011      	movs	r0, #17
 8005f9c:	f7fb fda6 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005fa0:	2014      	movs	r0, #20
 8005fa2:	f7fa fd91 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0012, 0x01b8);
 8005fa6:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 8005faa:	2012      	movs	r0, #18
 8005fac:	f7fb fd9e 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005fb0:	2014      	movs	r0, #20
 8005fb2:	f7fa fd89 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0013, 0x0f00);
 8005fb6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005fba:	2013      	movs	r0, #19
 8005fbc:	f7fb fd96 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002a, 0x0080);
 8005fc0:	2180      	movs	r1, #128	; 0x80
 8005fc2:	202a      	movs	r0, #42	; 0x2a
 8005fc4:	f7fb fd92 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0048);
 8005fc8:	2148      	movs	r1, #72	; 0x48
 8005fca:	2029      	movs	r0, #41	; 0x29
 8005fcc:	f7fb fd8e 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 8005fd0:	2014      	movs	r0, #20
 8005fd2:	f7fa fd79 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0001, 0x0100);
 8005fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fda:	2001      	movs	r0, #1
 8005fdc:	f7fb fd86 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0700);
 8005fe0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005fe4:	2002      	movs	r0, #2
 8005fe6:	f7fb fd81 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1038);        //扫描方向 上->下  左->右
 8005fea:	f241 0138 	movw	r1, #4152	; 0x1038
 8005fee:	2003      	movs	r0, #3
 8005ff0:	f7fb fd7c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0202);
 8005ff4:	f240 2102 	movw	r1, #514	; 0x202
 8005ff8:	2008      	movs	r0, #8
 8005ffa:	f7fb fd77 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000a, 0x0000);
 8005ffe:	2100      	movs	r1, #0
 8006000:	200a      	movs	r0, #10
 8006002:	f7fb fd73 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000c, 0x0000);
 8006006:	2100      	movs	r1, #0
 8006008:	200c      	movs	r0, #12
 800600a:	f7fb fd6f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000d, 0x0000);
 800600e:	2100      	movs	r1, #0
 8006010:	200d      	movs	r0, #13
 8006012:	f7fb fd6b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000e, 0x0030);
 8006016:	2130      	movs	r1, #48	; 0x30
 8006018:	200e      	movs	r0, #14
 800601a:	f7fb fd67 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800601e:	2100      	movs	r1, #0
 8006020:	2050      	movs	r0, #80	; 0x50
 8006022:	f7fb fd63 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00ef);
 8006026:	21ef      	movs	r1, #239	; 0xef
 8006028:	2051      	movs	r0, #81	; 0x51
 800602a:	f7fb fd5f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800602e:	2100      	movs	r1, #0
 8006030:	2052      	movs	r0, #82	; 0x52
 8006032:	f7fb fd5b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013f);
 8006036:	f240 113f 	movw	r1, #319	; 0x13f
 800603a:	2053      	movs	r0, #83	; 0x53
 800603c:	f7fb fd56 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700);
 8006040:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006044:	2060      	movs	r0, #96	; 0x60
 8006046:	f7fb fd51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001);
 800604a:	2101      	movs	r1, #1
 800604c:	2061      	movs	r0, #97	; 0x61
 800604e:	f7fb fd4d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006a, 0x0000);
 8006052:	2100      	movs	r1, #0
 8006054:	206a      	movs	r0, #106	; 0x6a
 8006056:	f7fb fd49 	bl	8001aec <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090, 0X0011);
 800605a:	2111      	movs	r1, #17
 800605c:	2090      	movs	r0, #144	; 0x90
 800605e:	f7fb fd45 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006062:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006066:	2092      	movs	r0, #146	; 0x92
 8006068:	f7fb fd40 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0093, 0x0402);
 800606c:	f240 4102 	movw	r1, #1026	; 0x402
 8006070:	2093      	movs	r0, #147	; 0x93
 8006072:	f7fb fd3b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0094, 0x0002);
 8006076:	2102      	movs	r1, #2
 8006078:	2094      	movs	r0, #148	; 0x94
 800607a:	f7fb fd37 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 800607e:	2014      	movs	r0, #20
 8006080:	f7fa fd22 	bl	8000ac8 <HAL_Delay>

		LCD_WriteReg(0x0007, 0x0001);
 8006084:	2101      	movs	r1, #1
 8006086:	2007      	movs	r0, #7
 8006088:	f7fb fd30 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 800608c:	2014      	movs	r0, #20
 800608e:	f7fa fd1b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0007, 0x0061);
 8006092:	2161      	movs	r1, #97	; 0x61
 8006094:	2007      	movs	r0, #7
 8006096:	f7fb fd29 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0173);
 800609a:	f240 1173 	movw	r1, #371	; 0x173
 800609e:	2007      	movs	r0, #7
 80060a0:	f7fb fd24 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0020, 0x0000);
 80060a4:	2100      	movs	r1, #0
 80060a6:	2020      	movs	r0, #32
 80060a8:	f7fb fd20 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);
 80060ac:	2100      	movs	r1, #0
 80060ae:	2021      	movs	r0, #33	; 0x21
 80060b0:	f7fb fd1c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x00, 0x22);
 80060b4:	2122      	movs	r1, #34	; 0x22
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7fb fd18 	bl	8001aec <LCD_WriteReg>
 80060bc:	f000 beca 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0xC505) {
 80060c0:	4b6b      	ldr	r3, [pc, #428]	; (8006270 <LCD_Init+0x3250>)
 80060c2:	889b      	ldrh	r3, [r3, #4]
 80060c4:	f24c 5205 	movw	r2, #50437	; 0xc505
 80060c8:	4293      	cmp	r3, r2
 80060ca:	f040 80d3 	bne.w	8006274 <LCD_Init+0x3254>
		LCD_WriteReg(0x0000, 0x0000);
 80060ce:	2100      	movs	r1, #0
 80060d0:	2000      	movs	r0, #0
 80060d2:	f7fb fd0b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80060d6:	2100      	movs	r1, #0
 80060d8:	2000      	movs	r0, #0
 80060da:	f7fb fd07 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 80060de:	2014      	movs	r0, #20
 80060e0:	f7fa fcf2 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0000, 0x0000);
 80060e4:	2100      	movs	r1, #0
 80060e6:	2000      	movs	r0, #0
 80060e8:	f7fb fd00 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80060ec:	2100      	movs	r1, #0
 80060ee:	2000      	movs	r0, #0
 80060f0:	f7fb fcfc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80060f4:	2100      	movs	r1, #0
 80060f6:	2000      	movs	r0, #0
 80060f8:	f7fb fcf8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0000, 0x0000);
 80060fc:	2100      	movs	r1, #0
 80060fe:	2000      	movs	r0, #0
 8006100:	f7fb fcf4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x00a4, 0x0001);
 8006104:	2101      	movs	r1, #1
 8006106:	20a4      	movs	r0, #164	; 0xa4
 8006108:	f7fb fcf0 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 800610c:	2014      	movs	r0, #20
 800610e:	f7fa fcdb 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0060, 0x2700);
 8006112:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006116:	2060      	movs	r0, #96	; 0x60
 8006118:	f7fb fce8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0008, 0x0806);
 800611c:	f640 0106 	movw	r1, #2054	; 0x806
 8006120:	2008      	movs	r0, #8
 8006122:	f7fb fce3 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0030, 0x0703);		//gamma setting
 8006126:	f240 7103 	movw	r1, #1795	; 0x703
 800612a:	2030      	movs	r0, #48	; 0x30
 800612c:	f7fb fcde 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0001);
 8006130:	2101      	movs	r1, #1
 8006132:	2031      	movs	r0, #49	; 0x31
 8006134:	f7fb fcda 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0004);
 8006138:	2104      	movs	r1, #4
 800613a:	2032      	movs	r0, #50	; 0x32
 800613c:	f7fb fcd6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0102);
 8006140:	f44f 7181 	mov.w	r1, #258	; 0x102
 8006144:	2033      	movs	r0, #51	; 0x33
 8006146:	f7fb fcd1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0300);
 800614a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800614e:	2034      	movs	r0, #52	; 0x34
 8006150:	f7fb fccc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0103);
 8006154:	f240 1103 	movw	r1, #259	; 0x103
 8006158:	2035      	movs	r0, #53	; 0x35
 800615a:	f7fb fcc7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x001F);
 800615e:	211f      	movs	r1, #31
 8006160:	2036      	movs	r0, #54	; 0x36
 8006162:	f7fb fcc3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0703);
 8006166:	f240 7103 	movw	r1, #1795	; 0x703
 800616a:	2037      	movs	r0, #55	; 0x37
 800616c:	f7fb fcbe 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0001);
 8006170:	2101      	movs	r1, #1
 8006172:	2038      	movs	r0, #56	; 0x38
 8006174:	f7fb fcba 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0004);
 8006178:	2104      	movs	r1, #4
 800617a:	2039      	movs	r0, #57	; 0x39
 800617c:	f7fb fcb6 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 8006180:	2115      	movs	r1, #21
 8006182:	2090      	movs	r0, #144	; 0x90
 8006184:	f7fb fcb2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8006188:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800618c:	2010      	movs	r0, #16
 800618e:	f7fb fcad 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0247);	//DC1,DC0,VC
 8006192:	f240 2147 	movw	r1, #583	; 0x247
 8006196:	2011      	movs	r0, #17
 8006198:	f7fb fca8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800619c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80061a0:	2012      	movs	r0, #18
 80061a2:	f7fb fca3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80061a6:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80061aa:	2013      	movs	r0, #19
 80061ac:	f7fb fc9e 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(120);
 80061b0:	2078      	movs	r0, #120	; 0x78
 80061b2:	f7fa fc89 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80061b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061ba:	2001      	movs	r0, #1
 80061bc:	f7fb fc96 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80061c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061c4:	2002      	movs	r0, #2
 80061c6:	f7fb fc91 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80061ca:	f241 0130 	movw	r1, #4144	; 0x1030
 80061ce:	2003      	movs	r0, #3
 80061d0:	f7fb fc8c 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 80061d4:	2108      	movs	r1, #8
 80061d6:	200a      	movs	r0, #10
 80061d8:	f7fb fc88 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 80061dc:	2100      	movs	r1, #0
 80061de:	200c      	movs	r0, #12
 80061e0:	f7fb fc84 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 80061e4:	2120      	movs	r1, #32
 80061e6:	200e      	movs	r0, #14
 80061e8:	f7fb fc80 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 80061ec:	2100      	movs	r1, #0
 80061ee:	200f      	movs	r0, #15
 80061f0:	f7fb fc7c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 80061f4:	2100      	movs	r1, #0
 80061f6:	2020      	movs	r0, #32
 80061f8:	f7fb fc78 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 80061fc:	2100      	movs	r1, #0
 80061fe:	2021      	movs	r0, #33	; 0x21
 8006200:	f7fb fc74 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x002A, 0x003D);	//vcom2
 8006204:	213d      	movs	r1, #61	; 0x3d
 8006206:	202a      	movs	r0, #42	; 0x2a
 8006208:	f7fb fc70 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(20);
 800620c:	2014      	movs	r0, #20
 800620e:	f7fa fc5b 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8006212:	212d      	movs	r1, #45	; 0x2d
 8006214:	2029      	movs	r0, #41	; 0x29
 8006216:	f7fb fc69 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800621a:	2100      	movs	r1, #0
 800621c:	2050      	movs	r0, #80	; 0x50
 800621e:	f7fb fc65 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8006222:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8006226:	2051      	movs	r0, #81	; 0x51
 8006228:	f7fb fc60 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800622c:	2100      	movs	r1, #0
 800622e:	2052      	movs	r0, #82	; 0x52
 8006230:	f7fb fc5c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8006234:	f240 113f 	movw	r1, #319	; 0x13f
 8006238:	2053      	movs	r0, #83	; 0x53
 800623a:	f7fb fc57 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 800623e:	2100      	movs	r1, #0
 8006240:	2061      	movs	r0, #97	; 0x61
 8006242:	f7fb fc53 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8006246:	2100      	movs	r1, #0
 8006248:	206a      	movs	r0, #106	; 0x6a
 800624a:	f7fb fc4f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0300);
 800624e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006252:	2092      	movs	r0, #146	; 0x92
 8006254:	f7fb fc4a 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0x0093, 0x0005);
 8006258:	2105      	movs	r1, #5
 800625a:	2093      	movs	r0, #147	; 0x93
 800625c:	f7fb fc46 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8006260:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006264:	2007      	movs	r0, #7
 8006266:	f7fb fc41 	bl	8001aec <LCD_WriteReg>
 800626a:	f000 bdf3 	b.w	8006e54 <LCD_Init+0x3e34>
 800626e:	bf00      	nop
 8006270:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x8989)	//OK |/|/|
 8006274:	4bc2      	ldr	r3, [pc, #776]	; (8006580 <LCD_Init+0x3560>)
 8006276:	889b      	ldrh	r3, [r3, #4]
 8006278:	f648 1289 	movw	r2, #35209	; 0x8989
 800627c:	4293      	cmp	r3, r2
 800627e:	f040 80bc 	bne.w	80063fa <LCD_Init+0x33da>
			{
		LCD_WriteReg(0x0000, 0x0001);	//打开晶振
 8006282:	2101      	movs	r1, #1
 8006284:	2000      	movs	r0, #0
 8006286:	f7fb fc31 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0xA8A4);	//0xA8A4
 800628a:	f64a 01a4 	movw	r1, #43172	; 0xa8a4
 800628e:	2003      	movs	r0, #3
 8006290:	f7fb fc2c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8006294:	2100      	movs	r1, #0
 8006296:	200c      	movs	r0, #12
 8006298:	f7fb fc28 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x080C);
 800629c:	f640 010c 	movw	r1, #2060	; 0x80c
 80062a0:	200d      	movs	r0, #13
 80062a2:	f7fb fc23 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000E, 0x2B00);
 80062a6:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
 80062aa:	200e      	movs	r0, #14
 80062ac:	f7fb fc1e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x001E, 0x00B0);
 80062b0:	21b0      	movs	r1, #176	; 0xb0
 80062b2:	201e      	movs	r0, #30
 80062b4:	f7fb fc1a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x2B3F);	//驱动输出控制320*240  0x6B3F
 80062b8:	f642 313f 	movw	r1, #11071	; 0x2b3f
 80062bc:	2001      	movs	r0, #1
 80062be:	f7fb fc15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0600);
 80062c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80062c6:	2002      	movs	r0, #2
 80062c8:	f7fb fc10 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0x0000);
 80062cc:	2100      	movs	r1, #0
 80062ce:	2010      	movs	r0, #16
 80062d0:	f7fb fc0c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x6078); //定义数据格式  16位色 		横屏 0x6058
 80062d4:	f246 0178 	movw	r1, #24696	; 0x6078
 80062d8:	2011      	movs	r0, #17
 80062da:	f7fb fc07 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0005, 0x0000);
 80062de:	2100      	movs	r1, #0
 80062e0:	2005      	movs	r0, #5
 80062e2:	f7fb fc03 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0006, 0x0000);
 80062e6:	2100      	movs	r1, #0
 80062e8:	2006      	movs	r0, #6
 80062ea:	f7fb fbff 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0016, 0xEF1C);
 80062ee:	f64e 711c 	movw	r1, #61212	; 0xef1c
 80062f2:	2016      	movs	r0, #22
 80062f4:	f7fb fbfa 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0017, 0x0003);
 80062f8:	2103      	movs	r1, #3
 80062fa:	2017      	movs	r0, #23
 80062fc:	f7fb fbf6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0233); //0x0233
 8006300:	f240 2133 	movw	r1, #563	; 0x233
 8006304:	2007      	movs	r0, #7
 8006306:	f7fb fbf1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000B, 0x0000);
 800630a:	2100      	movs	r1, #0
 800630c:	200b      	movs	r0, #11
 800630e:	f7fb fbed 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); //扫描开始地址
 8006312:	2100      	movs	r1, #0
 8006314:	200f      	movs	r0, #15
 8006316:	f7fb fbe9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0041, 0x0000);
 800631a:	2100      	movs	r1, #0
 800631c:	2041      	movs	r0, #65	; 0x41
 800631e:	f7fb fbe5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0042, 0x0000);
 8006322:	2100      	movs	r1, #0
 8006324:	2042      	movs	r0, #66	; 0x42
 8006326:	f7fb fbe1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0048, 0x0000);
 800632a:	2100      	movs	r1, #0
 800632c:	2048      	movs	r0, #72	; 0x48
 800632e:	f7fb fbdd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0049, 0x013F);
 8006332:	f240 113f 	movw	r1, #319	; 0x13f
 8006336:	2049      	movs	r0, #73	; 0x49
 8006338:	f7fb fbd8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x004A, 0x0000);
 800633c:	2100      	movs	r1, #0
 800633e:	204a      	movs	r0, #74	; 0x4a
 8006340:	f7fb fbd4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x004B, 0x0000);
 8006344:	2100      	movs	r1, #0
 8006346:	204b      	movs	r0, #75	; 0x4b
 8006348:	f7fb fbd0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0044, 0xEF00);
 800634c:	f44f 416f 	mov.w	r1, #61184	; 0xef00
 8006350:	2044      	movs	r0, #68	; 0x44
 8006352:	f7fb fbcb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0045, 0x0000);
 8006356:	2100      	movs	r1, #0
 8006358:	2045      	movs	r0, #69	; 0x45
 800635a:	f7fb fbc7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0046, 0x013F);
 800635e:	f240 113f 	movw	r1, #319	; 0x13f
 8006362:	2046      	movs	r0, #70	; 0x46
 8006364:	f7fb fbc2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0030, 0x0707);
 8006368:	f240 7107 	movw	r1, #1799	; 0x707
 800636c:	2030      	movs	r0, #48	; 0x30
 800636e:	f7fb fbbd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0204);
 8006372:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006376:	2031      	movs	r0, #49	; 0x31
 8006378:	f7fb fbb8 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0204);
 800637c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006380:	2032      	movs	r0, #50	; 0x32
 8006382:	f7fb fbb3 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0033, 0x0502);
 8006386:	f240 5102 	movw	r1, #1282	; 0x502
 800638a:	2033      	movs	r0, #51	; 0x33
 800638c:	f7fb fbae 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0034, 0x0507);
 8006390:	f240 5107 	movw	r1, #1287	; 0x507
 8006394:	2034      	movs	r0, #52	; 0x34
 8006396:	f7fb fba9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 800639a:	f44f 7101 	mov.w	r1, #516	; 0x204
 800639e:	2035      	movs	r0, #53	; 0x35
 80063a0:	f7fb fba4 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x0204);
 80063a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80063a8:	2036      	movs	r0, #54	; 0x36
 80063aa:	f7fb fb9f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0502);
 80063ae:	f240 5102 	movw	r1, #1282	; 0x502
 80063b2:	2037      	movs	r0, #55	; 0x37
 80063b4:	f7fb fb9a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003A, 0x0302);
 80063b8:	f240 3102 	movw	r1, #770	; 0x302
 80063bc:	203a      	movs	r0, #58	; 0x3a
 80063be:	f7fb fb95 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x003B, 0x0302);
 80063c2:	f240 3102 	movw	r1, #770	; 0x302
 80063c6:	203b      	movs	r0, #59	; 0x3b
 80063c8:	f7fb fb90 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0023, 0x0000);
 80063cc:	2100      	movs	r1, #0
 80063ce:	2023      	movs	r0, #35	; 0x23
 80063d0:	f7fb fb8c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0024, 0x0000);
 80063d4:	2100      	movs	r1, #0
 80063d6:	2024      	movs	r0, #36	; 0x24
 80063d8:	f7fb fb88 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x0025, 0x8000);
 80063dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063e0:	2025      	movs	r0, #37	; 0x25
 80063e2:	f7fb fb83 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x004f, 0);        //行首址0
 80063e6:	2100      	movs	r1, #0
 80063e8:	204f      	movs	r0, #79	; 0x4f
 80063ea:	f7fb fb7f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0x004e, 0);        //列首址0
 80063ee:	2100      	movs	r1, #0
 80063f0:	204e      	movs	r0, #78	; 0x4e
 80063f2:	f7fb fb7b 	bl	8001aec <LCD_WriteReg>
 80063f6:	f000 bd2d 	b.w	8006e54 <LCD_Init+0x3e34>
	} else if (lcddev.id == 0x4531)        //OK |/|/|
 80063fa:	4b61      	ldr	r3, [pc, #388]	; (8006580 <LCD_Init+0x3560>)
 80063fc:	889b      	ldrh	r3, [r3, #4]
 80063fe:	f244 5231 	movw	r2, #17713	; 0x4531
 8006402:	4293      	cmp	r3, r2
 8006404:	f040 80be 	bne.w	8006584 <LCD_Init+0x3564>
			{
		LCD_WriteReg(0X00, 0X0001);
 8006408:	2101      	movs	r1, #1
 800640a:	2000      	movs	r0, #0
 800640c:	f7fb fb6e 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(10);
 8006410:	200a      	movs	r0, #10
 8006412:	f7fa fb59 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1628);
 8006416:	f241 6128 	movw	r1, #5672	; 0x1628
 800641a:	2010      	movs	r0, #16
 800641c:	f7fb fb66 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X000e);        //0x0006
 8006420:	210e      	movs	r1, #14
 8006422:	2012      	movs	r0, #18
 8006424:	f7fb fb62 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X0A39);
 8006428:	f640 2139 	movw	r1, #2617	; 0xa39
 800642c:	2013      	movs	r0, #19
 800642e:	f7fb fb5d 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(10);
 8006432:	200a      	movs	r0, #10
 8006434:	f7fa fb48 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X11, 0X0040);
 8006438:	2140      	movs	r1, #64	; 0x40
 800643a:	2011      	movs	r0, #17
 800643c:	f7fb fb56 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X15, 0X0050);
 8006440:	2150      	movs	r1, #80	; 0x50
 8006442:	2015      	movs	r0, #21
 8006444:	f7fb fb52 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(10);
 8006448:	200a      	movs	r0, #10
 800644a:	f7fa fb3d 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X001e);        //16
 800644e:	211e      	movs	r1, #30
 8006450:	2012      	movs	r0, #18
 8006452:	f7fb fb4b 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(10);
 8006456:	200a      	movs	r0, #10
 8006458:	f7fa fb36 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X1620);
 800645c:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8006460:	2010      	movs	r0, #16
 8006462:	f7fb fb43 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X2A39);
 8006466:	f642 2139 	movw	r1, #10809	; 0x2a39
 800646a:	2013      	movs	r0, #19
 800646c:	f7fb fb3e 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(10);
 8006470:	200a      	movs	r0, #10
 8006472:	f7fa fb29 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X01, 0X0100);
 8006476:	f44f 7180 	mov.w	r1, #256	; 0x100
 800647a:	2001      	movs	r0, #1
 800647c:	f7fb fb36 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 8006480:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006484:	2002      	movs	r0, #2
 8006486:	f7fb fb31 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1038);        //改变方向的
 800648a:	f241 0138 	movw	r1, #4152	; 0x1038
 800648e:	2003      	movs	r0, #3
 8006490:	f7fb fb2c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0202);
 8006494:	f240 2102 	movw	r1, #514	; 0x202
 8006498:	2008      	movs	r0, #8
 800649a:	f7fb fb27 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800649e:	2108      	movs	r1, #8
 80064a0:	200a      	movs	r0, #10
 80064a2:	f7fb fb23 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X30, 0X0000);
 80064a6:	2100      	movs	r1, #0
 80064a8:	2030      	movs	r0, #48	; 0x30
 80064aa:	f7fb fb1f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80064ae:	f240 4102 	movw	r1, #1026	; 0x402
 80064b2:	2031      	movs	r0, #49	; 0x31
 80064b4:	f7fb fb1a 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0106);
 80064b8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80064bc:	2032      	movs	r0, #50	; 0x32
 80064be:	f7fb fb15 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0503);
 80064c2:	f240 5103 	movw	r1, #1283	; 0x503
 80064c6:	2033      	movs	r0, #51	; 0x33
 80064c8:	f7fb fb10 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0104);
 80064cc:	f44f 7182 	mov.w	r1, #260	; 0x104
 80064d0:	2034      	movs	r0, #52	; 0x34
 80064d2:	f7fb fb0b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0301);
 80064d6:	f240 3101 	movw	r1, #769	; 0x301
 80064da:	2035      	movs	r0, #53	; 0x35
 80064dc:	f7fb fb06 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 80064e0:	f240 7107 	movw	r1, #1799	; 0x707
 80064e4:	2036      	movs	r0, #54	; 0x36
 80064e6:	f7fb fb01 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 80064ea:	f240 3105 	movw	r1, #773	; 0x305
 80064ee:	2037      	movs	r0, #55	; 0x37
 80064f0:	f7fb fafc 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0208);
 80064f4:	f44f 7102 	mov.w	r1, #520	; 0x208
 80064f8:	2038      	movs	r0, #56	; 0x38
 80064fa:	f7fb faf7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0F0B);
 80064fe:	f640 710b 	movw	r1, #3851	; 0xf0b
 8006502:	2039      	movs	r0, #57	; 0x39
 8006504:	f7fb faf2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X41, 0X0002);
 8006508:	2102      	movs	r1, #2
 800650a:	2041      	movs	r0, #65	; 0x41
 800650c:	f7fb faee 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006510:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006514:	2060      	movs	r0, #96	; 0x60
 8006516:	f7fb fae9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800651a:	2101      	movs	r1, #1
 800651c:	2061      	movs	r0, #97	; 0x61
 800651e:	f7fb fae5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X0210);
 8006522:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006526:	2090      	movs	r0, #144	; 0x90
 8006528:	f7fb fae0 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X010A);
 800652c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8006530:	2092      	movs	r0, #146	; 0x92
 8006532:	f7fb fadb 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0004);
 8006536:	2104      	movs	r1, #4
 8006538:	2093      	movs	r0, #147	; 0x93
 800653a:	f7fb fad7 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0100);
 800653e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006542:	20a0      	movs	r0, #160	; 0xa0
 8006544:	f7fb fad2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 8006548:	2101      	movs	r1, #1
 800654a:	2007      	movs	r0, #7
 800654c:	f7fb face 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 8006550:	2121      	movs	r1, #33	; 0x21
 8006552:	2007      	movs	r0, #7
 8006554:	f7fb faca 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 8006558:	2123      	movs	r1, #35	; 0x23
 800655a:	2007      	movs	r0, #7
 800655c:	f7fb fac6 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 8006560:	2133      	movs	r1, #51	; 0x33
 8006562:	2007      	movs	r0, #7
 8006564:	f7fb fac2 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 8006568:	f240 1133 	movw	r1, #307	; 0x133
 800656c:	2007      	movs	r0, #7
 800656e:	f7fb fabd 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X0000);
 8006572:	2100      	movs	r1, #0
 8006574:	20a0      	movs	r0, #160	; 0xa0
 8006576:	f7fb fab9 	bl	8001aec <LCD_WriteReg>
 800657a:	f000 bc6b 	b.w	8006e54 <LCD_Init+0x3e34>
 800657e:	bf00      	nop
 8006580:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0x4535) {
 8006584:	4b5b      	ldr	r3, [pc, #364]	; (80066f4 <LCD_Init+0x36d4>)
 8006586:	889b      	ldrh	r3, [r3, #4]
 8006588:	f244 5235 	movw	r2, #17717	; 0x4535
 800658c:	4293      	cmp	r3, r2
 800658e:	f040 80b3 	bne.w	80066f8 <LCD_Init+0x36d8>
		LCD_WriteReg(0X15, 0X0030);
 8006592:	2130      	movs	r1, #48	; 0x30
 8006594:	2015      	movs	r0, #21
 8006596:	f7fb faa9 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X9A, 0X0010);
 800659a:	2110      	movs	r1, #16
 800659c:	209a      	movs	r0, #154	; 0x9a
 800659e:	f7fb faa5 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X11, 0X0020);
 80065a2:	2120      	movs	r1, #32
 80065a4:	2011      	movs	r0, #17
 80065a6:	f7fb faa1 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X10, 0X3428);
 80065aa:	f243 4128 	movw	r1, #13352	; 0x3428
 80065ae:	2010      	movs	r0, #16
 80065b0:	f7fb fa9c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X12, 0X0002);        //16
 80065b4:	2102      	movs	r1, #2
 80065b6:	2012      	movs	r0, #18
 80065b8:	f7fb fa98 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X1038);
 80065bc:	f241 0138 	movw	r1, #4152	; 0x1038
 80065c0:	2013      	movs	r0, #19
 80065c2:	f7fb fa93 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(40);
 80065c6:	2028      	movs	r0, #40	; 0x28
 80065c8:	f7fa fa7e 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X12, 0X0012);        //16
 80065cc:	2112      	movs	r1, #18
 80065ce:	2012      	movs	r0, #18
 80065d0:	f7fb fa8c 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(40);
 80065d4:	2028      	movs	r0, #40	; 0x28
 80065d6:	f7fa fa77 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X10, 0X3420);
 80065da:	f243 4120 	movw	r1, #13344	; 0x3420
 80065de:	2010      	movs	r0, #16
 80065e0:	f7fb fa84 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X13, 0X3038);
 80065e4:	f243 0138 	movw	r1, #12344	; 0x3038
 80065e8:	2013      	movs	r0, #19
 80065ea:	f7fb fa7f 	bl	8001aec <LCD_WriteReg>
		HAL_Delay(70);
 80065ee:	2046      	movs	r0, #70	; 0x46
 80065f0:	f7fa fa6a 	bl	8000ac8 <HAL_Delay>
		LCD_WriteReg(0X30, 0X0000);
 80065f4:	2100      	movs	r1, #0
 80065f6:	2030      	movs	r0, #48	; 0x30
 80065f8:	f7fb fa78 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X31, 0X0402);
 80065fc:	f240 4102 	movw	r1, #1026	; 0x402
 8006600:	2031      	movs	r0, #49	; 0x31
 8006602:	f7fb fa73 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X32, 0X0307);
 8006606:	f240 3107 	movw	r1, #775	; 0x307
 800660a:	2032      	movs	r0, #50	; 0x32
 800660c:	f7fb fa6e 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X33, 0X0304);
 8006610:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006614:	2033      	movs	r0, #51	; 0x33
 8006616:	f7fb fa69 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X34, 0X0004);
 800661a:	2104      	movs	r1, #4
 800661c:	2034      	movs	r0, #52	; 0x34
 800661e:	f7fb fa65 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X35, 0X0401);
 8006622:	f240 4101 	movw	r1, #1025	; 0x401
 8006626:	2035      	movs	r0, #53	; 0x35
 8006628:	f7fb fa60 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X36, 0X0707);
 800662c:	f240 7107 	movw	r1, #1799	; 0x707
 8006630:	2036      	movs	r0, #54	; 0x36
 8006632:	f7fb fa5b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X37, 0X0305);
 8006636:	f240 3105 	movw	r1, #773	; 0x305
 800663a:	2037      	movs	r0, #55	; 0x37
 800663c:	f7fb fa56 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X38, 0X0610);
 8006640:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006644:	2038      	movs	r0, #56	; 0x38
 8006646:	f7fb fa51 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X39, 0X0610);
 800664a:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800664e:	2039      	movs	r0, #57	; 0x39
 8006650:	f7fb fa4c 	bl	8001aec <LCD_WriteReg>

		LCD_WriteReg(0X01, 0X0100);
 8006654:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006658:	2001      	movs	r0, #1
 800665a:	f7fb fa47 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X02, 0X0300);
 800665e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006662:	2002      	movs	r0, #2
 8006664:	f7fb fa42 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X03, 0X1030);        //改变方向的
 8006668:	f241 0130 	movw	r1, #4144	; 0x1030
 800666c:	2003      	movs	r0, #3
 800666e:	f7fb fa3d 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X08, 0X0808);
 8006672:	f640 0108 	movw	r1, #2056	; 0x808
 8006676:	2008      	movs	r0, #8
 8006678:	f7fb fa38 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X0A, 0X0008);
 800667c:	2108      	movs	r1, #8
 800667e:	200a      	movs	r0, #10
 8006680:	f7fb fa34 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X60, 0X2700);
 8006684:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006688:	2060      	movs	r0, #96	; 0x60
 800668a:	f7fb fa2f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X61, 0X0001);
 800668e:	2101      	movs	r1, #1
 8006690:	2061      	movs	r0, #97	; 0x61
 8006692:	f7fb fa2b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X90, 0X013E);
 8006696:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800669a:	2090      	movs	r0, #144	; 0x90
 800669c:	f7fb fa26 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X92, 0X0100);
 80066a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066a4:	2092      	movs	r0, #146	; 0x92
 80066a6:	f7fb fa21 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X93, 0X0100);
 80066aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ae:	2093      	movs	r0, #147	; 0x93
 80066b0:	f7fb fa1c 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0XA0, 0X3000);
 80066b4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80066b8:	20a0      	movs	r0, #160	; 0xa0
 80066ba:	f7fb fa17 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0XA3, 0X0010);
 80066be:	2110      	movs	r1, #16
 80066c0:	20a3      	movs	r0, #163	; 0xa3
 80066c2:	f7fb fa13 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0001);
 80066c6:	2101      	movs	r1, #1
 80066c8:	2007      	movs	r0, #7
 80066ca:	f7fb fa0f 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0021);
 80066ce:	2121      	movs	r1, #33	; 0x21
 80066d0:	2007      	movs	r0, #7
 80066d2:	f7fb fa0b 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0023);
 80066d6:	2123      	movs	r1, #35	; 0x23
 80066d8:	2007      	movs	r0, #7
 80066da:	f7fb fa07 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0033);
 80066de:	2133      	movs	r1, #51	; 0x33
 80066e0:	2007      	movs	r0, #7
 80066e2:	f7fb fa03 	bl	8001aec <LCD_WriteReg>
		LCD_WriteReg(0X07, 0X0133);
 80066e6:	f240 1133 	movw	r1, #307	; 0x133
 80066ea:	2007      	movs	r0, #7
 80066ec:	f7fb f9fe 	bl	8001aec <LCD_WriteReg>
 80066f0:	e3b0      	b.n	8006e54 <LCD_Init+0x3e34>
 80066f2:	bf00      	nop
 80066f4:	200000bc 	.word	0x200000bc
	} else if (lcddev.id == 0X1963) {
 80066f8:	4ba8      	ldr	r3, [pc, #672]	; (800699c <LCD_Init+0x397c>)
 80066fa:	889b      	ldrh	r3, [r3, #4]
 80066fc:	f641 1263 	movw	r2, #6499	; 0x1963
 8006700:	4293      	cmp	r3, r2
 8006702:	f040 83a7 	bne.w	8006e54 <LCD_Init+0x3e34>
		LCD_WR_REG(0xE2);	//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8006706:	20e2      	movs	r0, #226	; 0xe2
 8006708:	f7fb f964 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1 
 800670c:	4ba4      	ldr	r3, [pc, #656]	; (80069a0 <LCD_Init+0x3980>)
 800670e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006712:	611a      	str	r2, [r3, #16]
 8006714:	4ba2      	ldr	r3, [pc, #648]	; (80069a0 <LCD_Init+0x3980>)
 8006716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800671a:	615a      	str	r2, [r3, #20]
 800671c:	4ba1      	ldr	r3, [pc, #644]	; (80069a4 <LCD_Init+0x3984>)
 800671e:	221d      	movs	r2, #29
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	4b9f      	ldr	r3, [pc, #636]	; (80069a0 <LCD_Init+0x3980>)
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	615a      	str	r2, [r3, #20]
 8006728:	4b9d      	ldr	r3, [pc, #628]	; (80069a0 <LCD_Init+0x3980>)
 800672a:	2280      	movs	r2, #128	; 0x80
 800672c:	611a      	str	r2, [r3, #16]
 800672e:	4b9c      	ldr	r3, [pc, #624]	; (80069a0 <LCD_Init+0x3980>)
 8006730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006734:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8006736:	4b9a      	ldr	r3, [pc, #616]	; (80069a0 <LCD_Init+0x3980>)
 8006738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800673c:	611a      	str	r2, [r3, #16]
 800673e:	4b98      	ldr	r3, [pc, #608]	; (80069a0 <LCD_Init+0x3980>)
 8006740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006744:	615a      	str	r2, [r3, #20]
 8006746:	4b97      	ldr	r3, [pc, #604]	; (80069a4 <LCD_Init+0x3984>)
 8006748:	2202      	movs	r2, #2
 800674a:	60da      	str	r2, [r3, #12]
 800674c:	4b94      	ldr	r3, [pc, #592]	; (80069a0 <LCD_Init+0x3980>)
 800674e:	2280      	movs	r2, #128	; 0x80
 8006750:	615a      	str	r2, [r3, #20]
 8006752:	4b93      	ldr	r3, [pc, #588]	; (80069a0 <LCD_Init+0x3980>)
 8006754:	2280      	movs	r2, #128	; 0x80
 8006756:	611a      	str	r2, [r3, #16]
 8006758:	4b91      	ldr	r3, [pc, #580]	; (80069a0 <LCD_Init+0x3980>)
 800675a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800675e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values   
 8006760:	4b8f      	ldr	r3, [pc, #572]	; (80069a0 <LCD_Init+0x3980>)
 8006762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006766:	611a      	str	r2, [r3, #16]
 8006768:	4b8d      	ldr	r3, [pc, #564]	; (80069a0 <LCD_Init+0x3980>)
 800676a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800676e:	615a      	str	r2, [r3, #20]
 8006770:	4b8c      	ldr	r3, [pc, #560]	; (80069a4 <LCD_Init+0x3984>)
 8006772:	2204      	movs	r2, #4
 8006774:	60da      	str	r2, [r3, #12]
 8006776:	4b8a      	ldr	r3, [pc, #552]	; (80069a0 <LCD_Init+0x3980>)
 8006778:	2280      	movs	r2, #128	; 0x80
 800677a:	615a      	str	r2, [r3, #20]
 800677c:	4b88      	ldr	r3, [pc, #544]	; (80069a0 <LCD_Init+0x3980>)
 800677e:	2280      	movs	r2, #128	; 0x80
 8006780:	611a      	str	r2, [r3, #16]
 8006782:	4b87      	ldr	r3, [pc, #540]	; (80069a0 <LCD_Init+0x3980>)
 8006784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006788:	611a      	str	r2, [r3, #16]
//		delay_us(100);
		HAL_Delay(1);
 800678a:	2001      	movs	r0, #1
 800678c:	f7fa f99c 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command
 8006790:	20e0      	movs	r0, #224	; 0xe0
 8006792:	f7fb f91f 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8006796:	4b82      	ldr	r3, [pc, #520]	; (80069a0 <LCD_Init+0x3980>)
 8006798:	f44f 7280 	mov.w	r2, #256	; 0x100
 800679c:	611a      	str	r2, [r3, #16]
 800679e:	4b80      	ldr	r3, [pc, #512]	; (80069a0 <LCD_Init+0x3980>)
 80067a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067a4:	615a      	str	r2, [r3, #20]
 80067a6:	4b7f      	ldr	r3, [pc, #508]	; (80069a4 <LCD_Init+0x3984>)
 80067a8:	2201      	movs	r2, #1
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	4b7c      	ldr	r3, [pc, #496]	; (80069a0 <LCD_Init+0x3980>)
 80067ae:	2280      	movs	r2, #128	; 0x80
 80067b0:	615a      	str	r2, [r3, #20]
 80067b2:	4b7b      	ldr	r3, [pc, #492]	; (80069a0 <LCD_Init+0x3980>)
 80067b4:	2280      	movs	r2, #128	; 0x80
 80067b6:	611a      	str	r2, [r3, #16]
 80067b8:	4b79      	ldr	r3, [pc, #484]	; (80069a0 <LCD_Init+0x3980>)
 80067ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067be:	611a      	str	r2, [r3, #16]
		HAL_Delay(10);
 80067c0:	200a      	movs	r0, #10
 80067c2:	f7fa f981 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80067c6:	20e0      	movs	r0, #224	; 0xe0
 80067c8:	f7fb f904 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock	
 80067cc:	4b74      	ldr	r3, [pc, #464]	; (80069a0 <LCD_Init+0x3980>)
 80067ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067d2:	611a      	str	r2, [r3, #16]
 80067d4:	4b72      	ldr	r3, [pc, #456]	; (80069a0 <LCD_Init+0x3980>)
 80067d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067da:	615a      	str	r2, [r3, #20]
 80067dc:	4b71      	ldr	r3, [pc, #452]	; (80069a4 <LCD_Init+0x3984>)
 80067de:	2203      	movs	r2, #3
 80067e0:	60da      	str	r2, [r3, #12]
 80067e2:	4b6f      	ldr	r3, [pc, #444]	; (80069a0 <LCD_Init+0x3980>)
 80067e4:	2280      	movs	r2, #128	; 0x80
 80067e6:	615a      	str	r2, [r3, #20]
 80067e8:	4b6d      	ldr	r3, [pc, #436]	; (80069a0 <LCD_Init+0x3980>)
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	611a      	str	r2, [r3, #16]
 80067ee:	4b6c      	ldr	r3, [pc, #432]	; (80069a0 <LCD_Init+0x3980>)
 80067f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f4:	611a      	str	r2, [r3, #16]
		HAL_Delay(12);
 80067f6:	200c      	movs	r0, #12
 80067f8:	f7fa f966 	bl	8000ac8 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80067fc:	2001      	movs	r0, #1
 80067fe:	f7fb f8e9 	bl	80019d4 <LCD_WR_REG>
		HAL_Delay(10);
 8006802:	200a      	movs	r0, #10
 8006804:	f7fa f960 	bl	8000ac8 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8006808:	20e6      	movs	r0, #230	; 0xe6
 800680a:	f7fb f8e3 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800680e:	4b64      	ldr	r3, [pc, #400]	; (80069a0 <LCD_Init+0x3980>)
 8006810:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006814:	611a      	str	r2, [r3, #16]
 8006816:	4b62      	ldr	r3, [pc, #392]	; (80069a0 <LCD_Init+0x3980>)
 8006818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800681c:	615a      	str	r2, [r3, #20]
 800681e:	4b61      	ldr	r3, [pc, #388]	; (80069a4 <LCD_Init+0x3984>)
 8006820:	222f      	movs	r2, #47	; 0x2f
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	4b5e      	ldr	r3, [pc, #376]	; (80069a0 <LCD_Init+0x3980>)
 8006826:	2280      	movs	r2, #128	; 0x80
 8006828:	615a      	str	r2, [r3, #20]
 800682a:	4b5d      	ldr	r3, [pc, #372]	; (80069a0 <LCD_Init+0x3980>)
 800682c:	2280      	movs	r2, #128	; 0x80
 800682e:	611a      	str	r2, [r3, #16]
 8006830:	4b5b      	ldr	r3, [pc, #364]	; (80069a0 <LCD_Init+0x3980>)
 8006832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006836:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8006838:	4b59      	ldr	r3, [pc, #356]	; (80069a0 <LCD_Init+0x3980>)
 800683a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800683e:	611a      	str	r2, [r3, #16]
 8006840:	4b57      	ldr	r3, [pc, #348]	; (80069a0 <LCD_Init+0x3980>)
 8006842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006846:	615a      	str	r2, [r3, #20]
 8006848:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <LCD_Init+0x3984>)
 800684a:	22ff      	movs	r2, #255	; 0xff
 800684c:	60da      	str	r2, [r3, #12]
 800684e:	4b54      	ldr	r3, [pc, #336]	; (80069a0 <LCD_Init+0x3980>)
 8006850:	2280      	movs	r2, #128	; 0x80
 8006852:	615a      	str	r2, [r3, #20]
 8006854:	4b52      	ldr	r3, [pc, #328]	; (80069a0 <LCD_Init+0x3980>)
 8006856:	2280      	movs	r2, #128	; 0x80
 8006858:	611a      	str	r2, [r3, #16]
 800685a:	4b51      	ldr	r3, [pc, #324]	; (80069a0 <LCD_Init+0x3980>)
 800685c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006860:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFF);
 8006862:	4b4f      	ldr	r3, [pc, #316]	; (80069a0 <LCD_Init+0x3980>)
 8006864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006868:	611a      	str	r2, [r3, #16]
 800686a:	4b4d      	ldr	r3, [pc, #308]	; (80069a0 <LCD_Init+0x3980>)
 800686c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006870:	615a      	str	r2, [r3, #20]
 8006872:	4b4c      	ldr	r3, [pc, #304]	; (80069a4 <LCD_Init+0x3984>)
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	60da      	str	r2, [r3, #12]
 8006878:	4b49      	ldr	r3, [pc, #292]	; (80069a0 <LCD_Init+0x3980>)
 800687a:	2280      	movs	r2, #128	; 0x80
 800687c:	615a      	str	r2, [r3, #20]
 800687e:	4b48      	ldr	r3, [pc, #288]	; (80069a0 <LCD_Init+0x3980>)
 8006880:	2280      	movs	r2, #128	; 0x80
 8006882:	611a      	str	r2, [r3, #16]
 8006884:	4b46      	ldr	r3, [pc, #280]	; (80069a0 <LCD_Init+0x3980>)
 8006886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800688a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB0);		//设置LCD模式
 800688c:	20b0      	movs	r0, #176	; 0xb0
 800688e:	f7fb f8a1 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8006892:	4b43      	ldr	r3, [pc, #268]	; (80069a0 <LCD_Init+0x3980>)
 8006894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006898:	611a      	str	r2, [r3, #16]
 800689a:	4b41      	ldr	r3, [pc, #260]	; (80069a0 <LCD_Init+0x3980>)
 800689c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a0:	615a      	str	r2, [r3, #20]
 80068a2:	4b40      	ldr	r3, [pc, #256]	; (80069a4 <LCD_Init+0x3984>)
 80068a4:	2220      	movs	r2, #32
 80068a6:	60da      	str	r2, [r3, #12]
 80068a8:	4b3d      	ldr	r3, [pc, #244]	; (80069a0 <LCD_Init+0x3980>)
 80068aa:	2280      	movs	r2, #128	; 0x80
 80068ac:	615a      	str	r2, [r3, #20]
 80068ae:	4b3c      	ldr	r3, [pc, #240]	; (80069a0 <LCD_Init+0x3980>)
 80068b0:	2280      	movs	r2, #128	; 0x80
 80068b2:	611a      	str	r2, [r3, #16]
 80068b4:	4b3a      	ldr	r3, [pc, #232]	; (80069a0 <LCD_Init+0x3980>)
 80068b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ba:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//TFT 模式 
 80068bc:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <LCD_Init+0x3980>)
 80068be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068c2:	611a      	str	r2, [r3, #16]
 80068c4:	4b36      	ldr	r3, [pc, #216]	; (80069a0 <LCD_Init+0x3980>)
 80068c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068ca:	615a      	str	r2, [r3, #20]
 80068cc:	4b35      	ldr	r3, [pc, #212]	; (80069a4 <LCD_Init+0x3984>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	4b33      	ldr	r3, [pc, #204]	; (80069a0 <LCD_Init+0x3980>)
 80068d4:	2280      	movs	r2, #128	; 0x80
 80068d6:	615a      	str	r2, [r3, #20]
 80068d8:	4b31      	ldr	r3, [pc, #196]	; (80069a0 <LCD_Init+0x3980>)
 80068da:	2280      	movs	r2, #128	; 0x80
 80068dc:	611a      	str	r2, [r3, #16]
 80068de:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <LCD_Init+0x3980>)
 80068e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e4:	611a      	str	r2, [r3, #16]

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);		//设置LCD水平像素
 80068e6:	4b2e      	ldr	r3, [pc, #184]	; (80069a0 <LCD_Init+0x3980>)
 80068e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80068ec:	611a      	str	r2, [r3, #16]
 80068ee:	4b2c      	ldr	r3, [pc, #176]	; (80069a0 <LCD_Init+0x3980>)
 80068f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068f4:	615a      	str	r2, [r3, #20]
 80068f6:	4b2b      	ldr	r3, [pc, #172]	; (80069a4 <LCD_Init+0x3984>)
 80068f8:	2203      	movs	r2, #3
 80068fa:	60da      	str	r2, [r3, #12]
 80068fc:	4b28      	ldr	r3, [pc, #160]	; (80069a0 <LCD_Init+0x3980>)
 80068fe:	2280      	movs	r2, #128	; 0x80
 8006900:	615a      	str	r2, [r3, #20]
 8006902:	4b27      	ldr	r3, [pc, #156]	; (80069a0 <LCD_Init+0x3980>)
 8006904:	2280      	movs	r2, #128	; 0x80
 8006906:	611a      	str	r2, [r3, #16]
 8006908:	4b25      	ldr	r3, [pc, #148]	; (80069a0 <LCD_Init+0x3980>)
 800690a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8006910:	4b23      	ldr	r3, [pc, #140]	; (80069a0 <LCD_Init+0x3980>)
 8006912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006916:	611a      	str	r2, [r3, #16]
 8006918:	4b21      	ldr	r3, [pc, #132]	; (80069a0 <LCD_Init+0x3980>)
 800691a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800691e:	615a      	str	r2, [r3, #20]
 8006920:	4b20      	ldr	r3, [pc, #128]	; (80069a4 <LCD_Init+0x3984>)
 8006922:	f240 321f 	movw	r2, #799	; 0x31f
 8006926:	60da      	str	r2, [r3, #12]
 8006928:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <LCD_Init+0x3980>)
 800692a:	2280      	movs	r2, #128	; 0x80
 800692c:	615a      	str	r2, [r3, #20]
 800692e:	4b1c      	ldr	r3, [pc, #112]	; (80069a0 <LCD_Init+0x3980>)
 8006930:	2280      	movs	r2, #128	; 0x80
 8006932:	611a      	str	r2, [r3, #16]
 8006934:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <LCD_Init+0x3980>)
 8006936:	f44f 7200 	mov.w	r2, #512	; 0x200
 800693a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);		//设置LCD垂直像素
 800693c:	4b18      	ldr	r3, [pc, #96]	; (80069a0 <LCD_Init+0x3980>)
 800693e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006942:	611a      	str	r2, [r3, #16]
 8006944:	4b16      	ldr	r3, [pc, #88]	; (80069a0 <LCD_Init+0x3980>)
 8006946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800694a:	615a      	str	r2, [r3, #20]
 800694c:	4b15      	ldr	r3, [pc, #84]	; (80069a4 <LCD_Init+0x3984>)
 800694e:	2201      	movs	r2, #1
 8006950:	60da      	str	r2, [r3, #12]
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <LCD_Init+0x3980>)
 8006954:	2280      	movs	r2, #128	; 0x80
 8006956:	615a      	str	r2, [r3, #20]
 8006958:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <LCD_Init+0x3980>)
 800695a:	2280      	movs	r2, #128	; 0x80
 800695c:	611a      	str	r2, [r3, #16]
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <LCD_Init+0x3980>)
 8006960:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006964:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8006966:	4b0e      	ldr	r3, [pc, #56]	; (80069a0 <LCD_Init+0x3980>)
 8006968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800696c:	611a      	str	r2, [r3, #16]
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <LCD_Init+0x3980>)
 8006970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006974:	615a      	str	r2, [r3, #20]
 8006976:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <LCD_Init+0x3984>)
 8006978:	f240 12df 	movw	r2, #479	; 0x1df
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <LCD_Init+0x3980>)
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	615a      	str	r2, [r3, #20]
 8006984:	4b06      	ldr	r3, [pc, #24]	; (80069a0 <LCD_Init+0x3980>)
 8006986:	2280      	movs	r2, #128	; 0x80
 8006988:	611a      	str	r2, [r3, #16]
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <LCD_Init+0x3980>)
 800698c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006990:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);		//RGB序列 
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <LCD_Init+0x3980>)
 8006994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006998:	e006      	b.n	80069a8 <LCD_Init+0x3988>
 800699a:	bf00      	nop
 800699c:	200000bc 	.word	0x200000bc
 80069a0:	40011000 	.word	0x40011000
 80069a4:	40010c00 	.word	0x40010c00
 80069a8:	611a      	str	r2, [r3, #16]
 80069aa:	4ba3      	ldr	r3, [pc, #652]	; (8006c38 <LCD_Init+0x3c18>)
 80069ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b0:	615a      	str	r2, [r3, #20]
 80069b2:	4ba2      	ldr	r3, [pc, #648]	; (8006c3c <LCD_Init+0x3c1c>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	60da      	str	r2, [r3, #12]
 80069b8:	4b9f      	ldr	r3, [pc, #636]	; (8006c38 <LCD_Init+0x3c18>)
 80069ba:	2280      	movs	r2, #128	; 0x80
 80069bc:	615a      	str	r2, [r3, #20]
 80069be:	4b9e      	ldr	r3, [pc, #632]	; (8006c38 <LCD_Init+0x3c18>)
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	611a      	str	r2, [r3, #16]
 80069c4:	4b9c      	ldr	r3, [pc, #624]	; (8006c38 <LCD_Init+0x3c18>)
 80069c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069ca:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB4);		//Set horizontal period
 80069cc:	20b4      	movs	r0, #180	; 0xb4
 80069ce:	f7fb f801 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 80069d2:	4b99      	ldr	r3, [pc, #612]	; (8006c38 <LCD_Init+0x3c18>)
 80069d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069d8:	611a      	str	r2, [r3, #16]
 80069da:	4b97      	ldr	r3, [pc, #604]	; (8006c38 <LCD_Init+0x3c18>)
 80069dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069e0:	615a      	str	r2, [r3, #20]
 80069e2:	4b96      	ldr	r3, [pc, #600]	; (8006c3c <LCD_Init+0x3c1c>)
 80069e4:	2204      	movs	r2, #4
 80069e6:	60da      	str	r2, [r3, #12]
 80069e8:	4b93      	ldr	r3, [pc, #588]	; (8006c38 <LCD_Init+0x3c18>)
 80069ea:	2280      	movs	r2, #128	; 0x80
 80069ec:	615a      	str	r2, [r3, #20]
 80069ee:	4b92      	ldr	r3, [pc, #584]	; (8006c38 <LCD_Init+0x3c18>)
 80069f0:	2280      	movs	r2, #128	; 0x80
 80069f2:	611a      	str	r2, [r3, #16]
 80069f4:	4b90      	ldr	r3, [pc, #576]	; (8006c38 <LCD_Init+0x3c18>)
 80069f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069fa:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HT-1);
 80069fc:	4b8e      	ldr	r3, [pc, #568]	; (8006c38 <LCD_Init+0x3c18>)
 80069fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a02:	611a      	str	r2, [r3, #16]
 8006a04:	4b8c      	ldr	r3, [pc, #560]	; (8006c38 <LCD_Init+0x3c18>)
 8006a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a0a:	615a      	str	r2, [r3, #20]
 8006a0c:	4b8b      	ldr	r3, [pc, #556]	; (8006c3c <LCD_Init+0x3c1c>)
 8006a0e:	f240 421f 	movw	r2, #1055	; 0x41f
 8006a12:	60da      	str	r2, [r3, #12]
 8006a14:	4b88      	ldr	r3, [pc, #544]	; (8006c38 <LCD_Init+0x3c18>)
 8006a16:	2280      	movs	r2, #128	; 0x80
 8006a18:	615a      	str	r2, [r3, #20]
 8006a1a:	4b87      	ldr	r3, [pc, #540]	; (8006c38 <LCD_Init+0x3c18>)
 8006a1c:	2280      	movs	r2, #128	; 0x80
 8006a1e:	611a      	str	r2, [r3, #16]
 8006a20:	4b85      	ldr	r3, [pc, #532]	; (8006c38 <LCD_Init+0x3c18>)
 8006a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS>>8);
 8006a28:	4b83      	ldr	r3, [pc, #524]	; (8006c38 <LCD_Init+0x3c18>)
 8006a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a2e:	611a      	str	r2, [r3, #16]
 8006a30:	4b81      	ldr	r3, [pc, #516]	; (8006c38 <LCD_Init+0x3c18>)
 8006a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a36:	615a      	str	r2, [r3, #20]
 8006a38:	4b80      	ldr	r3, [pc, #512]	; (8006c3c <LCD_Init+0x3c1c>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	4b7e      	ldr	r3, [pc, #504]	; (8006c38 <LCD_Init+0x3c18>)
 8006a40:	2280      	movs	r2, #128	; 0x80
 8006a42:	615a      	str	r2, [r3, #20]
 8006a44:	4b7c      	ldr	r3, [pc, #496]	; (8006c38 <LCD_Init+0x3c18>)
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	611a      	str	r2, [r3, #16]
 8006a4a:	4b7b      	ldr	r3, [pc, #492]	; (8006c38 <LCD_Init+0x3c18>)
 8006a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a50:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HPS);
 8006a52:	4b79      	ldr	r3, [pc, #484]	; (8006c38 <LCD_Init+0x3c18>)
 8006a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a58:	611a      	str	r2, [r3, #16]
 8006a5a:	4b77      	ldr	r3, [pc, #476]	; (8006c38 <LCD_Init+0x3c18>)
 8006a5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a60:	615a      	str	r2, [r3, #20]
 8006a62:	4b76      	ldr	r3, [pc, #472]	; (8006c3c <LCD_Init+0x3c1c>)
 8006a64:	222e      	movs	r2, #46	; 0x2e
 8006a66:	60da      	str	r2, [r3, #12]
 8006a68:	4b73      	ldr	r3, [pc, #460]	; (8006c38 <LCD_Init+0x3c18>)
 8006a6a:	2280      	movs	r2, #128	; 0x80
 8006a6c:	615a      	str	r2, [r3, #20]
 8006a6e:	4b72      	ldr	r3, [pc, #456]	; (8006c38 <LCD_Init+0x3c18>)
 8006a70:	2280      	movs	r2, #128	; 0x80
 8006a72:	611a      	str	r2, [r3, #16]
 8006a74:	4b70      	ldr	r3, [pc, #448]	; (8006c38 <LCD_Init+0x3c18>)
 8006a76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8006a7c:	4b6e      	ldr	r3, [pc, #440]	; (8006c38 <LCD_Init+0x3c18>)
 8006a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a82:	611a      	str	r2, [r3, #16]
 8006a84:	4b6c      	ldr	r3, [pc, #432]	; (8006c38 <LCD_Init+0x3c18>)
 8006a86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a8a:	615a      	str	r2, [r3, #20]
 8006a8c:	4b6b      	ldr	r3, [pc, #428]	; (8006c3c <LCD_Init+0x3c1c>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60da      	str	r2, [r3, #12]
 8006a92:	4b69      	ldr	r3, [pc, #420]	; (8006c38 <LCD_Init+0x3c18>)
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	615a      	str	r2, [r3, #20]
 8006a98:	4b67      	ldr	r3, [pc, #412]	; (8006c38 <LCD_Init+0x3c18>)
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
 8006a9e:	4b66      	ldr	r3, [pc, #408]	; (8006c38 <LCD_Init+0x3c18>)
 8006aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa4:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006aa6:	4b64      	ldr	r3, [pc, #400]	; (8006c38 <LCD_Init+0x3c18>)
 8006aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006aac:	611a      	str	r2, [r3, #16]
 8006aae:	4b62      	ldr	r3, [pc, #392]	; (8006c38 <LCD_Init+0x3c18>)
 8006ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab4:	615a      	str	r2, [r3, #20]
 8006ab6:	4b61      	ldr	r3, [pc, #388]	; (8006c3c <LCD_Init+0x3c1c>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	60da      	str	r2, [r3, #12]
 8006abc:	4b5e      	ldr	r3, [pc, #376]	; (8006c38 <LCD_Init+0x3c18>)
 8006abe:	2280      	movs	r2, #128	; 0x80
 8006ac0:	615a      	str	r2, [r3, #20]
 8006ac2:	4b5d      	ldr	r3, [pc, #372]	; (8006c38 <LCD_Init+0x3c18>)
 8006ac4:	2280      	movs	r2, #128	; 0x80
 8006ac6:	611a      	str	r2, [r3, #16]
 8006ac8:	4b5b      	ldr	r3, [pc, #364]	; (8006c38 <LCD_Init+0x3c18>)
 8006aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ace:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006ad0:	4b59      	ldr	r3, [pc, #356]	; (8006c38 <LCD_Init+0x3c18>)
 8006ad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ad6:	611a      	str	r2, [r3, #16]
 8006ad8:	4b57      	ldr	r3, [pc, #348]	; (8006c38 <LCD_Init+0x3c18>)
 8006ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ade:	615a      	str	r2, [r3, #20]
 8006ae0:	4b56      	ldr	r3, [pc, #344]	; (8006c3c <LCD_Init+0x3c1c>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	60da      	str	r2, [r3, #12]
 8006ae6:	4b54      	ldr	r3, [pc, #336]	; (8006c38 <LCD_Init+0x3c18>)
 8006ae8:	2280      	movs	r2, #128	; 0x80
 8006aea:	615a      	str	r2, [r3, #20]
 8006aec:	4b52      	ldr	r3, [pc, #328]	; (8006c38 <LCD_Init+0x3c18>)
 8006aee:	2280      	movs	r2, #128	; 0x80
 8006af0:	611a      	str	r2, [r3, #16]
 8006af2:	4b51      	ldr	r3, [pc, #324]	; (8006c38 <LCD_Init+0x3c18>)
 8006af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006af8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006afa:	4b4f      	ldr	r3, [pc, #316]	; (8006c38 <LCD_Init+0x3c18>)
 8006afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b00:	611a      	str	r2, [r3, #16]
 8006b02:	4b4d      	ldr	r3, [pc, #308]	; (8006c38 <LCD_Init+0x3c18>)
 8006b04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b08:	615a      	str	r2, [r3, #20]
 8006b0a:	4b4c      	ldr	r3, [pc, #304]	; (8006c3c <LCD_Init+0x3c1c>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60da      	str	r2, [r3, #12]
 8006b10:	4b49      	ldr	r3, [pc, #292]	; (8006c38 <LCD_Init+0x3c18>)
 8006b12:	2280      	movs	r2, #128	; 0x80
 8006b14:	615a      	str	r2, [r3, #20]
 8006b16:	4b48      	ldr	r3, [pc, #288]	; (8006c38 <LCD_Init+0x3c18>)
 8006b18:	2280      	movs	r2, #128	; 0x80
 8006b1a:	611a      	str	r2, [r3, #16]
 8006b1c:	4b46      	ldr	r3, [pc, #280]	; (8006c38 <LCD_Init+0x3c18>)
 8006b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b22:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xB6);		//Set vertical period
 8006b24:	20b6      	movs	r0, #182	; 0xb6
 8006b26:	f7fa ff55 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8006b2a:	4b43      	ldr	r3, [pc, #268]	; (8006c38 <LCD_Init+0x3c18>)
 8006b2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b30:	611a      	str	r2, [r3, #16]
 8006b32:	4b41      	ldr	r3, [pc, #260]	; (8006c38 <LCD_Init+0x3c18>)
 8006b34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b38:	615a      	str	r2, [r3, #20]
 8006b3a:	4b40      	ldr	r3, [pc, #256]	; (8006c3c <LCD_Init+0x3c1c>)
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	4b3d      	ldr	r3, [pc, #244]	; (8006c38 <LCD_Init+0x3c18>)
 8006b42:	2280      	movs	r2, #128	; 0x80
 8006b44:	615a      	str	r2, [r3, #20]
 8006b46:	4b3c      	ldr	r3, [pc, #240]	; (8006c38 <LCD_Init+0x3c18>)
 8006b48:	2280      	movs	r2, #128	; 0x80
 8006b4a:	611a      	str	r2, [r3, #16]
 8006b4c:	4b3a      	ldr	r3, [pc, #232]	; (8006c38 <LCD_Init+0x3c18>)
 8006b4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b52:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VT-1);
 8006b54:	4b38      	ldr	r3, [pc, #224]	; (8006c38 <LCD_Init+0x3c18>)
 8006b56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b5a:	611a      	str	r2, [r3, #16]
 8006b5c:	4b36      	ldr	r3, [pc, #216]	; (8006c38 <LCD_Init+0x3c18>)
 8006b5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b62:	615a      	str	r2, [r3, #20]
 8006b64:	4b35      	ldr	r3, [pc, #212]	; (8006c3c <LCD_Init+0x3c1c>)
 8006b66:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8006b6a:	60da      	str	r2, [r3, #12]
 8006b6c:	4b32      	ldr	r3, [pc, #200]	; (8006c38 <LCD_Init+0x3c18>)
 8006b6e:	2280      	movs	r2, #128	; 0x80
 8006b70:	615a      	str	r2, [r3, #20]
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <LCD_Init+0x3c18>)
 8006b74:	2280      	movs	r2, #128	; 0x80
 8006b76:	611a      	str	r2, [r3, #16]
 8006b78:	4b2f      	ldr	r3, [pc, #188]	; (8006c38 <LCD_Init+0x3c18>)
 8006b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b7e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS>>8);
 8006b80:	4b2d      	ldr	r3, [pc, #180]	; (8006c38 <LCD_Init+0x3c18>)
 8006b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006b86:	611a      	str	r2, [r3, #16]
 8006b88:	4b2b      	ldr	r3, [pc, #172]	; (8006c38 <LCD_Init+0x3c18>)
 8006b8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b8e:	615a      	str	r2, [r3, #20]
 8006b90:	4b2a      	ldr	r3, [pc, #168]	; (8006c3c <LCD_Init+0x3c1c>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	60da      	str	r2, [r3, #12]
 8006b96:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <LCD_Init+0x3c18>)
 8006b98:	2280      	movs	r2, #128	; 0x80
 8006b9a:	615a      	str	r2, [r3, #20]
 8006b9c:	4b26      	ldr	r3, [pc, #152]	; (8006c38 <LCD_Init+0x3c18>)
 8006b9e:	2280      	movs	r2, #128	; 0x80
 8006ba0:	611a      	str	r2, [r3, #16]
 8006ba2:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <LCD_Init+0x3c18>)
 8006ba4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba8:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VPS);
 8006baa:	4b23      	ldr	r3, [pc, #140]	; (8006c38 <LCD_Init+0x3c18>)
 8006bac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bb0:	611a      	str	r2, [r3, #16]
 8006bb2:	4b21      	ldr	r3, [pc, #132]	; (8006c38 <LCD_Init+0x3c18>)
 8006bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bb8:	615a      	str	r2, [r3, #20]
 8006bba:	4b20      	ldr	r3, [pc, #128]	; (8006c3c <LCD_Init+0x3c1c>)
 8006bbc:	2217      	movs	r2, #23
 8006bbe:	60da      	str	r2, [r3, #12]
 8006bc0:	4b1d      	ldr	r3, [pc, #116]	; (8006c38 <LCD_Init+0x3c18>)
 8006bc2:	2280      	movs	r2, #128	; 0x80
 8006bc4:	615a      	str	r2, [r3, #20]
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	; (8006c38 <LCD_Init+0x3c18>)
 8006bc8:	2280      	movs	r2, #128	; 0x80
 8006bca:	611a      	str	r2, [r3, #16]
 8006bcc:	4b1a      	ldr	r3, [pc, #104]	; (8006c38 <LCD_Init+0x3c18>)
 8006bce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bd2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8006bd4:	4b18      	ldr	r3, [pc, #96]	; (8006c38 <LCD_Init+0x3c18>)
 8006bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bda:	611a      	str	r2, [r3, #16]
 8006bdc:	4b16      	ldr	r3, [pc, #88]	; (8006c38 <LCD_Init+0x3c18>)
 8006bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be2:	615a      	str	r2, [r3, #20]
 8006be4:	4b15      	ldr	r3, [pc, #84]	; (8006c3c <LCD_Init+0x3c1c>)
 8006be6:	2215      	movs	r2, #21
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	4b13      	ldr	r3, [pc, #76]	; (8006c38 <LCD_Init+0x3c18>)
 8006bec:	2280      	movs	r2, #128	; 0x80
 8006bee:	615a      	str	r2, [r3, #20]
 8006bf0:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <LCD_Init+0x3c18>)
 8006bf2:	2280      	movs	r2, #128	; 0x80
 8006bf4:	611a      	str	r2, [r3, #16]
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <LCD_Init+0x3c18>)
 8006bf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bfc:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <LCD_Init+0x3c18>)
 8006c00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c04:	611a      	str	r2, [r3, #16]
 8006c06:	4b0c      	ldr	r3, [pc, #48]	; (8006c38 <LCD_Init+0x3c18>)
 8006c08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c0c:	615a      	str	r2, [r3, #20]
 8006c0e:	4b0b      	ldr	r3, [pc, #44]	; (8006c3c <LCD_Init+0x3c1c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	60da      	str	r2, [r3, #12]
 8006c14:	4b08      	ldr	r3, [pc, #32]	; (8006c38 <LCD_Init+0x3c18>)
 8006c16:	2280      	movs	r2, #128	; 0x80
 8006c18:	615a      	str	r2, [r3, #20]
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <LCD_Init+0x3c18>)
 8006c1c:	2280      	movs	r2, #128	; 0x80
 8006c1e:	611a      	str	r2, [r3, #16]
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <LCD_Init+0x3c18>)
 8006c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c26:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);
 8006c28:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <LCD_Init+0x3c18>)
 8006c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c2e:	611a      	str	r2, [r3, #16]
 8006c30:	4b01      	ldr	r3, [pc, #4]	; (8006c38 <LCD_Init+0x3c18>)
 8006c32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c36:	e003      	b.n	8006c40 <LCD_Init+0x3c20>
 8006c38:	40011000 	.word	0x40011000
 8006c3c:	40010c00 	.word	0x40010c00
 8006c40:	615a      	str	r2, [r3, #20]
 8006c42:	4b8b      	ldr	r3, [pc, #556]	; (8006e70 <LCD_Init+0x3e50>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	60da      	str	r2, [r3, #12]
 8006c48:	4b8a      	ldr	r3, [pc, #552]	; (8006e74 <LCD_Init+0x3e54>)
 8006c4a:	2280      	movs	r2, #128	; 0x80
 8006c4c:	615a      	str	r2, [r3, #20]
 8006c4e:	4b89      	ldr	r3, [pc, #548]	; (8006e74 <LCD_Init+0x3e54>)
 8006c50:	2280      	movs	r2, #128	; 0x80
 8006c52:	611a      	str	r2, [r3, #16]
 8006c54:	4b87      	ldr	r3, [pc, #540]	; (8006e74 <LCD_Init+0x3e54>)
 8006c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c5a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit  
 8006c5c:	20f0      	movs	r0, #240	; 0xf0
 8006c5e:	f7fa feb9 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp 
 8006c62:	4b84      	ldr	r3, [pc, #528]	; (8006e74 <LCD_Init+0x3e54>)
 8006c64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c68:	611a      	str	r2, [r3, #16]
 8006c6a:	4b82      	ldr	r3, [pc, #520]	; (8006e74 <LCD_Init+0x3e54>)
 8006c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c70:	615a      	str	r2, [r3, #20]
 8006c72:	4b7f      	ldr	r3, [pc, #508]	; (8006e70 <LCD_Init+0x3e50>)
 8006c74:	2203      	movs	r2, #3
 8006c76:	60da      	str	r2, [r3, #12]
 8006c78:	4b7e      	ldr	r3, [pc, #504]	; (8006e74 <LCD_Init+0x3e54>)
 8006c7a:	2280      	movs	r2, #128	; 0x80
 8006c7c:	615a      	str	r2, [r3, #20]
 8006c7e:	4b7d      	ldr	r3, [pc, #500]	; (8006e74 <LCD_Init+0x3e54>)
 8006c80:	2280      	movs	r2, #128	; 0x80
 8006c82:	611a      	str	r2, [r3, #16]
 8006c84:	4b7b      	ldr	r3, [pc, #492]	; (8006e74 <LCD_Init+0x3e54>)
 8006c86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8a:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0x29);	//开启显示
 8006c8c:	2029      	movs	r0, #41	; 0x29
 8006c8e:	f7fa fea1 	bl	80019d4 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调 
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8006c92:	20d0      	movs	r0, #208	; 0xd0
 8006c94:	f7fa fe9e 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006c98:	4b76      	ldr	r3, [pc, #472]	; (8006e74 <LCD_Init+0x3e54>)
 8006c9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c9e:	611a      	str	r2, [r3, #16]
 8006ca0:	4b74      	ldr	r3, [pc, #464]	; (8006e74 <LCD_Init+0x3e54>)
 8006ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ca6:	615a      	str	r2, [r3, #20]
 8006ca8:	4b71      	ldr	r3, [pc, #452]	; (8006e70 <LCD_Init+0x3e50>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	60da      	str	r2, [r3, #12]
 8006cae:	4b71      	ldr	r3, [pc, #452]	; (8006e74 <LCD_Init+0x3e54>)
 8006cb0:	2280      	movs	r2, #128	; 0x80
 8006cb2:	615a      	str	r2, [r3, #20]
 8006cb4:	4b6f      	ldr	r3, [pc, #444]	; (8006e74 <LCD_Init+0x3e54>)
 8006cb6:	2280      	movs	r2, #128	; 0x80
 8006cb8:	611a      	str	r2, [r3, #16]
 8006cba:	4b6e      	ldr	r3, [pc, #440]	; (8006e74 <LCD_Init+0x3e54>)
 8006cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cc0:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xBE);	//配置PWM输出
 8006cc2:	20be      	movs	r0, #190	; 0xbe
 8006cc4:	f7fa fe86 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8006cc8:	4b6a      	ldr	r3, [pc, #424]	; (8006e74 <LCD_Init+0x3e54>)
 8006cca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cce:	611a      	str	r2, [r3, #16]
 8006cd0:	4b68      	ldr	r3, [pc, #416]	; (8006e74 <LCD_Init+0x3e54>)
 8006cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cd6:	615a      	str	r2, [r3, #20]
 8006cd8:	4b65      	ldr	r3, [pc, #404]	; (8006e70 <LCD_Init+0x3e50>)
 8006cda:	2205      	movs	r2, #5
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	4b65      	ldr	r3, [pc, #404]	; (8006e74 <LCD_Init+0x3e54>)
 8006ce0:	2280      	movs	r2, #128	; 0x80
 8006ce2:	615a      	str	r2, [r3, #20]
 8006ce4:	4b63      	ldr	r3, [pc, #396]	; (8006e74 <LCD_Init+0x3e54>)
 8006ce6:	2280      	movs	r2, #128	; 0x80
 8006ce8:	611a      	str	r2, [r3, #16]
 8006cea:	4b62      	ldr	r3, [pc, #392]	; (8006e74 <LCD_Init+0x3e54>)
 8006cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cf0:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8006cf2:	4b60      	ldr	r3, [pc, #384]	; (8006e74 <LCD_Init+0x3e54>)
 8006cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cf8:	611a      	str	r2, [r3, #16]
 8006cfa:	4b5e      	ldr	r3, [pc, #376]	; (8006e74 <LCD_Init+0x3e54>)
 8006cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d00:	615a      	str	r2, [r3, #20]
 8006d02:	4b5b      	ldr	r3, [pc, #364]	; (8006e70 <LCD_Init+0x3e50>)
 8006d04:	22fe      	movs	r2, #254	; 0xfe
 8006d06:	60da      	str	r2, [r3, #12]
 8006d08:	4b5a      	ldr	r3, [pc, #360]	; (8006e74 <LCD_Init+0x3e54>)
 8006d0a:	2280      	movs	r2, #128	; 0x80
 8006d0c:	615a      	str	r2, [r3, #20]
 8006d0e:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <LCD_Init+0x3e54>)
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	611a      	str	r2, [r3, #16]
 8006d14:	4b57      	ldr	r3, [pc, #348]	; (8006e74 <LCD_Init+0x3e54>)
 8006d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d1a:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//3设置C
 8006d1c:	4b55      	ldr	r3, [pc, #340]	; (8006e74 <LCD_Init+0x3e54>)
 8006d1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d22:	611a      	str	r2, [r3, #16]
 8006d24:	4b53      	ldr	r3, [pc, #332]	; (8006e74 <LCD_Init+0x3e54>)
 8006d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d2a:	615a      	str	r2, [r3, #20]
 8006d2c:	4b50      	ldr	r3, [pc, #320]	; (8006e70 <LCD_Init+0x3e50>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	60da      	str	r2, [r3, #12]
 8006d32:	4b50      	ldr	r3, [pc, #320]	; (8006e74 <LCD_Init+0x3e54>)
 8006d34:	2280      	movs	r2, #128	; 0x80
 8006d36:	615a      	str	r2, [r3, #20]
 8006d38:	4b4e      	ldr	r3, [pc, #312]	; (8006e74 <LCD_Init+0x3e54>)
 8006d3a:	2280      	movs	r2, #128	; 0x80
 8006d3c:	611a      	str	r2, [r3, #16]
 8006d3e:	4b4d      	ldr	r3, [pc, #308]	; (8006e74 <LCD_Init+0x3e54>)
 8006d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d44:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//4设置D
 8006d46:	4b4b      	ldr	r3, [pc, #300]	; (8006e74 <LCD_Init+0x3e54>)
 8006d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d4c:	611a      	str	r2, [r3, #16]
 8006d4e:	4b49      	ldr	r3, [pc, #292]	; (8006e74 <LCD_Init+0x3e54>)
 8006d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d54:	615a      	str	r2, [r3, #20]
 8006d56:	4b46      	ldr	r3, [pc, #280]	; (8006e70 <LCD_Init+0x3e50>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <LCD_Init+0x3e54>)
 8006d5e:	2280      	movs	r2, #128	; 0x80
 8006d60:	615a      	str	r2, [r3, #20]
 8006d62:	4b44      	ldr	r3, [pc, #272]	; (8006e74 <LCD_Init+0x3e54>)
 8006d64:	2280      	movs	r2, #128	; 0x80
 8006d66:	611a      	str	r2, [r3, #16]
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <LCD_Init+0x3e54>)
 8006d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d6e:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//5设置E 
 8006d70:	4b40      	ldr	r3, [pc, #256]	; (8006e74 <LCD_Init+0x3e54>)
 8006d72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d76:	611a      	str	r2, [r3, #16]
 8006d78:	4b3e      	ldr	r3, [pc, #248]	; (8006e74 <LCD_Init+0x3e54>)
 8006d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d7e:	615a      	str	r2, [r3, #20]
 8006d80:	4b3b      	ldr	r3, [pc, #236]	; (8006e70 <LCD_Init+0x3e50>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	60da      	str	r2, [r3, #12]
 8006d86:	4b3b      	ldr	r3, [pc, #236]	; (8006e74 <LCD_Init+0x3e54>)
 8006d88:	2280      	movs	r2, #128	; 0x80
 8006d8a:	615a      	str	r2, [r3, #20]
 8006d8c:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <LCD_Init+0x3e54>)
 8006d8e:	2280      	movs	r2, #128	; 0x80
 8006d90:	611a      	str	r2, [r3, #16]
 8006d92:	4b38      	ldr	r3, [pc, #224]	; (8006e74 <LCD_Init+0x3e54>)
 8006d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d98:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x00);	//6设置F 
 8006d9a:	4b36      	ldr	r3, [pc, #216]	; (8006e74 <LCD_Init+0x3e54>)
 8006d9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006da0:	611a      	str	r2, [r3, #16]
 8006da2:	4b34      	ldr	r3, [pc, #208]	; (8006e74 <LCD_Init+0x3e54>)
 8006da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006da8:	615a      	str	r2, [r3, #20]
 8006daa:	4b31      	ldr	r3, [pc, #196]	; (8006e70 <LCD_Init+0x3e50>)
 8006dac:	2200      	movs	r2, #0
 8006dae:	60da      	str	r2, [r3, #12]
 8006db0:	4b30      	ldr	r3, [pc, #192]	; (8006e74 <LCD_Init+0x3e54>)
 8006db2:	2280      	movs	r2, #128	; 0x80
 8006db4:	615a      	str	r2, [r3, #20]
 8006db6:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <LCD_Init+0x3e54>)
 8006db8:	2280      	movs	r2, #128	; 0x80
 8006dba:	611a      	str	r2, [r3, #16]
 8006dbc:	4b2d      	ldr	r3, [pc, #180]	; (8006e74 <LCD_Init+0x3e54>)
 8006dbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc2:	611a      	str	r2, [r3, #16]

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006dc4:	20b8      	movs	r0, #184	; 0xb8
 8006dc6:	f7fa fe05 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006dca:	4b2a      	ldr	r3, [pc, #168]	; (8006e74 <LCD_Init+0x3e54>)
 8006dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dd0:	611a      	str	r2, [r3, #16]
 8006dd2:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <LCD_Init+0x3e54>)
 8006dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dd8:	615a      	str	r2, [r3, #20]
 8006dda:	4b25      	ldr	r3, [pc, #148]	; (8006e70 <LCD_Init+0x3e50>)
 8006ddc:	2203      	movs	r2, #3
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	4b24      	ldr	r3, [pc, #144]	; (8006e74 <LCD_Init+0x3e54>)
 8006de2:	2280      	movs	r2, #128	; 0x80
 8006de4:	615a      	str	r2, [r3, #20]
 8006de6:	4b23      	ldr	r3, [pc, #140]	; (8006e74 <LCD_Init+0x3e54>)
 8006de8:	2280      	movs	r2, #128	; 0x80
 8006dea:	611a      	str	r2, [r3, #16]
 8006dec:	4b21      	ldr	r3, [pc, #132]	; (8006e74 <LCD_Init+0x3e54>)
 8006dee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006df2:	611a      	str	r2, [r3, #16]
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能 
 8006df4:	4b1f      	ldr	r3, [pc, #124]	; (8006e74 <LCD_Init+0x3e54>)
 8006df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dfa:	611a      	str	r2, [r3, #16]
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <LCD_Init+0x3e54>)
 8006dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e02:	615a      	str	r2, [r3, #20]
 8006e04:	4b1a      	ldr	r3, [pc, #104]	; (8006e70 <LCD_Init+0x3e50>)
 8006e06:	2201      	movs	r2, #1
 8006e08:	60da      	str	r2, [r3, #12]
 8006e0a:	4b1a      	ldr	r3, [pc, #104]	; (8006e74 <LCD_Init+0x3e54>)
 8006e0c:	2280      	movs	r2, #128	; 0x80
 8006e0e:	615a      	str	r2, [r3, #20]
 8006e10:	4b18      	ldr	r3, [pc, #96]	; (8006e74 <LCD_Init+0x3e54>)
 8006e12:	2280      	movs	r2, #128	; 0x80
 8006e14:	611a      	str	r2, [r3, #16]
 8006e16:	4b17      	ldr	r3, [pc, #92]	; (8006e74 <LCD_Init+0x3e54>)
 8006e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1c:	611a      	str	r2, [r3, #16]
		LCD_WR_REG(0xBA);
 8006e1e:	20ba      	movs	r0, #186	; 0xba
 8006e20:	f7fa fdd8 	bl	80019d4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8006e24:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <LCD_Init+0x3e54>)
 8006e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e2a:	611a      	str	r2, [r3, #16]
 8006e2c:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <LCD_Init+0x3e54>)
 8006e2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e32:	615a      	str	r2, [r3, #20]
 8006e34:	4b0e      	ldr	r3, [pc, #56]	; (8006e70 <LCD_Init+0x3e50>)
 8006e36:	2201      	movs	r2, #1
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <LCD_Init+0x3e54>)
 8006e3c:	2280      	movs	r2, #128	; 0x80
 8006e3e:	615a      	str	r2, [r3, #20]
 8006e40:	4b0c      	ldr	r3, [pc, #48]	; (8006e74 <LCD_Init+0x3e54>)
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	611a      	str	r2, [r3, #16]
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <LCD_Init+0x3e54>)
 8006e48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e4c:	611a      	str	r2, [r3, #16]

		LCD_SSD_BackLightSet(100);	//背光设置为最亮
 8006e4e:	2064      	movs	r0, #100	; 0x64
 8006e50:	f7fb ff36 	bl	8002cc0 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		 	//默认为竖屏
 8006e54:	2000      	movs	r0, #0
 8006e56:	f7fb ffd7 	bl	8002e08 <LCD_Display_Dir>
	LCD_LED = 1;					//点亮背光
 8006e5a:	4b07      	ldr	r3, [pc, #28]	; (8006e78 <LCD_Init+0x3e58>)
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8006e60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e64:	f000 f80a 	bl	8006e7c <LCD_Clear>
}
 8006e68:	bf00      	nop
 8006e6a:	3718      	adds	r7, #24
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40010c00 	.word	0x40010c00
 8006e74:	40011000 	.word	0x40011000
 8006e78:	422201a8 	.word	0x422201a8

08006e7c <LCD_Clear>:

// Clear the screen with specific color
void LCD_Clear(uint16_t color) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4603      	mov	r3, r0
 8006e84:	80fb      	strh	r3, [r7, #6]
	uint32_t index = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint = lcddev.width;
 8006e8a:	4b2a      	ldr	r3, [pc, #168]	; (8006f34 <LCD_Clear+0xb8>)
 8006e8c:	881b      	ldrh	r3, [r3, #0]
 8006e8e:	60bb      	str	r3, [r7, #8]
	totalpoint *= lcddev.height; 			//得到总点数
 8006e90:	4b28      	ldr	r3, [pc, #160]	; (8006f34 <LCD_Clear+0xb8>)
 8006e92:	885b      	ldrh	r3, [r3, #2]
 8006e94:	461a      	mov	r2, r3
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
 8006e9c:	60bb      	str	r3, [r7, #8]
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1)) 			//6804横屏的时候特殊处理
 8006e9e:	4b25      	ldr	r3, [pc, #148]	; (8006f34 <LCD_Clear+0xb8>)
 8006ea0:	889b      	ldrh	r3, [r3, #4]
 8006ea2:	f646 0204 	movw	r2, #26628	; 0x6804
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d11a      	bne.n	8006ee0 <LCD_Clear+0x64>
 8006eaa:	4b22      	ldr	r3, [pc, #136]	; (8006f34 <LCD_Clear+0xb8>)
 8006eac:	799b      	ldrb	r3, [r3, #6]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d116      	bne.n	8006ee0 <LCD_Clear+0x64>
			{
		lcddev.dir = 0;
 8006eb2:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <LCD_Clear+0xb8>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006eb8:	4b1e      	ldr	r3, [pc, #120]	; (8006f34 <LCD_Clear+0xb8>)
 8006eba:	222a      	movs	r2, #42	; 0x2a
 8006ebc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006ebe:	4b1d      	ldr	r3, [pc, #116]	; (8006f34 <LCD_Clear+0xb8>)
 8006ec0:	222b      	movs	r2, #43	; 0x2b
 8006ec2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00, 0x0000);		//设置光标位置
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f7fa fe56 	bl	8001b78 <LCD_SetCursor>
		lcddev.dir = 1;
 8006ecc:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <LCD_Clear+0xb8>)
 8006ece:	2201      	movs	r2, #1
 8006ed0:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006ed2:	4b18      	ldr	r3, [pc, #96]	; (8006f34 <LCD_Clear+0xb8>)
 8006ed4:	222b      	movs	r2, #43	; 0x2b
 8006ed6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006ed8:	4b16      	ldr	r3, [pc, #88]	; (8006f34 <LCD_Clear+0xb8>)
 8006eda:	222a      	movs	r2, #42	; 0x2a
 8006edc:	819a      	strh	r2, [r3, #12]
 8006ede:	e003      	b.n	8006ee8 <LCD_Clear+0x6c>
	} else
		LCD_SetCursor(0x00, 0x0000);	//设置光标位置
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	f7fa fe48 	bl	8001b78 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM	  	  
 8006ee8:	f7fa fe3a 	bl	8001b60 <LCD_WriteRAM_Prepare>
	for (index = 0; index < totalpoint; index++)
 8006eec:	2300      	movs	r3, #0
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e017      	b.n	8006f22 <LCD_Clear+0xa6>
		LCD_WR_DATA(color);
 8006ef2:	4b11      	ldr	r3, [pc, #68]	; (8006f38 <LCD_Clear+0xbc>)
 8006ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ef8:	611a      	str	r2, [r3, #16]
 8006efa:	4b0f      	ldr	r3, [pc, #60]	; (8006f38 <LCD_Clear+0xbc>)
 8006efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f00:	615a      	str	r2, [r3, #20]
 8006f02:	4a0e      	ldr	r2, [pc, #56]	; (8006f3c <LCD_Clear+0xc0>)
 8006f04:	88fb      	ldrh	r3, [r7, #6]
 8006f06:	60d3      	str	r3, [r2, #12]
 8006f08:	4b0b      	ldr	r3, [pc, #44]	; (8006f38 <LCD_Clear+0xbc>)
 8006f0a:	2280      	movs	r2, #128	; 0x80
 8006f0c:	615a      	str	r2, [r3, #20]
 8006f0e:	4b0a      	ldr	r3, [pc, #40]	; (8006f38 <LCD_Clear+0xbc>)
 8006f10:	2280      	movs	r2, #128	; 0x80
 8006f12:	611a      	str	r2, [r3, #16]
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <LCD_Clear+0xbc>)
 8006f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006f1a:	611a      	str	r2, [r3, #16]
	for (index = 0; index < totalpoint; index++)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d3e3      	bcc.n	8006ef2 <LCD_Clear+0x76>
}
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200000bc 	.word	0x200000bc
 8006f38:	40011000 	.word	0x40011000
 8006f3c:	40010c00 	.word	0x40010c00

08006f40 <LCD_Fill>:
// Fill the area with color
// :(xend-xsta+1)*(yend-ysta+1)
void LCD_Fill(uint16_t sx, uint16_t sy, uint16_t ex, uint16_t ey,
		uint16_t color) {
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	b087      	sub	sp, #28
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	4623      	mov	r3, r4
 8006f50:	80fb      	strh	r3, [r7, #6]
 8006f52:	4603      	mov	r3, r0
 8006f54:	80bb      	strh	r3, [r7, #4]
 8006f56:	460b      	mov	r3, r1
 8006f58:	807b      	strh	r3, [r7, #2]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	uint16_t xlen = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if ((lcddev.id == 0X6804) && (lcddev.dir == 1))	//6804横屏的时候特殊处理
 8006f62:	4b3a      	ldr	r3, [pc, #232]	; (800704c <LCD_Fill+0x10c>)
 8006f64:	889b      	ldrh	r3, [r3, #4]
 8006f66:	f646 0204 	movw	r2, #26628	; 0x6804
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d133      	bne.n	8006fd6 <LCD_Fill+0x96>
 8006f6e:	4b37      	ldr	r3, [pc, #220]	; (800704c <LCD_Fill+0x10c>)
 8006f70:	799b      	ldrb	r3, [r3, #6]
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d12f      	bne.n	8006fd6 <LCD_Fill+0x96>
			{
		temp = sx;
 8006f76:	88fb      	ldrh	r3, [r7, #6]
 8006f78:	813b      	strh	r3, [r7, #8]
		sx = sy;
 8006f7a:	88bb      	ldrh	r3, [r7, #4]
 8006f7c:	80fb      	strh	r3, [r7, #6]
		sy = lcddev.width - ex - 1;
 8006f7e:	4b33      	ldr	r3, [pc, #204]	; (800704c <LCD_Fill+0x10c>)
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	887b      	ldrh	r3, [r7, #2]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	80bb      	strh	r3, [r7, #4]
		ex = ey;
 8006f8c:	883b      	ldrh	r3, [r7, #0]
 8006f8e:	807b      	strh	r3, [r7, #2]
		ey = lcddev.width - temp - 1;
 8006f90:	4b2e      	ldr	r3, [pc, #184]	; (800704c <LCD_Fill+0x10c>)
 8006f92:	881a      	ldrh	r2, [r3, #0]
 8006f94:	893b      	ldrh	r3, [r7, #8]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	803b      	strh	r3, [r7, #0]
		lcddev.dir = 0;
 8006f9e:	4b2b      	ldr	r3, [pc, #172]	; (800704c <LCD_Fill+0x10c>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2A;
 8006fa4:	4b29      	ldr	r3, [pc, #164]	; (800704c <LCD_Fill+0x10c>)
 8006fa6:	222a      	movs	r2, #42	; 0x2a
 8006fa8:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2B;
 8006faa:	4b28      	ldr	r3, [pc, #160]	; (800704c <LCD_Fill+0x10c>)
 8006fac:	222b      	movs	r2, #43	; 0x2b
 8006fae:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx, sy, ex, ey, color);
 8006fb0:	883c      	ldrh	r4, [r7, #0]
 8006fb2:	887a      	ldrh	r2, [r7, #2]
 8006fb4:	88b9      	ldrh	r1, [r7, #4]
 8006fb6:	88f8      	ldrh	r0, [r7, #6]
 8006fb8:	8c3b      	ldrh	r3, [r7, #32]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4623      	mov	r3, r4
 8006fbe:	f7ff ffbf 	bl	8006f40 <LCD_Fill>
		lcddev.dir = 1;
 8006fc2:	4b22      	ldr	r3, [pc, #136]	; (800704c <LCD_Fill+0x10c>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	719a      	strb	r2, [r3, #6]
		lcddev.setxcmd = 0X2B;
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <LCD_Fill+0x10c>)
 8006fca:	222b      	movs	r2, #43	; 0x2b
 8006fcc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd = 0X2A;
 8006fce:	4b1f      	ldr	r3, [pc, #124]	; (800704c <LCD_Fill+0x10c>)
 8006fd0:	222a      	movs	r2, #42	; 0x2a
 8006fd2:	819a      	strh	r2, [r3, #12]
 8006fd4:	e036      	b.n	8007044 <LCD_Fill+0x104>
	} else {
		xlen = ex - sx + 1;
 8006fd6:	887a      	ldrh	r2, [r7, #2]
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3301      	adds	r3, #1
 8006fe0:	817b      	strh	r3, [r7, #10]
		for (i = sy; i <= ey; i++) {
 8006fe2:	88bb      	ldrh	r3, [r7, #4]
 8006fe4:	81fb      	strh	r3, [r7, #14]
 8006fe6:	e029      	b.n	800703c <LCD_Fill+0xfc>
			LCD_SetCursor(sx, i);      				//设置光标位置
 8006fe8:	89fa      	ldrh	r2, [r7, #14]
 8006fea:	88fb      	ldrh	r3, [r7, #6]
 8006fec:	4611      	mov	r1, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fa fdc2 	bl	8001b78 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM	  
 8006ff4:	f7fa fdb4 	bl	8001b60 <LCD_WriteRAM_Prepare>
			for (j = 0; j < xlen; j++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	81bb      	strh	r3, [r7, #12]
 8006ffc:	e017      	b.n	800702e <LCD_Fill+0xee>
				LCD_WR_DATA(color);	//设置光标位置
 8006ffe:	4b14      	ldr	r3, [pc, #80]	; (8007050 <LCD_Fill+0x110>)
 8007000:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007004:	611a      	str	r2, [r3, #16]
 8007006:	4b12      	ldr	r3, [pc, #72]	; (8007050 <LCD_Fill+0x110>)
 8007008:	f44f 7200 	mov.w	r2, #512	; 0x200
 800700c:	615a      	str	r2, [r3, #20]
 800700e:	4a11      	ldr	r2, [pc, #68]	; (8007054 <LCD_Fill+0x114>)
 8007010:	8c3b      	ldrh	r3, [r7, #32]
 8007012:	60d3      	str	r3, [r2, #12]
 8007014:	4b0e      	ldr	r3, [pc, #56]	; (8007050 <LCD_Fill+0x110>)
 8007016:	2280      	movs	r2, #128	; 0x80
 8007018:	615a      	str	r2, [r3, #20]
 800701a:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <LCD_Fill+0x110>)
 800701c:	2280      	movs	r2, #128	; 0x80
 800701e:	611a      	str	r2, [r3, #16]
 8007020:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <LCD_Fill+0x110>)
 8007022:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007026:	611a      	str	r2, [r3, #16]
			for (j = 0; j < xlen; j++)
 8007028:	89bb      	ldrh	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	81bb      	strh	r3, [r7, #12]
 800702e:	89ba      	ldrh	r2, [r7, #12]
 8007030:	897b      	ldrh	r3, [r7, #10]
 8007032:	429a      	cmp	r2, r3
 8007034:	d3e3      	bcc.n	8006ffe <LCD_Fill+0xbe>
		for (i = sy; i <= ey; i++) {
 8007036:	89fb      	ldrh	r3, [r7, #14]
 8007038:	3301      	adds	r3, #1
 800703a:	81fb      	strh	r3, [r7, #14]
 800703c:	89fa      	ldrh	r2, [r7, #14]
 800703e:	883b      	ldrh	r3, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d9d1      	bls.n	8006fe8 <LCD_Fill+0xa8>
		}
	}
}
 8007044:	bf00      	nop
 8007046:	3714      	adds	r7, #20
 8007048:	46bd      	mov	sp, r7
 800704a:	bd90      	pop	{r4, r7, pc}
 800704c:	200000bc 	.word	0x200000bc
 8007050:	40011000 	.word	0x40011000
 8007054:	40010c00 	.word	0x40010c00

08007058 <LCD_DrawLine>:
	}
}
// Draw a line
//x1,y1: coordinate of starting point
//x2,y2: coordinate of terminal point
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b08d      	sub	sp, #52	; 0x34
 800705c:	af00      	add	r7, sp, #0
 800705e:	4604      	mov	r4, r0
 8007060:	4608      	mov	r0, r1
 8007062:	4611      	mov	r1, r2
 8007064:	461a      	mov	r2, r3
 8007066:	4623      	mov	r3, r4
 8007068:	80fb      	strh	r3, [r7, #6]
 800706a:	4603      	mov	r3, r0
 800706c:	80bb      	strh	r3, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	807b      	strh	r3, [r7, #2]
 8007072:	4613      	mov	r3, r2
 8007074:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 8007076:	2300      	movs	r3, #0
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
 800707a:	2300      	movs	r3, #0
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1; //计算坐标增量
 800707e:	887a      	ldrh	r2, [r7, #2]
 8007080:	88fb      	ldrh	r3, [r7, #6]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 8007086:	883a      	ldrh	r2, [r7, #0]
 8007088:	88bb      	ldrh	r3, [r7, #4]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8007092:	88bb      	ldrh	r3, [r7, #4]
 8007094:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 8007096:	6a3b      	ldr	r3, [r7, #32]
 8007098:	2b00      	cmp	r3, #0
 800709a:	dd02      	ble.n	80070a2 <LCD_DrawLine+0x4a>
		incx = 1; //设置单步方向
 800709c:	2301      	movs	r3, #1
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	e00b      	b.n	80070ba <LCD_DrawLine+0x62>
	else if (delta_x == 0)
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d102      	bne.n	80070ae <LCD_DrawLine+0x56>
		incx = 0; //垂直线
 80070a8:	2300      	movs	r3, #0
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	e005      	b.n	80070ba <LCD_DrawLine+0x62>
	else {
		incx = -1;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295
 80070b2:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	425b      	negs	r3, r3
 80070b8:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	dd02      	ble.n	80070c6 <LCD_DrawLine+0x6e>
		incy = 1;
 80070c0:	2301      	movs	r3, #1
 80070c2:	613b      	str	r3, [r7, #16]
 80070c4:	e00b      	b.n	80070de <LCD_DrawLine+0x86>
	else if (delta_y == 0)
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d102      	bne.n	80070d2 <LCD_DrawLine+0x7a>
		incy = 0; //水平线
 80070cc:	2300      	movs	r3, #0
 80070ce:	613b      	str	r3, [r7, #16]
 80070d0:	e005      	b.n	80070de <LCD_DrawLine+0x86>
	else {
		incy = -1;
 80070d2:	f04f 33ff 	mov.w	r3, #4294967295
 80070d6:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	425b      	negs	r3, r3
 80070dc:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	dd02      	ble.n	80070ec <LCD_DrawLine+0x94>
		distance = delta_x; //选取基本增量坐标轴
 80070e6:	6a3b      	ldr	r3, [r7, #32]
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e001      	b.n	80070f0 <LCD_DrawLine+0x98>
	else
		distance = delta_y;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	61bb      	str	r3, [r7, #24]
	for (t = 0; t <= distance + 1; t++) //画线输出
 80070f0:	2300      	movs	r3, #0
 80070f2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80070f4:	e02a      	b.n	800714c <LCD_DrawLine+0xf4>
			{
		LCD_DrawPoint(uRow, uCol); //画点
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	b292      	uxth	r2, r2
 80070fe:	4611      	mov	r1, r2
 8007100:	4618      	mov	r0, r3
 8007102:	f7fb fb17 	bl	8002734 <LCD_DrawPoint>
		xerr += delta_x;
 8007106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	4413      	add	r3, r2
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr += delta_y;
 800710e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	4413      	add	r3, r2
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
		if (xerr > distance) {
 8007116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	429a      	cmp	r2, r3
 800711c:	dd07      	ble.n	800712e <LCD_DrawLine+0xd6>
			xerr -= distance;
 800711e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow += incx;
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	4413      	add	r3, r2
 800712c:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 800712e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	429a      	cmp	r2, r3
 8007134:	dd07      	ble.n	8007146 <LCD_DrawLine+0xee>
			yerr -= distance;
 8007136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
			uCol += incy;
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	4413      	add	r3, r2
 8007144:	60bb      	str	r3, [r7, #8]
	for (t = 0; t <= distance + 1; t++) //画线输出
 8007146:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007148:	3301      	adds	r3, #1
 800714a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800714c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	3301      	adds	r3, #1
 8007152:	429a      	cmp	r2, r3
 8007154:	ddcf      	ble.n	80070f6 <LCD_DrawLine+0x9e>
		}
	}
}
 8007156:	bf00      	nop
 8007158:	3734      	adds	r7, #52	; 0x34
 800715a:	46bd      	mov	sp, r7
 800715c:	bd90      	pop	{r4, r7, pc}
	...

08007160 <LCD_ShowChar>:
// num: char to be displayed
// size: font size 12/16/24
// mode: display characters on the displayed content and do not wipe away the displayed content(1)
//       display characters on the displayed content and wipe away the displayed content(0)
void LCD_ShowChar(uint16_t x, uint16_t y, uint8_t num, uint8_t size,
		uint8_t mode) {
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	4604      	mov	r4, r0
 8007168:	4608      	mov	r0, r1
 800716a:	4611      	mov	r1, r2
 800716c:	461a      	mov	r2, r3
 800716e:	4623      	mov	r3, r4
 8007170:	80fb      	strh	r3, [r7, #6]
 8007172:	4603      	mov	r3, r0
 8007174:	80bb      	strh	r3, [r7, #4]
 8007176:	460b      	mov	r3, r1
 8007178:	70fb      	strb	r3, [r7, #3]
 800717a:	4613      	mov	r3, r2
 800717c:	70bb      	strb	r3, [r7, #2]
	uint8_t temp, t1, t;
	uint16_t y0 = y;
 800717e:	88bb      	ldrh	r3, [r7, #4]
 8007180:	817b      	strh	r3, [r7, #10]
	uint8_t csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2);	//得到字体一个字符对应点阵集所占的字节数
 8007182:	78bb      	ldrb	r3, [r7, #2]
 8007184:	08db      	lsrs	r3, r3, #3
 8007186:	b2db      	uxtb	r3, r3
 8007188:	461a      	mov	r2, r3
 800718a:	78bb      	ldrb	r3, [r7, #2]
 800718c:	f003 0307 	and.w	r3, r3, #7
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	bf14      	ite	ne
 8007196:	2301      	movne	r3, #1
 8007198:	2300      	moveq	r3, #0
 800719a:	b2db      	uxtb	r3, r3
 800719c:	4413      	add	r3, r2
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	78ba      	ldrb	r2, [r7, #2]
 80071a2:	0852      	lsrs	r2, r2, #1
 80071a4:	b2d2      	uxtb	r2, r2
 80071a6:	fb02 f303 	mul.w	r3, r2, r3
 80071aa:	727b      	strb	r3, [r7, #9]
	num = num - ' ';		//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	3b20      	subs	r3, #32
 80071b0:	70fb      	strb	r3, [r7, #3]
	for (t = 0; t < csize; t++) {
 80071b2:	2300      	movs	r3, #0
 80071b4:	737b      	strb	r3, [r7, #13]
 80071b6:	e069      	b.n	800728c <LCD_ShowChar+0x12c>
		if (size == 12)
 80071b8:	78bb      	ldrb	r3, [r7, #2]
 80071ba:	2b0c      	cmp	r3, #12
 80071bc:	d10b      	bne.n	80071d6 <LCD_ShowChar+0x76>
			temp = asc2_1206[num][t]; 	 	//调用1206字体
 80071be:	78fa      	ldrb	r2, [r7, #3]
 80071c0:	7b79      	ldrb	r1, [r7, #13]
 80071c2:	4838      	ldr	r0, [pc, #224]	; (80072a4 <LCD_ShowChar+0x144>)
 80071c4:	4613      	mov	r3, r2
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4403      	add	r3, r0
 80071ce:	440b      	add	r3, r1
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e019      	b.n	800720a <LCD_ShowChar+0xaa>
		else if (size == 16)
 80071d6:	78bb      	ldrb	r3, [r7, #2]
 80071d8:	2b10      	cmp	r3, #16
 80071da:	d108      	bne.n	80071ee <LCD_ShowChar+0x8e>
			temp = asc2_1608[num][t];	//调用1608字体
 80071dc:	78fa      	ldrb	r2, [r7, #3]
 80071de:	7b7b      	ldrb	r3, [r7, #13]
 80071e0:	4931      	ldr	r1, [pc, #196]	; (80072a8 <LCD_ShowChar+0x148>)
 80071e2:	0112      	lsls	r2, r2, #4
 80071e4:	440a      	add	r2, r1
 80071e6:	4413      	add	r3, r2
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	73fb      	strb	r3, [r7, #15]
 80071ec:	e00d      	b.n	800720a <LCD_ShowChar+0xaa>
		else if (size == 24)
 80071ee:	78bb      	ldrb	r3, [r7, #2]
 80071f0:	2b18      	cmp	r3, #24
 80071f2:	d150      	bne.n	8007296 <LCD_ShowChar+0x136>
			temp = asc2_2412[num][t];	//调用2412字体
 80071f4:	78fa      	ldrb	r2, [r7, #3]
 80071f6:	7b79      	ldrb	r1, [r7, #13]
 80071f8:	482c      	ldr	r0, [pc, #176]	; (80072ac <LCD_ShowChar+0x14c>)
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	4403      	add	r3, r0
 8007204:	440b      	add	r3, r1
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	73fb      	strb	r3, [r7, #15]
		else
			return;								//没有的字库
		for (t1 = 0; t1 < 8; t1++) {
 800720a:	2300      	movs	r3, #0
 800720c:	73bb      	strb	r3, [r7, #14]
 800720e:	e035      	b.n	800727c <LCD_ShowChar+0x11c>
			if (temp & 0x80)
 8007210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007214:	2b00      	cmp	r3, #0
 8007216:	da07      	bge.n	8007228 <LCD_ShowChar+0xc8>
				LCD_Fast_DrawPoint(x, y, POINT_COLOR);
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <LCD_ShowChar+0x150>)
 800721a:	881a      	ldrh	r2, [r3, #0]
 800721c:	88b9      	ldrh	r1, [r7, #4]
 800721e:	88fb      	ldrh	r3, [r7, #6]
 8007220:	4618      	mov	r0, r3
 8007222:	f7fb fab7 	bl	8002794 <LCD_Fast_DrawPoint>
 8007226:	e00a      	b.n	800723e <LCD_ShowChar+0xde>
			else if (mode == 0)
 8007228:	f897 3020 	ldrb.w	r3, [r7, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <LCD_ShowChar+0xde>
				LCD_Fast_DrawPoint(x, y, BACK_COLOR);
 8007230:	4b20      	ldr	r3, [pc, #128]	; (80072b4 <LCD_ShowChar+0x154>)
 8007232:	881a      	ldrh	r2, [r3, #0]
 8007234:	88b9      	ldrh	r1, [r7, #4]
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	4618      	mov	r0, r3
 800723a:	f7fb faab 	bl	8002794 <LCD_Fast_DrawPoint>
			temp <<= 1;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	005b      	lsls	r3, r3, #1
 8007242:	73fb      	strb	r3, [r7, #15]
			y++;
 8007244:	88bb      	ldrh	r3, [r7, #4]
 8007246:	3301      	adds	r3, #1
 8007248:	80bb      	strh	r3, [r7, #4]
			if (y >= lcddev.height)
 800724a:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <LCD_ShowChar+0x158>)
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	88ba      	ldrh	r2, [r7, #4]
 8007250:	429a      	cmp	r2, r3
 8007252:	d222      	bcs.n	800729a <LCD_ShowChar+0x13a>
				return;		//超区域了
			if ((y - y0) == size) {
 8007254:	88ba      	ldrh	r2, [r7, #4]
 8007256:	897b      	ldrh	r3, [r7, #10]
 8007258:	1ad2      	subs	r2, r2, r3
 800725a:	78bb      	ldrb	r3, [r7, #2]
 800725c:	429a      	cmp	r2, r3
 800725e:	d10a      	bne.n	8007276 <LCD_ShowChar+0x116>
				y = y0;
 8007260:	897b      	ldrh	r3, [r7, #10]
 8007262:	80bb      	strh	r3, [r7, #4]
				x++;
 8007264:	88fb      	ldrh	r3, [r7, #6]
 8007266:	3301      	adds	r3, #1
 8007268:	80fb      	strh	r3, [r7, #6]
				if (x >= lcddev.width)
 800726a:	4b13      	ldr	r3, [pc, #76]	; (80072b8 <LCD_ShowChar+0x158>)
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	88fa      	ldrh	r2, [r7, #6]
 8007270:	429a      	cmp	r2, r3
 8007272:	d307      	bcc.n	8007284 <LCD_ShowChar+0x124>
					return;	//超区域了
 8007274:	e012      	b.n	800729c <LCD_ShowChar+0x13c>
		for (t1 = 0; t1 < 8; t1++) {
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	3301      	adds	r3, #1
 800727a:	73bb      	strb	r3, [r7, #14]
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b07      	cmp	r3, #7
 8007280:	d9c6      	bls.n	8007210 <LCD_ShowChar+0xb0>
 8007282:	e000      	b.n	8007286 <LCD_ShowChar+0x126>
				break;
 8007284:	bf00      	nop
	for (t = 0; t < csize; t++) {
 8007286:	7b7b      	ldrb	r3, [r7, #13]
 8007288:	3301      	adds	r3, #1
 800728a:	737b      	strb	r3, [r7, #13]
 800728c:	7b7a      	ldrb	r2, [r7, #13]
 800728e:	7a7b      	ldrb	r3, [r7, #9]
 8007290:	429a      	cmp	r2, r3
 8007292:	d391      	bcc.n	80071b8 <LCD_ShowChar+0x58>
 8007294:	e002      	b.n	800729c <LCD_ShowChar+0x13c>
			return;								//没有的字库
 8007296:	bf00      	nop
 8007298:	e000      	b.n	800729c <LCD_ShowChar+0x13c>
				return;		//超区域了
 800729a:	bf00      	nop
			}
		}
	}
}
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd90      	pop	{r4, r7, pc}
 80072a2:	bf00      	nop
 80072a4:	08008a70 	.word	0x08008a70
 80072a8:	08008ee4 	.word	0x08008ee4
 80072ac:	080094d4 	.word	0x080094d4
 80072b0:	2000008c 	.word	0x2000008c
 80072b4:	20000006 	.word	0x20000006
 80072b8:	200000bc 	.word	0x200000bc

080072bc <LCD_ShowString>:
// x,y: starting coordinate
// width, height: display area size
// size: font size // x,y: starting coordinate
// *p: string
void LCD_ShowString(uint16_t x, uint16_t y, uint16_t width, uint16_t height,
		uint8_t size, uint8_t *p) {
 80072bc:	b590      	push	{r4, r7, lr}
 80072be:	b087      	sub	sp, #28
 80072c0:	af02      	add	r7, sp, #8
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	4611      	mov	r1, r2
 80072c8:	461a      	mov	r2, r3
 80072ca:	4623      	mov	r3, r4
 80072cc:	80fb      	strh	r3, [r7, #6]
 80072ce:	4603      	mov	r3, r0
 80072d0:	80bb      	strh	r3, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	807b      	strh	r3, [r7, #2]
 80072d6:	4613      	mov	r3, r2
 80072d8:	803b      	strh	r3, [r7, #0]
	uint8_t x0 = x;
 80072da:	88fb      	ldrh	r3, [r7, #6]
 80072dc:	73fb      	strb	r3, [r7, #15]
	width += x;
 80072de:	887a      	ldrh	r2, [r7, #2]
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	4413      	add	r3, r2
 80072e4:	807b      	strh	r3, [r7, #2]
	height += y;
 80072e6:	883a      	ldrh	r2, [r7, #0]
 80072e8:	88bb      	ldrh	r3, [r7, #4]
 80072ea:	4413      	add	r3, r2
 80072ec:	803b      	strh	r3, [r7, #0]
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 80072ee:	e025      	b.n	800733c <LCD_ShowString+0x80>
	{
		if (x >= width) {
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	887b      	ldrh	r3, [r7, #2]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d307      	bcc.n	8007308 <LCD_ShowString+0x4c>
			x = x0;
 80072f8:	7bfb      	ldrb	r3, [r7, #15]
 80072fa:	80fb      	strh	r3, [r7, #6]
			y += size;
 80072fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007300:	b29a      	uxth	r2, r3
 8007302:	88bb      	ldrh	r3, [r7, #4]
 8007304:	4413      	add	r3, r2
 8007306:	80bb      	strh	r3, [r7, #4]
		}
		if (y >= height)
 8007308:	88ba      	ldrh	r2, [r7, #4]
 800730a:	883b      	ldrh	r3, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d21e      	bcs.n	800734e <LCD_ShowString+0x92>
			break;	//退出
		LCD_ShowChar(x, y, *p, size, 0);
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	781a      	ldrb	r2, [r3, #0]
 8007314:	f897 4020 	ldrb.w	r4, [r7, #32]
 8007318:	88b9      	ldrh	r1, [r7, #4]
 800731a:	88f8      	ldrh	r0, [r7, #6]
 800731c:	2300      	movs	r3, #0
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	4623      	mov	r3, r4
 8007322:	f7ff ff1d 	bl	8007160 <LCD_ShowChar>
		x += size / 2;
 8007326:	f897 3020 	ldrb.w	r3, [r7, #32]
 800732a:	085b      	lsrs	r3, r3, #1
 800732c:	b2db      	uxtb	r3, r3
 800732e:	b29a      	uxth	r2, r3
 8007330:	88fb      	ldrh	r3, [r7, #6]
 8007332:	4413      	add	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
		p++;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	3301      	adds	r3, #1
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
	while ((*p <= '~') && (*p >= ' '))	//判断是不是非法字符!
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b7e      	cmp	r3, #126	; 0x7e
 8007342:	d805      	bhi.n	8007350 <LCD_ShowString+0x94>
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	2b1f      	cmp	r3, #31
 800734a:	d8d1      	bhi.n	80072f0 <LCD_ShowString+0x34>
	}
}
 800734c:	e000      	b.n	8007350 <LCD_ShowString+0x94>
			break;	//退出
 800734e:	bf00      	nop
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	bd90      	pop	{r4, r7, pc}

08007358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800735c:	f7f9 fb52 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007360:	f000 f80b 	bl	800737a <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LCD_Init();
 8007364:	f7fb fe5c 	bl	8003020 <LCD_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007368:	f7fa fa92 	bl	8001890 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
startpage();
 800736c:	f000 fad2 	bl	8007914 <startpage>
play();
 8007370:	f000 f9e4 	bl	800773c <play>
endpage();
 8007374:	f000 fa8a 	bl	800788c <endpage>
startpage();
 8007378:	e7f8      	b.n	800736c <main+0x14>

0800737a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b090      	sub	sp, #64	; 0x40
 800737e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007380:	f107 0318 	add.w	r3, r7, #24
 8007384:	2228      	movs	r2, #40	; 0x28
 8007386:	2100      	movs	r1, #0
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fa3d 	bl	8008808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	2200      	movs	r2, #0
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	605a      	str	r2, [r3, #4]
 8007396:	609a      	str	r2, [r3, #8]
 8007398:	60da      	str	r2, [r3, #12]
 800739a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800739c:	2301      	movs	r3, #1
 800739e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073a4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80073a6:	2300      	movs	r3, #0
 80073a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073aa:	2301      	movs	r3, #1
 80073ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073ae:	2302      	movs	r3, #2
 80073b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073b6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80073b8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073be:	f107 0318 	add.w	r3, r7, #24
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7f9 fe7a 	bl	80010bc <HAL_RCC_OscConfig>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80073ce:	f001 f8d7 	bl	8008580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073d2:	230f      	movs	r3, #15
 80073d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073d6:	2302      	movs	r3, #2
 80073d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073da:	2300      	movs	r3, #0
 80073dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80073e8:	1d3b      	adds	r3, r7, #4
 80073ea:	2102      	movs	r1, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f7fa f8e5 	bl	80015bc <HAL_RCC_ClockConfig>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <SystemClock_Config+0x82>
  {
    Error_Handler();
 80073f8:	f001 f8c2 	bl	8008580 <Error_Handler>
  }
}
 80073fc:	bf00      	nop
 80073fe:	3740      	adds	r7, #64	; 0x40
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//arm-none-eabi-objcopy "${ProjName}.elf" -O ihex "${ProjName}.hex"
//here key0 is gg,it should be right
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	4603      	mov	r3, r0
 800740c:	80fb      	strh	r3, [r7, #6]
HAL_Delay(100);
 800740e:	2064      	movs	r0, #100	; 0x64
 8007410:	f7f9 fb5a 	bl	8000ac8 <HAL_Delay>
switch (GPIO_Pin) {
 8007414:	88fb      	ldrh	r3, [r7, #6]
 8007416:	2b20      	cmp	r3, #32
 8007418:	d005      	beq.n	8007426 <HAL_GPIO_EXTI_Callback+0x22>
 800741a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800741e:	d01a      	beq.n	8007456 <HAL_GPIO_EXTI_Callback+0x52>
 8007420:	2b01      	cmp	r3, #1
 8007422:	d041      	beq.n	80074a8 <HAL_GPIO_EXTI_Callback+0xa4>
		}
	}
}
break;
default:
break;
 8007424:	e073      	b.n	800750e <HAL_GPIO_EXTI_Callback+0x10a>
if (HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin) == GPIO_PIN_RESET) {
 8007426:	2120      	movs	r1, #32
 8007428:	483b      	ldr	r0, [pc, #236]	; (8007518 <HAL_GPIO_EXTI_Callback+0x114>)
 800742a:	f7f9 fde7 	bl	8000ffc <HAL_GPIO_ReadPin>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d167      	bne.n	8007504 <HAL_GPIO_EXTI_Callback+0x100>
if(cond==1){
 8007434:	4b39      	ldr	r3, [pc, #228]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d163      	bne.n	8007504 <HAL_GPIO_EXTI_Callback+0x100>
	if(player[0]-10 > 5){
 800743c:	4b38      	ldr	r3, [pc, #224]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	3b0a      	subs	r3, #10
 8007442:	2b05      	cmp	r3, #5
 8007444:	dd5e      	ble.n	8007504 <HAL_GPIO_EXTI_Callback+0x100>
		player[0] = player[0]-5;
 8007446:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b05      	subs	r3, #5
 800744c:	4a34      	ldr	r2, [pc, #208]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 800744e:	6013      	str	r3, [r2, #0]
		paintall();
 8007450:	f000 ffe6 	bl	8008420 <paintall>
break;
 8007454:	e056      	b.n	8007504 <HAL_GPIO_EXTI_Callback+0x100>
if (HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_RESET) {
 8007456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800745a:	4832      	ldr	r0, [pc, #200]	; (8007524 <HAL_GPIO_EXTI_Callback+0x120>)
 800745c:	f7f9 fdce 	bl	8000ffc <HAL_GPIO_ReadPin>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d150      	bne.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
	if (cond==0){cond=1;}
 8007466:	4b2d      	ldr	r3, [pc, #180]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <HAL_GPIO_EXTI_Callback+0x72>
 800746e:	4b2b      	ldr	r3, [pc, #172]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 8007470:	2201      	movs	r2, #1
 8007472:	601a      	str	r2, [r3, #0]
break;
 8007474:	e048      	b.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
	else if(cond==1){
 8007476:	4b29      	ldr	r3, [pc, #164]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d10c      	bne.n	8007498 <HAL_GPIO_EXTI_Callback+0x94>
		if(player[0]+10 <220){
 800747e:	4b28      	ldr	r3, [pc, #160]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	330a      	adds	r3, #10
 8007484:	2bdb      	cmp	r3, #219	; 0xdb
 8007486:	dc3f      	bgt.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
			player[0] = player[0]+5;
 8007488:	4b25      	ldr	r3, [pc, #148]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3305      	adds	r3, #5
 800748e:	4a24      	ldr	r2, [pc, #144]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 8007490:	6013      	str	r3, [r2, #0]
			paintall();
 8007492:	f000 ffc5 	bl	8008420 <paintall>
break;
 8007496:	e037      	b.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
	else if(cond==2){cond=0;}
 8007498:	4b20      	ldr	r3, [pc, #128]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b02      	cmp	r3, #2
 800749e:	d133      	bne.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
 80074a0:	4b1e      	ldr	r3, [pc, #120]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
break;
 80074a6:	e02f      	b.n	8007508 <HAL_GPIO_EXTI_Callback+0x104>
if (HAL_GPIO_ReadPin(KEYUP_GPIO_Port, KEYUP_Pin) == GPIO_PIN_SET) {
 80074a8:	2101      	movs	r1, #1
 80074aa:	481e      	ldr	r0, [pc, #120]	; (8007524 <HAL_GPIO_EXTI_Callback+0x120>)
 80074ac:	f7f9 fda6 	bl	8000ffc <HAL_GPIO_ReadPin>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d12a      	bne.n	800750c <HAL_GPIO_EXTI_Callback+0x108>
	if(cond==1){
 80074b6:	4b19      	ldr	r3, [pc, #100]	; (800751c <HAL_GPIO_EXTI_Callback+0x118>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d126      	bne.n	800750c <HAL_GPIO_EXTI_Callback+0x108>
		for(int i=0; i<10; i++){
 80074be:	2300      	movs	r3, #0
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e01b      	b.n	80074fc <HAL_GPIO_EXTI_Callback+0xf8>
			if(bullet[i][0] == 0){
 80074c4:	4a18      	ldr	r2, [pc, #96]	; (8007528 <HAL_GPIO_EXTI_Callback+0x124>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d112      	bne.n	80074f6 <HAL_GPIO_EXTI_Callback+0xf2>
					bullet[i][0] = player[0];bullet[i][1] = player[1]-22;
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	4914      	ldr	r1, [pc, #80]	; (8007528 <HAL_GPIO_EXTI_Callback+0x124>)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <HAL_GPIO_EXTI_Callback+0x11c>)
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	f1a3 0216 	sub.w	r2, r3, #22
 80074e4:	4910      	ldr	r1, [pc, #64]	; (8007528 <HAL_GPIO_EXTI_Callback+0x124>)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	440b      	add	r3, r1
 80074ec:	605a      	str	r2, [r3, #4]
					paintall();
 80074ee:	f000 ff97 	bl	8008420 <paintall>
					break;
 80074f2:	bf00      	nop
break;
 80074f4:	e00a      	b.n	800750c <HAL_GPIO_EXTI_Callback+0x108>
		for(int i=0; i<10; i++){
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	3301      	adds	r3, #1
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b09      	cmp	r3, #9
 8007500:	dde0      	ble.n	80074c4 <HAL_GPIO_EXTI_Callback+0xc0>
break;
 8007502:	e003      	b.n	800750c <HAL_GPIO_EXTI_Callback+0x108>
break;
 8007504:	bf00      	nop
 8007506:	e002      	b.n	800750e <HAL_GPIO_EXTI_Callback+0x10a>
break;
 8007508:	bf00      	nop
 800750a:	e000      	b.n	800750e <HAL_GPIO_EXTI_Callback+0x10a>
break;
 800750c:	bf00      	nop
}}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	40011000 	.word	0x40011000
 800751c:	20000098 	.word	0x20000098
 8007520:	2000016c 	.word	0x2000016c
 8007524:	40010800 	.word	0x40010800
 8007528:	2000011c 	.word	0x2000011c

0800752c <init_eachround>:

//set enemy and plane
void init_eachround(void){
 800752c:	b580      	push	{r7, lr}
 800752e:	b08e      	sub	sp, #56	; 0x38
 8007530:	af02      	add	r7, sp, #8
	player[0]=120;player[1]=280;
 8007532:	4b7a      	ldr	r3, [pc, #488]	; (800771c <init_eachround+0x1f0>)
 8007534:	2278      	movs	r2, #120	; 0x78
 8007536:	601a      	str	r2, [r3, #0]
 8007538:	4b78      	ldr	r3, [pc, #480]	; (800771c <init_eachround+0x1f0>)
 800753a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800753e:	605a      	str	r2, [r3, #4]
	if(roundit<=3)enemynum=1;else if(roundit>3&&roundit<=5)enemynum=roundit;else enemynum=6;
 8007540:	4b77      	ldr	r3, [pc, #476]	; (8007720 <init_eachround+0x1f4>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2b03      	cmp	r3, #3
 8007546:	dc03      	bgt.n	8007550 <init_eachround+0x24>
 8007548:	4b76      	ldr	r3, [pc, #472]	; (8007724 <init_eachround+0x1f8>)
 800754a:	2201      	movs	r2, #1
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e00f      	b.n	8007570 <init_eachround+0x44>
 8007550:	4b73      	ldr	r3, [pc, #460]	; (8007720 <init_eachround+0x1f4>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b03      	cmp	r3, #3
 8007556:	dd08      	ble.n	800756a <init_eachround+0x3e>
 8007558:	4b71      	ldr	r3, [pc, #452]	; (8007720 <init_eachround+0x1f4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	2b05      	cmp	r3, #5
 800755e:	dc04      	bgt.n	800756a <init_eachround+0x3e>
 8007560:	4b6f      	ldr	r3, [pc, #444]	; (8007720 <init_eachround+0x1f4>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a6f      	ldr	r2, [pc, #444]	; (8007724 <init_eachround+0x1f8>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	e002      	b.n	8007570 <init_eachround+0x44>
 800756a:	4b6e      	ldr	r3, [pc, #440]	; (8007724 <init_eachround+0x1f8>)
 800756c:	2206      	movs	r2, #6
 800756e:	601a      	str	r2, [r3, #0]
	if(roundit<=3)speed=1;else if(roundit>3&&roundit<=6)speed=roundit-2;else speed=4;
 8007570:	4b6b      	ldr	r3, [pc, #428]	; (8007720 <init_eachround+0x1f4>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b03      	cmp	r3, #3
 8007576:	dc03      	bgt.n	8007580 <init_eachround+0x54>
 8007578:	4b6b      	ldr	r3, [pc, #428]	; (8007728 <init_eachround+0x1fc>)
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e010      	b.n	80075a2 <init_eachround+0x76>
 8007580:	4b67      	ldr	r3, [pc, #412]	; (8007720 <init_eachround+0x1f4>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b03      	cmp	r3, #3
 8007586:	dd09      	ble.n	800759c <init_eachround+0x70>
 8007588:	4b65      	ldr	r3, [pc, #404]	; (8007720 <init_eachround+0x1f4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b06      	cmp	r3, #6
 800758e:	dc05      	bgt.n	800759c <init_eachround+0x70>
 8007590:	4b63      	ldr	r3, [pc, #396]	; (8007720 <init_eachround+0x1f4>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3b02      	subs	r3, #2
 8007596:	4a64      	ldr	r2, [pc, #400]	; (8007728 <init_eachround+0x1fc>)
 8007598:	6013      	str	r3, [r2, #0]
 800759a:	e002      	b.n	80075a2 <init_eachround+0x76>
 800759c:	4b62      	ldr	r3, [pc, #392]	; (8007728 <init_eachround+0x1fc>)
 800759e:	2204      	movs	r2, #4
 80075a0:	601a      	str	r2, [r3, #0]
	//clear planes
	for(int i=0;i<10;i++){enemybullet[i][0]=0;enemybullet[i][1]=0;}
 80075a2:	2300      	movs	r3, #0
 80075a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075a6:	e00d      	b.n	80075c4 <init_eachround+0x98>
 80075a8:	4a60      	ldr	r2, [pc, #384]	; (800772c <init_eachround+0x200>)
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	2100      	movs	r1, #0
 80075ae:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80075b2:	4a5e      	ldr	r2, [pc, #376]	; (800772c <init_eachround+0x200>)
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	2200      	movs	r2, #0
 80075bc:	605a      	str	r2, [r3, #4]
 80075be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c0:	3301      	adds	r3, #1
 80075c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c6:	2b09      	cmp	r3, #9
 80075c8:	ddee      	ble.n	80075a8 <init_eachround+0x7c>
	for(int i=0;i<10;i++){enemy[i][0]=0;enemy[i][1]=0;}
 80075ca:	2300      	movs	r3, #0
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ce:	e00d      	b.n	80075ec <init_eachround+0xc0>
 80075d0:	4a57      	ldr	r2, [pc, #348]	; (8007730 <init_eachround+0x204>)
 80075d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d4:	2100      	movs	r1, #0
 80075d6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80075da:	4a55      	ldr	r2, [pc, #340]	; (8007730 <init_eachround+0x204>)
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4413      	add	r3, r2
 80075e2:	2200      	movs	r2, #0
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	3301      	adds	r3, #1
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	ddee      	ble.n	80075d0 <init_eachround+0xa4>
	for(int i=0;i<10;i++){bullet[i][0]=0;bullet[i][1]=0;}
 80075f2:	2300      	movs	r3, #0
 80075f4:	627b      	str	r3, [r7, #36]	; 0x24
 80075f6:	e00d      	b.n	8007614 <init_eachround+0xe8>
 80075f8:	4a4e      	ldr	r2, [pc, #312]	; (8007734 <init_eachround+0x208>)
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	2100      	movs	r1, #0
 80075fe:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007602:	4a4c      	ldr	r2, [pc, #304]	; (8007734 <init_eachround+0x208>)
 8007604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	3301      	adds	r3, #1
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
 8007614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007616:	2b09      	cmp	r3, #9
 8007618:	ddee      	ble.n	80075f8 <init_eachround+0xcc>

	LCD_Fill(1,41,239,318,BACK_COLOR);
 800761a:	4b47      	ldr	r3, [pc, #284]	; (8007738 <init_eachround+0x20c>)
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8007624:	22ef      	movs	r2, #239	; 0xef
 8007626:	2129      	movs	r1, #41	; 0x29
 8007628:	2001      	movs	r0, #1
 800762a:	f7ff fc89 	bl	8006f40 <LCD_Fill>
	//clear bullets
	int startposx1=30;int startposy1=70;
 800762e:	231e      	movs	r3, #30
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	2346      	movs	r3, #70	; 0x46
 8007634:	60bb      	str	r3, [r7, #8]
	int startposx2=30;int startposy2=120;
 8007636:	231e      	movs	r3, #30
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	2378      	movs	r3, #120	; 0x78
 800763c:	607b      	str	r3, [r7, #4]
	int rop1=0;int rop2=0;
 800763e:	2300      	movs	r3, #0
 8007640:	61bb      	str	r3, [r7, #24]
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]
	if (enemynum<=5){rop1=enemynum;}else if(enemynum>5&&enemynum<=10){rop2=enemynum-5;rop1=5;}
 8007646:	4b37      	ldr	r3, [pc, #220]	; (8007724 <init_eachround+0x1f8>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b05      	cmp	r3, #5
 800764c:	dc03      	bgt.n	8007656 <init_eachround+0x12a>
 800764e:	4b35      	ldr	r3, [pc, #212]	; (8007724 <init_eachround+0x1f8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	61bb      	str	r3, [r7, #24]
 8007654:	e00d      	b.n	8007672 <init_eachround+0x146>
 8007656:	4b33      	ldr	r3, [pc, #204]	; (8007724 <init_eachround+0x1f8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b05      	cmp	r3, #5
 800765c:	dd09      	ble.n	8007672 <init_eachround+0x146>
 800765e:	4b31      	ldr	r3, [pc, #196]	; (8007724 <init_eachround+0x1f8>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b0a      	cmp	r3, #10
 8007664:	dc05      	bgt.n	8007672 <init_eachround+0x146>
 8007666:	4b2f      	ldr	r3, [pc, #188]	; (8007724 <init_eachround+0x1f8>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3b05      	subs	r3, #5
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	2305      	movs	r3, #5
 8007670:	61bb      	str	r3, [r7, #24]
	int gg=rand()%16-8;
 8007672:	f001 f8d1 	bl	8008818 <rand>
 8007676:	4603      	mov	r3, r0
 8007678:	425a      	negs	r2, r3
 800767a:	f003 030f 	and.w	r3, r3, #15
 800767e:	f002 020f 	and.w	r2, r2, #15
 8007682:	bf58      	it	pl
 8007684:	4253      	negpl	r3, r2
 8007686:	3b08      	subs	r3, #8
 8007688:	603b      	str	r3, [r7, #0]
	for(int i=0; i<rop1; i++){
 800768a:	2300      	movs	r3, #0
 800768c:	613b      	str	r3, [r7, #16]
 800768e:	e01d      	b.n	80076cc <init_eachround+0x1a0>
			enemy[i][0]=startposx1;enemybullet[i][0]=startposx1+gg;
 8007690:	4927      	ldr	r1, [pc, #156]	; (8007730 <init_eachround+0x204>)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	6a3a      	ldr	r2, [r7, #32]
 8007696:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	441a      	add	r2, r3
 80076a0:	4922      	ldr	r1, [pc, #136]	; (800772c <init_eachround+0x200>)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			enemy[i][1]=startposy1;enemybullet[i][1]=startposy1;
 80076a8:	4a21      	ldr	r2, [pc, #132]	; (8007730 <init_eachround+0x204>)
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	00db      	lsls	r3, r3, #3
 80076ae:	4413      	add	r3, r2
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	605a      	str	r2, [r3, #4]
 80076b4:	4a1d      	ldr	r2, [pc, #116]	; (800772c <init_eachround+0x200>)
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	4413      	add	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	605a      	str	r2, [r3, #4]
			startposx1+=40;
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	3328      	adds	r3, #40	; 0x28
 80076c4:	623b      	str	r3, [r7, #32]
	for(int i=0; i<rop1; i++){
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3301      	adds	r3, #1
 80076ca:	613b      	str	r3, [r7, #16]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	dbdd      	blt.n	8007690 <init_eachround+0x164>
		}
	if(rop2>0){
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dd19      	ble.n	800770e <init_eachround+0x1e2>
		for(int i=0; i<rop2; i++){
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e012      	b.n	8007706 <init_eachround+0x1da>
					enemy[i+5][0]=startposx2;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	3305      	adds	r3, #5
 80076e4:	4912      	ldr	r1, [pc, #72]	; (8007730 <init_eachround+0x204>)
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
					enemy[i+5][1]=startposy2;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	3305      	adds	r3, #5
 80076f0:	4a0f      	ldr	r2, [pc, #60]	; (8007730 <init_eachround+0x204>)
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	4413      	add	r3, r2
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]
					startposx2+=40;
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	3328      	adds	r3, #40	; 0x28
 80076fe:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<rop2; i++){
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	3301      	adds	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	429a      	cmp	r2, r3
 800770c:	dbe8      	blt.n	80076e0 <init_eachround+0x1b4>
				}
	}
	paintall();
 800770e:	f000 fe87 	bl	8008420 <paintall>
}
 8007712:	bf00      	nop
 8007714:	3730      	adds	r7, #48	; 0x30
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	2000016c 	.word	0x2000016c
 8007720:	200000a0 	.word	0x200000a0
 8007724:	200000a4 	.word	0x200000a4
 8007728:	200000a8 	.word	0x200000a8
 800772c:	200000cc 	.word	0x200000cc
 8007730:	20000174 	.word	0x20000174
 8007734:	2000011c 	.word	0x2000011c
 8007738:	20000006 	.word	0x20000006

0800773c <play>:
//if you don't die, then next roundit
void play(void){
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af02      	add	r7, sp, #8
	score=0;
 8007742:	4b48      	ldr	r3, [pc, #288]	; (8007864 <play+0x128>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
	roundit=1;
 8007748:	4b47      	ldr	r3, [pc, #284]	; (8007868 <play+0x12c>)
 800774a:	2201      	movs	r2, #1
 800774c:	601a      	str	r2, [r3, #0]
	life=3;
 800774e:	4b47      	ldr	r3, [pc, #284]	; (800786c <play+0x130>)
 8007750:	2203      	movs	r2, #3
 8007752:	601a      	str	r2, [r3, #0]
	kz=0;
 8007754:	4b46      	ldr	r3, [pc, #280]	; (8007870 <play+0x134>)
 8007756:	2200      	movs	r2, #0
 8007758:	601a      	str	r2, [r3, #0]
	BACK_COLOR=WHITE;
 800775a:	4b46      	ldr	r3, [pc, #280]	; (8007874 <play+0x138>)
 800775c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007760:	801a      	strh	r2, [r3, #0]
	LCD_Clear(BACK_COLOR);
 8007762:	4b44      	ldr	r3, [pc, #272]	; (8007874 <play+0x138>)
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff fb88 	bl	8006e7c <LCD_Clear>
		while(1){
			if(kz==0)BACK_COLOR=WHITE;
 800776c:	4b40      	ldr	r3, [pc, #256]	; (8007870 <play+0x134>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d103      	bne.n	800777c <play+0x40>
 8007774:	4b3f      	ldr	r3, [pc, #252]	; (8007874 <play+0x138>)
 8007776:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800777a:	801a      	strh	r2, [r3, #0]
			if(kz==3)BACK_COLOR=GREEN;
 800777c:	4b3c      	ldr	r3, [pc, #240]	; (8007870 <play+0x134>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b03      	cmp	r3, #3
 8007782:	d104      	bne.n	800778e <play+0x52>
 8007784:	4b3b      	ldr	r3, [pc, #236]	; (8007874 <play+0x138>)
 8007786:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800778a:	801a      	strh	r2, [r3, #0]
 800778c:	e00f      	b.n	80077ae <play+0x72>
			else if (kz==6)BACK_COLOR=RED;
 800778e:	4b38      	ldr	r3, [pc, #224]	; (8007870 <play+0x134>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b06      	cmp	r3, #6
 8007794:	d104      	bne.n	80077a0 <play+0x64>
 8007796:	4b37      	ldr	r3, [pc, #220]	; (8007874 <play+0x138>)
 8007798:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800779c:	801a      	strh	r2, [r3, #0]
 800779e:	e006      	b.n	80077ae <play+0x72>
			else if (kz==9)BACK_COLOR=BLUE;
 80077a0:	4b33      	ldr	r3, [pc, #204]	; (8007870 <play+0x134>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b09      	cmp	r3, #9
 80077a6:	d102      	bne.n	80077ae <play+0x72>
 80077a8:	4b32      	ldr	r3, [pc, #200]	; (8007874 <play+0x138>)
 80077aa:	221f      	movs	r2, #31
 80077ac:	801a      	strh	r2, [r3, #0]
			LCD_Clear(BACK_COLOR);
 80077ae:	4b31      	ldr	r3, [pc, #196]	; (8007874 <play+0x138>)
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7ff fb62 	bl	8006e7c <LCD_Clear>
			LCD_ShowString(5,8,90,16,16,(uint8_t*)"score");
 80077b8:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <play+0x13c>)
 80077ba:	9301      	str	r3, [sp, #4]
 80077bc:	2310      	movs	r3, #16
 80077be:	9300      	str	r3, [sp, #0]
 80077c0:	2310      	movs	r3, #16
 80077c2:	225a      	movs	r2, #90	; 0x5a
 80077c4:	2108      	movs	r1, #8
 80077c6:	2005      	movs	r0, #5
 80077c8:	f7ff fd78 	bl	80072bc <LCD_ShowString>
			LCD_ShowString(135,8,90,16,16,(uint8_t*)"life");
 80077cc:	4b2b      	ldr	r3, [pc, #172]	; (800787c <play+0x140>)
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	2310      	movs	r3, #16
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	2310      	movs	r3, #16
 80077d6:	225a      	movs	r2, #90	; 0x5a
 80077d8:	2108      	movs	r1, #8
 80077da:	2087      	movs	r0, #135	; 0x87
 80077dc:	f7ff fd6e 	bl	80072bc <LCD_ShowString>
			init_eachround();
 80077e0:	f7ff fea4 	bl	800752c <init_eachround>
			while(1){
				updatebullets();
 80077e4:	f000 f8c8 	bl	8007978 <updatebullets>
				updateenemy();
 80077e8:	f000 f98e 	bl	8007b08 <updateenemy>
				updateenemybullets();
 80077ec:	f000 f926 	bl	8007a3c <updateenemybullets>
				dieit();
 80077f0:	f000 f9ee 	bl	8007bd0 <dieit>
				hitit();
 80077f4:	f000 fb5c 	bl	8007eb0 <hitit>
				paintall();
 80077f8:	f000 fe12 	bl	8008420 <paintall>
				if(life<=0){
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <play+0x130>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	dc03      	bgt.n	800780c <play+0xd0>
					cond=2;break;
 8007804:	4b1e      	ldr	r3, [pc, #120]	; (8007880 <play+0x144>)
 8007806:	2202      	movs	r2, #2
 8007808:	601a      	str	r2, [r3, #0]
 800780a:	e005      	b.n	8007818 <play+0xdc>
				}
				if(enemy[0][0]==0){break;}
 800780c:	4b1d      	ldr	r3, [pc, #116]	; (8007884 <play+0x148>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d000      	beq.n	8007816 <play+0xda>
				updatebullets();
 8007814:	e7e6      	b.n	80077e4 <play+0xa8>
				if(enemy[0][0]==0){break;}
 8007816:	bf00      	nop

			}
			kz++;
 8007818:	4b15      	ldr	r3, [pc, #84]	; (8007870 <play+0x134>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3301      	adds	r3, #1
 800781e:	4a14      	ldr	r2, [pc, #80]	; (8007870 <play+0x134>)
 8007820:	6013      	str	r3, [r2, #0]
			kz%=12;
 8007822:	4b13      	ldr	r3, [pc, #76]	; (8007870 <play+0x134>)
 8007824:	6819      	ldr	r1, [r3, #0]
 8007826:	4b18      	ldr	r3, [pc, #96]	; (8007888 <play+0x14c>)
 8007828:	fb83 2301 	smull	r2, r3, r3, r1
 800782c:	105a      	asrs	r2, r3, #1
 800782e:	17cb      	asrs	r3, r1, #31
 8007830:	1ad2      	subs	r2, r2, r3
 8007832:	4613      	mov	r3, r2
 8007834:	005b      	lsls	r3, r3, #1
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	1aca      	subs	r2, r1, r3
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <play+0x134>)
 800783e:	601a      	str	r2, [r3, #0]
			roundit+=1;
 8007840:	4b09      	ldr	r3, [pc, #36]	; (8007868 <play+0x12c>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	4a08      	ldr	r2, [pc, #32]	; (8007868 <play+0x12c>)
 8007848:	6013      	str	r3, [r2, #0]
			if(cond!=1)break;
 800784a:	4b0d      	ldr	r3, [pc, #52]	; (8007880 <play+0x144>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d103      	bne.n	800785a <play+0x11e>
			HAL_Delay(10);
 8007852:	200a      	movs	r0, #10
 8007854:	f7f9 f938 	bl	8000ac8 <HAL_Delay>
			if(kz==0)BACK_COLOR=WHITE;
 8007858:	e788      	b.n	800776c <play+0x30>
			if(cond!=1)break;
 800785a:	bf00      	nop
	}
}
 800785c:	bf00      	nop
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000094 	.word	0x20000094
 8007868:	200000a0 	.word	0x200000a0
 800786c:	2000009c 	.word	0x2000009c
 8007870:	20000090 	.word	0x20000090
 8007874:	20000006 	.word	0x20000006
 8007878:	08008a10 	.word	0x08008a10
 800787c:	08008a18 	.word	0x08008a18
 8007880:	20000098 	.word	0x20000098
 8007884:	20000174 	.word	0x20000174
 8007888:	2aaaaaab 	.word	0x2aaaaaab

0800788c <endpage>:
void endpage(void){
 800788c:	b580      	push	{r7, lr}
 800788e:	b082      	sub	sp, #8
 8007890:	af02      	add	r7, sp, #8
	LCD_Clear(BACK_COLOR);
 8007892:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <endpage+0x70>)
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff faf0 	bl	8006e7c <LCD_Clear>
	POINT_COLOR = BLACK;
 800789c:	4b18      	ldr	r3, [pc, #96]	; (8007900 <endpage+0x74>)
 800789e:	2200      	movs	r2, #0
 80078a0:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "GAMEOVER");
 80078a2:	4b18      	ldr	r3, [pc, #96]	; (8007904 <endpage+0x78>)
 80078a4:	9301      	str	r3, [sp, #4]
 80078a6:	2318      	movs	r3, #24
 80078a8:	9300      	str	r3, [sp, #0]
 80078aa:	2318      	movs	r3, #24
 80078ac:	22c8      	movs	r2, #200	; 0xc8
 80078ae:	2128      	movs	r1, #40	; 0x28
 80078b0:	201e      	movs	r0, #30
 80078b2:	f7ff fd03 	bl	80072bc <LCD_ShowString>
	LCD_ShowString(30, 70, 200, 16, 16, (uint8_t*) "Your score is");
 80078b6:	4b14      	ldr	r3, [pc, #80]	; (8007908 <endpage+0x7c>)
 80078b8:	9301      	str	r3, [sp, #4]
 80078ba:	2310      	movs	r3, #16
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	2310      	movs	r3, #16
 80078c0:	22c8      	movs	r2, #200	; 0xc8
 80078c2:	2146      	movs	r1, #70	; 0x46
 80078c4:	201e      	movs	r0, #30
 80078c6:	f7ff fcf9 	bl	80072bc <LCD_ShowString>
	paintscore(150, 70, 16);
 80078ca:	2210      	movs	r2, #16
 80078cc:	2146      	movs	r1, #70	; 0x46
 80078ce:	2096      	movs	r0, #150	; 0x96
 80078d0:	f000 fd84 	bl	80083dc <paintscore>

	LCD_ShowString(30, 100, 200, 16, 16, (uint8_t*) "press KEY1 to back");
 80078d4:	4b0d      	ldr	r3, [pc, #52]	; (800790c <endpage+0x80>)
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	2310      	movs	r3, #16
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	2310      	movs	r3, #16
 80078de:	22c8      	movs	r2, #200	; 0xc8
 80078e0:	2164      	movs	r1, #100	; 0x64
 80078e2:	201e      	movs	r0, #30
 80078e4:	f7ff fcea 	bl	80072bc <LCD_ShowString>
	while(1){
		if(cond!=2)break;
 80078e8:	4b09      	ldr	r3, [pc, #36]	; (8007910 <endpage+0x84>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d100      	bne.n	80078f2 <endpage+0x66>
 80078f0:	e7fa      	b.n	80078e8 <endpage+0x5c>
 80078f2:	bf00      	nop
		}
}
 80078f4:	bf00      	nop
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000006 	.word	0x20000006
 8007900:	2000008c 	.word	0x2000008c
 8007904:	08008a20 	.word	0x08008a20
 8007908:	08008a2c 	.word	0x08008a2c
 800790c:	08008a3c 	.word	0x08008a3c
 8007910:	20000098 	.word	0x20000098

08007914 <startpage>:
void startpage(void){
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af02      	add	r7, sp, #8
	LCD_Clear(BACK_COLOR);
 800791a:	4b12      	ldr	r3, [pc, #72]	; (8007964 <startpage+0x50>)
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	4618      	mov	r0, r3
 8007920:	f7ff faac 	bl	8006e7c <LCD_Clear>
		POINT_COLOR = BLACK;
 8007924:	4b10      	ldr	r3, [pc, #64]	; (8007968 <startpage+0x54>)
 8007926:	2200      	movs	r2, #0
 8007928:	801a      	strh	r2, [r3, #0]
		LCD_ShowString(30, 40, 200, 24, 24, (uint8_t*) "STM32 SHUMP");
 800792a:	4b10      	ldr	r3, [pc, #64]	; (800796c <startpage+0x58>)
 800792c:	9301      	str	r3, [sp, #4]
 800792e:	2318      	movs	r3, #24
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	2318      	movs	r3, #24
 8007934:	22c8      	movs	r2, #200	; 0xc8
 8007936:	2128      	movs	r1, #40	; 0x28
 8007938:	201e      	movs	r0, #30
 800793a:	f7ff fcbf 	bl	80072bc <LCD_ShowString>
		LCD_ShowString(30, 100, 200, 16, 16, (uint8_t*) "press KEY1 to start");
 800793e:	4b0c      	ldr	r3, [pc, #48]	; (8007970 <startpage+0x5c>)
 8007940:	9301      	str	r3, [sp, #4]
 8007942:	2310      	movs	r3, #16
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	2310      	movs	r3, #16
 8007948:	22c8      	movs	r2, #200	; 0xc8
 800794a:	2164      	movs	r1, #100	; 0x64
 800794c:	201e      	movs	r0, #30
 800794e:	f7ff fcb5 	bl	80072bc <LCD_ShowString>
		while(1){
			if(cond!=0)break;
 8007952:	4b08      	ldr	r3, [pc, #32]	; (8007974 <startpage+0x60>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d100      	bne.n	800795c <startpage+0x48>
 800795a:	e7fa      	b.n	8007952 <startpage+0x3e>
 800795c:	bf00      	nop
			}

}
 800795e:	bf00      	nop
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	20000006 	.word	0x20000006
 8007968:	2000008c 	.word	0x2000008c
 800796c:	08008a50 	.word	0x08008a50
 8007970:	08008a5c 	.word	0x08008a5c
 8007974:	20000098 	.word	0x20000098

08007978 <updatebullets>:
//bullet is 3x3
void updatebullets(){
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b085      	sub	sp, #20
 800797c:	af02      	add	r7, sp, #8
	for(int i=0; i<10; i++){
 800797e:	2300      	movs	r3, #0
 8007980:	607b      	str	r3, [r7, #4]
 8007982:	e04e      	b.n	8007a22 <updatebullets+0xaa>
		if(bullet[i][0] != 0){
 8007984:	4a2a      	ldr	r2, [pc, #168]	; (8007a30 <updatebullets+0xb8>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d045      	beq.n	8007a1c <updatebullets+0xa4>
			LCD_Fill(bullet[i][0]-1,bullet[i][1]-1,bullet[i][0]+1,bullet[i][1]+1,BACK_COLOR);
 8007990:	4a27      	ldr	r2, [pc, #156]	; (8007a30 <updatebullets+0xb8>)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007998:	b29b      	uxth	r3, r3
 800799a:	3b01      	subs	r3, #1
 800799c:	b298      	uxth	r0, r3
 800799e:	4a24      	ldr	r2, [pc, #144]	; (8007a30 <updatebullets+0xb8>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	4413      	add	r3, r2
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b299      	uxth	r1, r3
 80079ae:	4a20      	ldr	r2, [pc, #128]	; (8007a30 <updatebullets+0xb8>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	3301      	adds	r3, #1
 80079ba:	b29c      	uxth	r4, r3
 80079bc:	4a1c      	ldr	r2, [pc, #112]	; (8007a30 <updatebullets+0xb8>)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	4413      	add	r3, r2
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3301      	adds	r3, #1
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <updatebullets+0xbc>)
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	9300      	str	r3, [sp, #0]
 80079d2:	4613      	mov	r3, r2
 80079d4:	4622      	mov	r2, r4
 80079d6:	f7ff fab3 	bl	8006f40 <LCD_Fill>
			bullet[i][1] = bullet[i][1] - speed;
 80079da:	4a15      	ldr	r2, [pc, #84]	; (8007a30 <updatebullets+0xb8>)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	4413      	add	r3, r2
 80079e2:	685a      	ldr	r2, [r3, #4]
 80079e4:	4b14      	ldr	r3, [pc, #80]	; (8007a38 <updatebullets+0xc0>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1ad2      	subs	r2, r2, r3
 80079ea:	4911      	ldr	r1, [pc, #68]	; (8007a30 <updatebullets+0xb8>)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	00db      	lsls	r3, r3, #3
 80079f0:	440b      	add	r3, r1
 80079f2:	605a      	str	r2, [r3, #4]
			if(bullet[i][1] < 42){bullet[i][0] = 0;bullet[i][1] = 0;movebullets();}
 80079f4:	4a0e      	ldr	r2, [pc, #56]	; (8007a30 <updatebullets+0xb8>)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	2b29      	cmp	r3, #41	; 0x29
 8007a00:	dc0c      	bgt.n	8007a1c <updatebullets+0xa4>
 8007a02:	4a0b      	ldr	r2, [pc, #44]	; (8007a30 <updatebullets+0xb8>)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2100      	movs	r1, #0
 8007a08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007a0c:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <updatebullets+0xb8>)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4413      	add	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	605a      	str	r2, [r3, #4]
 8007a18:	f000 fb42 	bl	80080a0 <movebullets>
	for(int i=0; i<10; i++){
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b09      	cmp	r3, #9
 8007a26:	ddad      	ble.n	8007984 <updatebullets+0xc>
		}
	}

}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd90      	pop	{r4, r7, pc}
 8007a30:	2000011c 	.word	0x2000011c
 8007a34:	20000006 	.word	0x20000006
 8007a38:	200000a8 	.word	0x200000a8

08007a3c <updateenemybullets>:
void updateenemybullets(){
 8007a3c:	b590      	push	{r4, r7, lr}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af02      	add	r7, sp, #8
	for(int i=0; i<10; i++){
 8007a42:	2300      	movs	r3, #0
 8007a44:	607b      	str	r3, [r7, #4]
 8007a46:	e050      	b.n	8007aea <updateenemybullets+0xae>
		if(enemybullet[i][0] != 0){
 8007a48:	4a2b      	ldr	r2, [pc, #172]	; (8007af8 <updateenemybullets+0xbc>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d047      	beq.n	8007ae4 <updateenemybullets+0xa8>
			LCD_Fill(enemybullet[i][0]-4,enemybullet[i][1]-4,enemybullet[i][0]+4,enemybullet[i][1]+4,BACK_COLOR);
 8007a54:	4a28      	ldr	r2, [pc, #160]	; (8007af8 <updateenemybullets+0xbc>)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	3b04      	subs	r3, #4
 8007a60:	b298      	uxth	r0, r3
 8007a62:	4a25      	ldr	r2, [pc, #148]	; (8007af8 <updateenemybullets+0xbc>)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	3b04      	subs	r3, #4
 8007a70:	b299      	uxth	r1, r3
 8007a72:	4a21      	ldr	r2, [pc, #132]	; (8007af8 <updateenemybullets+0xbc>)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	3304      	adds	r3, #4
 8007a7e:	b29c      	uxth	r4, r3
 8007a80:	4a1d      	ldr	r2, [pc, #116]	; (8007af8 <updateenemybullets+0xbc>)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	00db      	lsls	r3, r3, #3
 8007a86:	4413      	add	r3, r2
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	4b1a      	ldr	r3, [pc, #104]	; (8007afc <updateenemybullets+0xc0>)
 8007a92:	881b      	ldrh	r3, [r3, #0]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4613      	mov	r3, r2
 8007a98:	4622      	mov	r2, r4
 8007a9a:	f7ff fa51 	bl	8006f40 <LCD_Fill>
			enemybullet[i][1] = enemybullet[i][1] + speed*2;
 8007a9e:	4a16      	ldr	r2, [pc, #88]	; (8007af8 <updateenemybullets+0xbc>)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <updateenemybullets+0xc4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	005b      	lsls	r3, r3, #1
 8007aae:	441a      	add	r2, r3
 8007ab0:	4911      	ldr	r1, [pc, #68]	; (8007af8 <updateenemybullets+0xbc>)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	440b      	add	r3, r1
 8007ab8:	605a      	str	r2, [r3, #4]
			if(bullet[i][1] > 290){enemybullet[i][0] = 0;enemybullet[i][1] = 0;moveenemybullets();}
 8007aba:	4a12      	ldr	r2, [pc, #72]	; (8007b04 <updateenemybullets+0xc8>)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	00db      	lsls	r3, r3, #3
 8007ac0:	4413      	add	r3, r2
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 8007ac8:	dd0c      	ble.n	8007ae4 <updateenemybullets+0xa8>
 8007aca:	4a0b      	ldr	r2, [pc, #44]	; (8007af8 <updateenemybullets+0xbc>)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2100      	movs	r1, #0
 8007ad0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007ad4:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <updateenemybullets+0xbc>)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4413      	add	r3, r2
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]
 8007ae0:	f000 fab2 	bl	8008048 <moveenemybullets>
	for(int i=0; i<10; i++){
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	607b      	str	r3, [r7, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	ddab      	ble.n	8007a48 <updateenemybullets+0xc>
		}
	}

}
 8007af0:	bf00      	nop
 8007af2:	370c      	adds	r7, #12
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd90      	pop	{r4, r7, pc}
 8007af8:	200000cc 	.word	0x200000cc
 8007afc:	20000006 	.word	0x20000006
 8007b00:	200000a8 	.word	0x200000a8
 8007b04:	2000011c 	.word	0x2000011c

08007b08 <updateenemy>:

void updateenemy(){
 8007b08:	b590      	push	{r4, r7, lr}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af02      	add	r7, sp, #8
	for(int i=0; i<10; i++){
 8007b0e:	2300      	movs	r3, #0
 8007b10:	607b      	str	r3, [r7, #4]
 8007b12:	e04f      	b.n	8007bb4 <updateenemy+0xac>
		if(enemy[i][0] != 0){
 8007b14:	4a2b      	ldr	r2, [pc, #172]	; (8007bc4 <updateenemy+0xbc>)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d046      	beq.n	8007bae <updateenemy+0xa6>
			LCD_Fill(enemy[i][0]-10,enemy[i][1]-20,enemy[i][0]+10,enemy[i][1]+20,BACK_COLOR);
 8007b20:	4a28      	ldr	r2, [pc, #160]	; (8007bc4 <updateenemy+0xbc>)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b0a      	subs	r3, #10
 8007b2c:	b298      	uxth	r0, r3
 8007b2e:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <updateenemy+0xbc>)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	4413      	add	r3, r2
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b14      	subs	r3, #20
 8007b3c:	b299      	uxth	r1, r3
 8007b3e:	4a21      	ldr	r2, [pc, #132]	; (8007bc4 <updateenemy+0xbc>)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	330a      	adds	r3, #10
 8007b4a:	b29c      	uxth	r4, r3
 8007b4c:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <updateenemy+0xbc>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	00db      	lsls	r3, r3, #3
 8007b52:	4413      	add	r3, r2
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	3314      	adds	r3, #20
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	4b1a      	ldr	r3, [pc, #104]	; (8007bc8 <updateenemy+0xc0>)
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	4622      	mov	r2, r4
 8007b66:	f7ff f9eb 	bl	8006f40 <LCD_Fill>
			enemy[i][1] = enemy[i][1] + speed;
 8007b6a:	4a16      	ldr	r2, [pc, #88]	; (8007bc4 <updateenemy+0xbc>)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	4413      	add	r3, r2
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	4b15      	ldr	r3, [pc, #84]	; (8007bcc <updateenemy+0xc4>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	441a      	add	r2, r3
 8007b7a:	4912      	ldr	r1, [pc, #72]	; (8007bc4 <updateenemy+0xbc>)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	440b      	add	r3, r1
 8007b82:	605a      	str	r2, [r3, #4]
			if(enemy[i][1] > 298){enemy[i][0] = 0;enemy[i][1] = 0;moveplanes();}
 8007b84:	4a0f      	ldr	r2, [pc, #60]	; (8007bc4 <updateenemy+0xbc>)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	00db      	lsls	r3, r3, #3
 8007b8a:	4413      	add	r3, r2
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8007b92:	dd0c      	ble.n	8007bae <updateenemy+0xa6>
 8007b94:	4a0b      	ldr	r2, [pc, #44]	; (8007bc4 <updateenemy+0xbc>)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2100      	movs	r1, #0
 8007b9a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007b9e:	4a09      	ldr	r2, [pc, #36]	; (8007bc4 <updateenemy+0xbc>)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	4413      	add	r3, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	605a      	str	r2, [r3, #4]
 8007baa:	f000 faa5 	bl	80080f8 <moveplanes>
	for(int i=0; i<10; i++){
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	607b      	str	r3, [r7, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2b09      	cmp	r3, #9
 8007bb8:	ddac      	ble.n	8007b14 <updateenemy+0xc>
		}
	}
}
 8007bba:	bf00      	nop
 8007bbc:	370c      	adds	r7, #12
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd90      	pop	{r4, r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000174 	.word	0x20000174
 8007bc8:	20000006 	.word	0x20000006
 8007bcc:	200000a8 	.word	0x200000a8

08007bd0 <dieit>:

void dieit(){
 8007bd0:	b590      	push	{r4, r7, lr}
 8007bd2:	b085      	sub	sp, #20
 8007bd4:	af02      	add	r7, sp, #8
	for(int i=0; i<10; i++){
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	607b      	str	r3, [r7, #4]
 8007bda:	e0a5      	b.n	8007d28 <dieit+0x158>
		if(enemy[i][0]!=0&&abs(enemy[i][0] - player[0]) <= 20&&abs(enemy[i][1] - player[1]) <= 40){
 8007bdc:	4aa8      	ldr	r2, [pc, #672]	; (8007e80 <dieit+0x2b0>)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 809c 	beq.w	8007d22 <dieit+0x152>
 8007bea:	4aa5      	ldr	r2, [pc, #660]	; (8007e80 <dieit+0x2b0>)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007bf2:	4ba4      	ldr	r3, [pc, #656]	; (8007e84 <dieit+0x2b4>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	1ad3      	subs	r3, r2, r3
 8007bf8:	f113 0f14 	cmn.w	r3, #20
 8007bfc:	f2c0 8091 	blt.w	8007d22 <dieit+0x152>
 8007c00:	4a9f      	ldr	r2, [pc, #636]	; (8007e80 <dieit+0x2b0>)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007c08:	4b9e      	ldr	r3, [pc, #632]	; (8007e84 <dieit+0x2b4>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b14      	cmp	r3, #20
 8007c10:	f300 8087 	bgt.w	8007d22 <dieit+0x152>
 8007c14:	4a9a      	ldr	r2, [pc, #616]	; (8007e80 <dieit+0x2b0>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	00db      	lsls	r3, r3, #3
 8007c1a:	4413      	add	r3, r2
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	4b99      	ldr	r3, [pc, #612]	; (8007e84 <dieit+0x2b4>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	f113 0f28 	cmn.w	r3, #40	; 0x28
 8007c28:	db7b      	blt.n	8007d22 <dieit+0x152>
 8007c2a:	4a95      	ldr	r2, [pc, #596]	; (8007e80 <dieit+0x2b0>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	4b93      	ldr	r3, [pc, #588]	; (8007e84 <dieit+0x2b4>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	2b28      	cmp	r3, #40	; 0x28
 8007c3c:	dc71      	bgt.n	8007d22 <dieit+0x152>
					LCD_Fill(player[0]-10,player[1]-20,	player[0]+10,player[1]+20,BACK_COLOR);
 8007c3e:	4b91      	ldr	r3, [pc, #580]	; (8007e84 <dieit+0x2b4>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	3b0a      	subs	r3, #10
 8007c46:	b298      	uxth	r0, r3
 8007c48:	4b8e      	ldr	r3, [pc, #568]	; (8007e84 <dieit+0x2b4>)
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	3b14      	subs	r3, #20
 8007c50:	b299      	uxth	r1, r3
 8007c52:	4b8c      	ldr	r3, [pc, #560]	; (8007e84 <dieit+0x2b4>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	330a      	adds	r3, #10
 8007c5a:	b29a      	uxth	r2, r3
 8007c5c:	4b89      	ldr	r3, [pc, #548]	; (8007e84 <dieit+0x2b4>)
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	3314      	adds	r3, #20
 8007c64:	b29c      	uxth	r4, r3
 8007c66:	4b88      	ldr	r3, [pc, #544]	; (8007e88 <dieit+0x2b8>)
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	9300      	str	r3, [sp, #0]
 8007c6c:	4623      	mov	r3, r4
 8007c6e:	f7ff f967 	bl	8006f40 <LCD_Fill>
					LCD_Fill(enemy[i][0]-10,enemy[i][1]-20,enemy[i][0]+10,enemy[i][1]+20,BACK_COLOR);
 8007c72:	4a83      	ldr	r2, [pc, #524]	; (8007e80 <dieit+0x2b0>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	3b0a      	subs	r3, #10
 8007c7e:	b298      	uxth	r0, r3
 8007c80:	4a7f      	ldr	r2, [pc, #508]	; (8007e80 <dieit+0x2b0>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b14      	subs	r3, #20
 8007c8e:	b299      	uxth	r1, r3
 8007c90:	4a7b      	ldr	r2, [pc, #492]	; (8007e80 <dieit+0x2b0>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	330a      	adds	r3, #10
 8007c9c:	b29c      	uxth	r4, r3
 8007c9e:	4a78      	ldr	r2, [pc, #480]	; (8007e80 <dieit+0x2b0>)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	00db      	lsls	r3, r3, #3
 8007ca4:	4413      	add	r3, r2
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	3314      	adds	r3, #20
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	4b76      	ldr	r3, [pc, #472]	; (8007e88 <dieit+0x2b8>)
 8007cb0:	881b      	ldrh	r3, [r3, #0]
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	4622      	mov	r2, r4
 8007cb8:	f7ff f942 	bl	8006f40 <LCD_Fill>
					player[0] = 120;player[1] = 280;
 8007cbc:	4b71      	ldr	r3, [pc, #452]	; (8007e84 <dieit+0x2b4>)
 8007cbe:	2278      	movs	r2, #120	; 0x78
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	4b70      	ldr	r3, [pc, #448]	; (8007e84 <dieit+0x2b4>)
 8007cc4:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007cc8:	605a      	str	r2, [r3, #4]
					enemy[i][0] = 0;enemy[i][1] = 0;
 8007cca:	4a6d      	ldr	r2, [pc, #436]	; (8007e80 <dieit+0x2b0>)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2100      	movs	r1, #0
 8007cd0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007cd4:	4a6a      	ldr	r2, [pc, #424]	; (8007e80 <dieit+0x2b0>)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	00db      	lsls	r3, r3, #3
 8007cda:	4413      	add	r3, r2
 8007cdc:	2200      	movs	r2, #0
 8007cde:	605a      	str	r2, [r3, #4]
					life-=1;
 8007ce0:	4b6a      	ldr	r3, [pc, #424]	; (8007e8c <dieit+0x2bc>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	4a69      	ldr	r2, [pc, #420]	; (8007e8c <dieit+0x2bc>)
 8007ce8:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007cea:	2104      	movs	r1, #4
 8007cec:	4868      	ldr	r0, [pc, #416]	; (8007e90 <dieit+0x2c0>)
 8007cee:	f7f9 f9b4 	bl	800105a <HAL_GPIO_TogglePin>
					HAL_Delay(50);
 8007cf2:	2032      	movs	r0, #50	; 0x32
 8007cf4:	f7f8 fee8 	bl	8000ac8 <HAL_Delay>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007cf8:	2104      	movs	r1, #4
 8007cfa:	4865      	ldr	r0, [pc, #404]	; (8007e90 <dieit+0x2c0>)
 8007cfc:	f7f9 f9ad 	bl	800105a <HAL_GPIO_TogglePin>
					HAL_Delay(50);
 8007d00:	2032      	movs	r0, #50	; 0x32
 8007d02:	f7f8 fee1 	bl	8000ac8 <HAL_Delay>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007d06:	2104      	movs	r1, #4
 8007d08:	4861      	ldr	r0, [pc, #388]	; (8007e90 <dieit+0x2c0>)
 8007d0a:	f7f9 f9a6 	bl	800105a <HAL_GPIO_TogglePin>
					HAL_Delay(50);
 8007d0e:	2032      	movs	r0, #50	; 0x32
 8007d10:	f7f8 feda 	bl	8000ac8 <HAL_Delay>
					HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007d14:	2104      	movs	r1, #4
 8007d16:	485e      	ldr	r0, [pc, #376]	; (8007e90 <dieit+0x2c0>)
 8007d18:	f7f9 f99f 	bl	800105a <HAL_GPIO_TogglePin>
					moveplanes();
 8007d1c:	f000 f9ec 	bl	80080f8 <moveplanes>
					break;
 8007d20:	e006      	b.n	8007d30 <dieit+0x160>
	for(int i=0; i<10; i++){
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3301      	adds	r3, #1
 8007d26:	607b      	str	r3, [r7, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	f77f af56 	ble.w	8007bdc <dieit+0xc>
		}
	}
	for(int i=0; i<10; i++){
 8007d30:	2300      	movs	r3, #0
 8007d32:	603b      	str	r3, [r7, #0]
 8007d34:	e0b3      	b.n	8007e9e <dieit+0x2ce>
			if(enemybullet[i][0]!=0&&abs(enemybullet[i][0] - player[0]) <= 10&&abs(enemybullet[i][1] - player[1]) <= 20){
 8007d36:	4a57      	ldr	r2, [pc, #348]	; (8007e94 <dieit+0x2c4>)
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 80aa 	beq.w	8007e98 <dieit+0x2c8>
 8007d44:	4a53      	ldr	r2, [pc, #332]	; (8007e94 <dieit+0x2c4>)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d4c:	4b4d      	ldr	r3, [pc, #308]	; (8007e84 <dieit+0x2b4>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f113 0f0a 	cmn.w	r3, #10
 8007d56:	f2c0 809f 	blt.w	8007e98 <dieit+0x2c8>
 8007d5a:	4a4e      	ldr	r2, [pc, #312]	; (8007e94 <dieit+0x2c4>)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007d62:	4b48      	ldr	r3, [pc, #288]	; (8007e84 <dieit+0x2b4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	1ad3      	subs	r3, r2, r3
 8007d68:	2b0a      	cmp	r3, #10
 8007d6a:	f300 8095 	bgt.w	8007e98 <dieit+0x2c8>
 8007d6e:	4a49      	ldr	r2, [pc, #292]	; (8007e94 <dieit+0x2c4>)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	4413      	add	r3, r2
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	4b42      	ldr	r3, [pc, #264]	; (8007e84 <dieit+0x2b4>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	f113 0f14 	cmn.w	r3, #20
 8007d82:	f2c0 8089 	blt.w	8007e98 <dieit+0x2c8>
 8007d86:	4a43      	ldr	r2, [pc, #268]	; (8007e94 <dieit+0x2c4>)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	00db      	lsls	r3, r3, #3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	4b3c      	ldr	r3, [pc, #240]	; (8007e84 <dieit+0x2b4>)
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b14      	cmp	r3, #20
 8007d98:	dc7e      	bgt.n	8007e98 <dieit+0x2c8>
						LCD_Fill(player[0]-10,player[1]-20,	player[0]+10,player[1]+20,BACK_COLOR);
 8007d9a:	4b3a      	ldr	r3, [pc, #232]	; (8007e84 <dieit+0x2b4>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	3b0a      	subs	r3, #10
 8007da2:	b298      	uxth	r0, r3
 8007da4:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <dieit+0x2b4>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	3b14      	subs	r3, #20
 8007dac:	b299      	uxth	r1, r3
 8007dae:	4b35      	ldr	r3, [pc, #212]	; (8007e84 <dieit+0x2b4>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	330a      	adds	r3, #10
 8007db6:	b29a      	uxth	r2, r3
 8007db8:	4b32      	ldr	r3, [pc, #200]	; (8007e84 <dieit+0x2b4>)
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	b29c      	uxth	r4, r3
 8007dc2:	4b31      	ldr	r3, [pc, #196]	; (8007e88 <dieit+0x2b8>)
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	4623      	mov	r3, r4
 8007dca:	f7ff f8b9 	bl	8006f40 <LCD_Fill>
						LCD_Fill(enemybullet[i][0]-4,enemybullet[i][1]-4,enemybullet[i][0]+4,enemybullet[i][1]+4,BACK_COLOR);
 8007dce:	4a31      	ldr	r2, [pc, #196]	; (8007e94 <dieit+0x2c4>)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	b298      	uxth	r0, r3
 8007ddc:	4a2d      	ldr	r2, [pc, #180]	; (8007e94 <dieit+0x2c4>)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	00db      	lsls	r3, r3, #3
 8007de2:	4413      	add	r3, r2
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b04      	subs	r3, #4
 8007dea:	b299      	uxth	r1, r3
 8007dec:	4a29      	ldr	r2, [pc, #164]	; (8007e94 <dieit+0x2c4>)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	3304      	adds	r3, #4
 8007df8:	b29c      	uxth	r4, r3
 8007dfa:	4a26      	ldr	r2, [pc, #152]	; (8007e94 <dieit+0x2c4>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	00db      	lsls	r3, r3, #3
 8007e00:	4413      	add	r3, r2
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	3304      	adds	r3, #4
 8007e08:	b29a      	uxth	r2, r3
 8007e0a:	4b1f      	ldr	r3, [pc, #124]	; (8007e88 <dieit+0x2b8>)
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	4613      	mov	r3, r2
 8007e12:	4622      	mov	r2, r4
 8007e14:	f7ff f894 	bl	8006f40 <LCD_Fill>
						player[0] = 120;player[1] = 280;
 8007e18:	4b1a      	ldr	r3, [pc, #104]	; (8007e84 <dieit+0x2b4>)
 8007e1a:	2278      	movs	r2, #120	; 0x78
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	4b19      	ldr	r3, [pc, #100]	; (8007e84 <dieit+0x2b4>)
 8007e20:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007e24:	605a      	str	r2, [r3, #4]
						enemybullet[i][0] = 0;enemybullet[i][1] = 0;
 8007e26:	4a1b      	ldr	r2, [pc, #108]	; (8007e94 <dieit+0x2c4>)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007e30:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <dieit+0x2c4>)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	4413      	add	r3, r2
 8007e38:	2200      	movs	r2, #0
 8007e3a:	605a      	str	r2, [r3, #4]
						life-=1;
 8007e3c:	4b13      	ldr	r3, [pc, #76]	; (8007e8c <dieit+0x2bc>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <dieit+0x2bc>)
 8007e44:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007e46:	2104      	movs	r1, #4
 8007e48:	4811      	ldr	r0, [pc, #68]	; (8007e90 <dieit+0x2c0>)
 8007e4a:	f7f9 f906 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007e4e:	2032      	movs	r0, #50	; 0x32
 8007e50:	f7f8 fe3a 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007e54:	2104      	movs	r1, #4
 8007e56:	480e      	ldr	r0, [pc, #56]	; (8007e90 <dieit+0x2c0>)
 8007e58:	f7f9 f8ff 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007e5c:	2032      	movs	r0, #50	; 0x32
 8007e5e:	f7f8 fe33 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007e62:	2104      	movs	r1, #4
 8007e64:	480a      	ldr	r0, [pc, #40]	; (8007e90 <dieit+0x2c0>)
 8007e66:	f7f9 f8f8 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007e6a:	2032      	movs	r0, #50	; 0x32
 8007e6c:	f7f8 fe2c 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8007e70:	2104      	movs	r1, #4
 8007e72:	4807      	ldr	r0, [pc, #28]	; (8007e90 <dieit+0x2c0>)
 8007e74:	f7f9 f8f1 	bl	800105a <HAL_GPIO_TogglePin>
						moveenemybullets();
 8007e78:	f000 f8e6 	bl	8008048 <moveenemybullets>
						break;
 8007e7c:	e013      	b.n	8007ea6 <dieit+0x2d6>
 8007e7e:	bf00      	nop
 8007e80:	20000174 	.word	0x20000174
 8007e84:	2000016c 	.word	0x2000016c
 8007e88:	20000006 	.word	0x20000006
 8007e8c:	2000009c 	.word	0x2000009c
 8007e90:	40011400 	.word	0x40011400
 8007e94:	200000cc 	.word	0x200000cc
	for(int i=0; i<10; i++){
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	603b      	str	r3, [r7, #0]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b09      	cmp	r3, #9
 8007ea2:	f77f af48 	ble.w	8007d36 <dieit+0x166>
			}
		}
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd90      	pop	{r4, r7, pc}
 8007eae:	bf00      	nop

08007eb0 <hitit>:

void hitit(){
 8007eb0:	b590      	push	{r4, r7, lr}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af02      	add	r7, sp, #8
	int hitit=0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<10; i++){
 8007eba:	2300      	movs	r3, #0
 8007ebc:	60bb      	str	r3, [r7, #8]
 8007ebe:	e0ae      	b.n	800801e <hitit+0x16e>
		if (hitit==1)break;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b01      	cmp	r3, #1
 8007ec4:	f000 80b0 	beq.w	8008028 <hitit+0x178>
		if(enemy[i][0] != 0){
 8007ec8:	4a5a      	ldr	r2, [pc, #360]	; (8008034 <hitit+0x184>)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 80a1 	beq.w	8008018 <hitit+0x168>
			for(int j=0; j<10; j++){
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
 8007eda:	e099      	b.n	8008010 <hitit+0x160>
				if(abs(bullet[j][0] - enemy[i][0]) <= 12&&abs(bullet[j][1] - enemy[i][1]) <= 22){
 8007edc:	4a56      	ldr	r2, [pc, #344]	; (8008038 <hitit+0x188>)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007ee4:	4953      	ldr	r1, [pc, #332]	; (8008034 <hitit+0x184>)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	f113 0f0c 	cmn.w	r3, #12
 8007ef2:	f2c0 808a 	blt.w	800800a <hitit+0x15a>
 8007ef6:	4a50      	ldr	r2, [pc, #320]	; (8008038 <hitit+0x188>)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007efe:	494d      	ldr	r1, [pc, #308]	; (8008034 <hitit+0x184>)
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8007f06:	1ad3      	subs	r3, r2, r3
 8007f08:	2b0c      	cmp	r3, #12
 8007f0a:	dc7e      	bgt.n	800800a <hitit+0x15a>
 8007f0c:	4a4a      	ldr	r2, [pc, #296]	; (8008038 <hitit+0x188>)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	4413      	add	r3, r2
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4947      	ldr	r1, [pc, #284]	; (8008034 <hitit+0x184>)
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	00db      	lsls	r3, r3, #3
 8007f1c:	440b      	add	r3, r1
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	f113 0f16 	cmn.w	r3, #22
 8007f26:	db70      	blt.n	800800a <hitit+0x15a>
 8007f28:	4a43      	ldr	r2, [pc, #268]	; (8008038 <hitit+0x188>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	00db      	lsls	r3, r3, #3
 8007f2e:	4413      	add	r3, r2
 8007f30:	685a      	ldr	r2, [r3, #4]
 8007f32:	4940      	ldr	r1, [pc, #256]	; (8008034 <hitit+0x184>)
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	440b      	add	r3, r1
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b16      	cmp	r3, #22
 8007f40:	dc63      	bgt.n	800800a <hitit+0x15a>
						LCD_Fill(enemy[i][0]-10,enemy[i][1]-20,enemy[i][0]+10,enemy[i][1]+20,BACK_COLOR);
 8007f42:	4a3c      	ldr	r2, [pc, #240]	; (8008034 <hitit+0x184>)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	3b0a      	subs	r3, #10
 8007f4e:	b298      	uxth	r0, r3
 8007f50:	4a38      	ldr	r2, [pc, #224]	; (8008034 <hitit+0x184>)
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	3b14      	subs	r3, #20
 8007f5e:	b299      	uxth	r1, r3
 8007f60:	4a34      	ldr	r2, [pc, #208]	; (8008034 <hitit+0x184>)
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	330a      	adds	r3, #10
 8007f6c:	b29c      	uxth	r4, r3
 8007f6e:	4a31      	ldr	r2, [pc, #196]	; (8008034 <hitit+0x184>)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	00db      	lsls	r3, r3, #3
 8007f74:	4413      	add	r3, r2
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	3314      	adds	r3, #20
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	4b2f      	ldr	r3, [pc, #188]	; (800803c <hitit+0x18c>)
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	9300      	str	r3, [sp, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	4622      	mov	r2, r4
 8007f88:	f7fe ffda 	bl	8006f40 <LCD_Fill>
						bullet[j][0] = 0;bullet[j][1] = 0;
 8007f8c:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <hitit+0x188>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2100      	movs	r1, #0
 8007f92:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007f96:	4a28      	ldr	r2, [pc, #160]	; (8008038 <hitit+0x188>)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	605a      	str	r2, [r3, #4]
						enemy[i][0] = 0;enemy[i][1] = 0;
 8007fa2:	4a24      	ldr	r2, [pc, #144]	; (8008034 <hitit+0x184>)
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8007fac:	4a21      	ldr	r2, [pc, #132]	; (8008034 <hitit+0x184>)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	00db      	lsls	r3, r3, #3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	605a      	str	r2, [r3, #4]
						score+=1;
 8007fb8:	4b21      	ldr	r3, [pc, #132]	; (8008040 <hitit+0x190>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	4a20      	ldr	r2, [pc, #128]	; (8008040 <hitit+0x190>)
 8007fc0:	6013      	str	r3, [r2, #0]
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007fc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fc6:	481f      	ldr	r0, [pc, #124]	; (8008044 <hitit+0x194>)
 8007fc8:	f7f9 f847 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007fcc:	2032      	movs	r0, #50	; 0x32
 8007fce:	f7f8 fd7b 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fd6:	481b      	ldr	r0, [pc, #108]	; (8008044 <hitit+0x194>)
 8007fd8:	f7f9 f83f 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007fdc:	2032      	movs	r0, #50	; 0x32
 8007fde:	f7f8 fd73 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007fe2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007fe6:	4817      	ldr	r0, [pc, #92]	; (8008044 <hitit+0x194>)
 8007fe8:	f7f9 f837 	bl	800105a <HAL_GPIO_TogglePin>
						HAL_Delay(50);
 8007fec:	2032      	movs	r0, #50	; 0x32
 8007fee:	f7f8 fd6b 	bl	8000ac8 <HAL_Delay>
						HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8007ff2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007ff6:	4813      	ldr	r0, [pc, #76]	; (8008044 <hitit+0x194>)
 8007ff8:	f7f9 f82f 	bl	800105a <HAL_GPIO_TogglePin>
						moveplanes();
 8007ffc:	f000 f87c 	bl	80080f8 <moveplanes>
						movebullets();
 8008000:	f000 f84e 	bl	80080a0 <movebullets>
						hitit=1;
 8008004:	2301      	movs	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]
						break;
 8008008:	e006      	b.n	8008018 <hitit+0x168>
			for(int j=0; j<10; j++){
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	3301      	adds	r3, #1
 800800e:	607b      	str	r3, [r7, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b09      	cmp	r3, #9
 8008014:	f77f af62 	ble.w	8007edc <hitit+0x2c>
	for(int i=0; i<10; i++){
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	3301      	adds	r3, #1
 800801c:	60bb      	str	r3, [r7, #8]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b09      	cmp	r3, #9
 8008022:	f77f af4d 	ble.w	8007ec0 <hitit+0x10>
				}
			}
		}
	}

}
 8008026:	e000      	b.n	800802a <hitit+0x17a>
		if (hitit==1)break;
 8008028:	bf00      	nop
}
 800802a:	bf00      	nop
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	bd90      	pop	{r4, r7, pc}
 8008032:	bf00      	nop
 8008034:	20000174 	.word	0x20000174
 8008038:	2000011c 	.word	0x2000011c
 800803c:	20000006 	.word	0x20000006
 8008040:	20000094 	.word	0x20000094
 8008044:	40010800 	.word	0x40010800

08008048 <moveenemybullets>:
void moveenemybullets(){
 8008048:	b480      	push	{r7}
 800804a:	b083      	sub	sp, #12
 800804c:	af00      	add	r7, sp, #0
	if(enemybullet[0][0] == 0){
 800804e:	4b13      	ldr	r3, [pc, #76]	; (800809c <moveenemybullets+0x54>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d11c      	bne.n	8008090 <moveenemybullets+0x48>
		for(int i=0; i<9; i++){
 8008056:	2300      	movs	r3, #0
 8008058:	607b      	str	r3, [r7, #4]
 800805a:	e016      	b.n	800808a <moveenemybullets+0x42>
			enemybullet[i][0] = enemybullet[i+1][0];
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3301      	adds	r3, #1
 8008060:	4a0e      	ldr	r2, [pc, #56]	; (800809c <moveenemybullets+0x54>)
 8008062:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008066:	490d      	ldr	r1, [pc, #52]	; (800809c <moveenemybullets+0x54>)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			enemybullet[i][1] = enemybullet[i+1][1];
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	3301      	adds	r3, #1
 8008072:	4a0a      	ldr	r2, [pc, #40]	; (800809c <moveenemybullets+0x54>)
 8008074:	00db      	lsls	r3, r3, #3
 8008076:	4413      	add	r3, r2
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	4908      	ldr	r1, [pc, #32]	; (800809c <moveenemybullets+0x54>)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	00db      	lsls	r3, r3, #3
 8008080:	440b      	add	r3, r1
 8008082:	605a      	str	r2, [r3, #4]
		for(int i=0; i<9; i++){
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3301      	adds	r3, #1
 8008088:	607b      	str	r3, [r7, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b08      	cmp	r3, #8
 800808e:	dde5      	ble.n	800805c <moveenemybullets+0x14>
		}
	}
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	200000cc 	.word	0x200000cc

080080a0 <movebullets>:


void movebullets(){
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
	if(bullet[0][0] == 0){
 80080a6:	4b13      	ldr	r3, [pc, #76]	; (80080f4 <movebullets+0x54>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d11c      	bne.n	80080e8 <movebullets+0x48>
		for(int i=0; i<9; i++){
 80080ae:	2300      	movs	r3, #0
 80080b0:	607b      	str	r3, [r7, #4]
 80080b2:	e016      	b.n	80080e2 <movebullets+0x42>
			bullet[i][0] = bullet[i+1][0];
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3301      	adds	r3, #1
 80080b8:	4a0e      	ldr	r2, [pc, #56]	; (80080f4 <movebullets+0x54>)
 80080ba:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80080be:	490d      	ldr	r1, [pc, #52]	; (80080f4 <movebullets+0x54>)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			bullet[i][1] = bullet[i+1][1];
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	3301      	adds	r3, #1
 80080ca:	4a0a      	ldr	r2, [pc, #40]	; (80080f4 <movebullets+0x54>)
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	4413      	add	r3, r2
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	4908      	ldr	r1, [pc, #32]	; (80080f4 <movebullets+0x54>)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	00db      	lsls	r3, r3, #3
 80080d8:	440b      	add	r3, r1
 80080da:	605a      	str	r2, [r3, #4]
		for(int i=0; i<9; i++){
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3301      	adds	r3, #1
 80080e0:	607b      	str	r3, [r7, #4]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	dde5      	ble.n	80080b4 <movebullets+0x14>
		}
	}
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	2000011c 	.word	0x2000011c

080080f8 <moveplanes>:

void moveplanes(){
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
	if(enemy[0][0] == 0){
 80080fe:	4b13      	ldr	r3, [pc, #76]	; (800814c <moveplanes+0x54>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d11c      	bne.n	8008140 <moveplanes+0x48>
		for(int i=0; i<9; i++){
 8008106:	2300      	movs	r3, #0
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	e016      	b.n	800813a <moveplanes+0x42>
			enemy[i][0] = enemy[i+1][0];
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	3301      	adds	r3, #1
 8008110:	4a0e      	ldr	r2, [pc, #56]	; (800814c <moveplanes+0x54>)
 8008112:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8008116:	490d      	ldr	r1, [pc, #52]	; (800814c <moveplanes+0x54>)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			enemy[i][1] = enemy[i+1][1];
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3301      	adds	r3, #1
 8008122:	4a0a      	ldr	r2, [pc, #40]	; (800814c <moveplanes+0x54>)
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4413      	add	r3, r2
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	4908      	ldr	r1, [pc, #32]	; (800814c <moveplanes+0x54>)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	440b      	add	r3, r1
 8008132:	605a      	str	r2, [r3, #4]
		for(int i=0; i<9; i++){
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3301      	adds	r3, #1
 8008138:	607b      	str	r3, [r7, #4]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2b08      	cmp	r3, #8
 800813e:	dde5      	ble.n	800810c <moveplanes+0x14>
		}
	}
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	bc80      	pop	{r7}
 8008148:	4770      	bx	lr
 800814a:	bf00      	nop
 800814c:	20000174 	.word	0x20000174

08008150 <paintbullet>:

void paintbullet(int x, int y){
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	LCD_DrawLine(x-1,y,x+1,y);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	b29b      	uxth	r3, r3
 800815e:	3b01      	subs	r3, #1
 8008160:	b298      	uxth	r0, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	b299      	uxth	r1, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	b29b      	uxth	r3, r3
 800816a:	3301      	adds	r3, #1
 800816c:	b29a      	uxth	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	b29b      	uxth	r3, r3
 8008172:	f7fe ff71 	bl	8007058 <LCD_DrawLine>
	LCD_DrawLine(x,y-1,x,y+1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	b298      	uxth	r0, r3
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b299      	uxth	r1, r3
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	b29a      	uxth	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	3301      	adds	r3, #1
 800818c:	b29b      	uxth	r3, r3
 800818e:	f7fe ff63 	bl	8007058 <LCD_DrawLine>
}
 8008192:	bf00      	nop
 8008194:	3708      	adds	r7, #8
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <paintenemybullet>:
void paintenemybullet(int x, int y){
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	6039      	str	r1, [r7, #0]
	LCD_DrawLine(x-2,y,x+2,y);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b02      	subs	r3, #2
 80081aa:	b298      	uxth	r0, r3
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	b299      	uxth	r1, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3302      	adds	r3, #2
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	f7fe ff4c 	bl	8007058 <LCD_DrawLine>
	LCD_DrawLine(x,y-2,x,y+2);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	b298      	uxth	r0, r3
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	3b02      	subs	r3, #2
 80081ca:	b299      	uxth	r1, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3302      	adds	r3, #2
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	f7fe ff3e 	bl	8007058 <LCD_DrawLine>
}
 80081dc:	bf00      	nop
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <paintplayer>:
void paintplayer(){
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af02      	add	r7, sp, #8
	int x=player[0];
 80081ea:	4b4d      	ldr	r3, [pc, #308]	; (8008320 <paintplayer+0x13c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	607b      	str	r3, [r7, #4]
	int y=player[1];
 80081f0:	4b4b      	ldr	r3, [pc, #300]	; (8008320 <paintplayer+0x13c>)
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	603b      	str	r3, [r7, #0]
	if(x!=0&&y!=0){
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	f000 808c 	beq.w	8008316 <paintplayer+0x132>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8088 	beq.w	8008316 <paintplayer+0x132>
		LCD_Fill(x-20,y-25,x+20,y+25,BACK_COLOR);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	b29b      	uxth	r3, r3
 800820a:	3b14      	subs	r3, #20
 800820c:	b298      	uxth	r0, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b19      	subs	r3, #25
 8008214:	b299      	uxth	r1, r3
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	b29b      	uxth	r3, r3
 800821a:	3314      	adds	r3, #20
 800821c:	b29a      	uxth	r2, r3
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	3319      	adds	r3, #25
 8008224:	b29c      	uxth	r4, r3
 8008226:	4b3f      	ldr	r3, [pc, #252]	; (8008324 <paintplayer+0x140>)
 8008228:	881b      	ldrh	r3, [r3, #0]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	4623      	mov	r3, r4
 800822e:	f7fe fe87 	bl	8006f40 <LCD_Fill>
		LCD_DrawLine(x-11,y+4,x+11,y+4);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b0b      	subs	r3, #11
 8008238:	b298      	uxth	r0, r3
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	3304      	adds	r3, #4
 8008240:	b299      	uxth	r1, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	b29b      	uxth	r3, r3
 8008246:	330b      	adds	r3, #11
 8008248:	b29a      	uxth	r2, r3
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	b29b      	uxth	r3, r3
 800824e:	3304      	adds	r3, #4
 8008250:	b29b      	uxth	r3, r3
 8008252:	f7fe ff01 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x,y-20,x,y+20);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	b298      	uxth	r0, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	b29b      	uxth	r3, r3
 800825e:	3b14      	subs	r3, #20
 8008260:	b299      	uxth	r1, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	b29a      	uxth	r2, r3
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	b29b      	uxth	r3, r3
 800826a:	3314      	adds	r3, #20
 800826c:	b29b      	uxth	r3, r3
 800826e:	f7fe fef3 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x-5,y+20,x+5,y+20);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b05      	subs	r3, #5
 8008278:	b298      	uxth	r0, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	3314      	adds	r3, #20
 8008280:	b299      	uxth	r1, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	b29b      	uxth	r3, r3
 8008286:	3305      	adds	r3, #5
 8008288:	b29a      	uxth	r2, r3
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	b29b      	uxth	r3, r3
 800828e:	3314      	adds	r3, #20
 8008290:	b29b      	uxth	r3, r3
 8008292:	f7fe fee1 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x-11,y+4,x,y-20);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	b29b      	uxth	r3, r3
 800829a:	3b0b      	subs	r3, #11
 800829c:	b298      	uxth	r0, r3
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	3304      	adds	r3, #4
 80082a4:	b299      	uxth	r1, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	b29b      	uxth	r3, r3
 80082ae:	3b14      	subs	r3, #20
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	f7fe fed1 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x+11,y+4,x,y-20);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	330b      	adds	r3, #11
 80082bc:	b298      	uxth	r0, r3
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3304      	adds	r3, #4
 80082c4:	b299      	uxth	r1, r3
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	3b14      	subs	r3, #20
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	f7fe fec1 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x-5,y+20,x,y-20);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	b29b      	uxth	r3, r3
 80082da:	3b05      	subs	r3, #5
 80082dc:	b298      	uxth	r0, r3
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	3314      	adds	r3, #20
 80082e4:	b299      	uxth	r1, r3
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	3b14      	subs	r3, #20
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	f7fe feb1 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(x+5,y+20,x,y-20);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	b29b      	uxth	r3, r3
 80082fa:	3305      	adds	r3, #5
 80082fc:	b298      	uxth	r0, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	b29b      	uxth	r3, r3
 8008302:	3314      	adds	r3, #20
 8008304:	b299      	uxth	r1, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	b29a      	uxth	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	3b14      	subs	r3, #20
 8008310:	b29b      	uxth	r3, r3
 8008312:	f7fe fea1 	bl	8007058 <LCD_DrawLine>
	}
}
 8008316:	bf00      	nop
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	2000016c 	.word	0x2000016c
 8008324:	20000006 	.word	0x20000006

08008328 <paintenemy>:
void paintenemy(int x,int y){
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b085      	sub	sp, #20
 800832c:	af02      	add	r7, sp, #8
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
	if(x!=0&&y!=0){
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d04a      	beq.n	80083ce <paintenemy+0xa6>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d047      	beq.n	80083ce <paintenemy+0xa6>
			LCD_Fill(x-20,y-25,x+20,y+25,BACK_COLOR);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	b29b      	uxth	r3, r3
 8008342:	3b14      	subs	r3, #20
 8008344:	b298      	uxth	r0, r3
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b19      	subs	r3, #25
 800834c:	b299      	uxth	r1, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	b29b      	uxth	r3, r3
 8008352:	3314      	adds	r3, #20
 8008354:	b29a      	uxth	r2, r3
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b29b      	uxth	r3, r3
 800835a:	3319      	adds	r3, #25
 800835c:	b29c      	uxth	r4, r3
 800835e:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <paintenemy+0xb0>)
 8008360:	881b      	ldrh	r3, [r3, #0]
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4623      	mov	r3, r4
 8008366:	f7fe fdeb 	bl	8006f40 <LCD_Fill>
			LCD_DrawLine(x-11,y+4,x+11,y+4);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b0b      	subs	r3, #11
 8008370:	b298      	uxth	r0, r3
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	3304      	adds	r3, #4
 8008378:	b299      	uxth	r1, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	b29b      	uxth	r3, r3
 800837e:	330b      	adds	r3, #11
 8008380:	b29a      	uxth	r2, r3
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	b29b      	uxth	r3, r3
 8008386:	3304      	adds	r3, #4
 8008388:	b29b      	uxth	r3, r3
 800838a:	f7fe fe65 	bl	8007058 <LCD_DrawLine>
			LCD_DrawLine(x,y-20,x,y+20);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	b298      	uxth	r0, r3
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	b29b      	uxth	r3, r3
 8008396:	3b14      	subs	r3, #20
 8008398:	b299      	uxth	r1, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	b29a      	uxth	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	3314      	adds	r3, #20
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	f7fe fe57 	bl	8007058 <LCD_DrawLine>
			LCD_DrawLine(x-5,y-20,x+5,y-20);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b05      	subs	r3, #5
 80083b0:	b298      	uxth	r0, r3
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b14      	subs	r3, #20
 80083b8:	b299      	uxth	r1, r3
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	3305      	adds	r3, #5
 80083c0:	b29a      	uxth	r2, r3
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b14      	subs	r3, #20
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	f7fe fe45 	bl	8007058 <LCD_DrawLine>
		}
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd90      	pop	{r4, r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20000006 	.word	0x20000006

080083dc <paintscore>:

void paintscore(int x, int y, int size){
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08a      	sub	sp, #40	; 0x28
 80083e0:	af02      	add	r7, sp, #8
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	60b9      	str	r1, [r7, #8]
 80083e6:	607a      	str	r2, [r7, #4]
	char sc[10];
	itoa(score,sc,10);
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <paintscore+0x40>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f107 0114 	add.w	r1, r7, #20
 80083f0:	220a      	movs	r2, #10
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fa06 	bl	8008804 <itoa>
	LCD_ShowString(x, y, 200, 16, size, (uint8_t*) sc);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	b298      	uxth	r0, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	b299      	uxth	r1, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	b2db      	uxtb	r3, r3
 8008404:	f107 0214 	add.w	r2, r7, #20
 8008408:	9201      	str	r2, [sp, #4]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	2310      	movs	r3, #16
 800840e:	22c8      	movs	r2, #200	; 0xc8
 8008410:	f7fe ff54 	bl	80072bc <LCD_ShowString>
}
 8008414:	bf00      	nop
 8008416:	3720      	adds	r7, #32
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	20000094 	.word	0x20000094

08008420 <paintall>:


void paintall(){
 8008420:	b580      	push	{r7, lr}
 8008422:	b086      	sub	sp, #24
 8008424:	af02      	add	r7, sp, #8
	paintscore(75,8,24);
 8008426:	2218      	movs	r2, #24
 8008428:	2108      	movs	r1, #8
 800842a:	204b      	movs	r0, #75	; 0x4b
 800842c:	f7ff ffd6 	bl	80083dc <paintscore>
	LCD_Fill(190,15,226,25,BACK_COLOR);
 8008430:	4b4e      	ldr	r3, [pc, #312]	; (800856c <paintall+0x14c>)
 8008432:	881b      	ldrh	r3, [r3, #0]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2319      	movs	r3, #25
 8008438:	22e2      	movs	r2, #226	; 0xe2
 800843a:	210f      	movs	r1, #15
 800843c:	20be      	movs	r0, #190	; 0xbe
 800843e:	f7fe fd7f 	bl	8006f40 <LCD_Fill>
	for(int i=0; i<life; i++){
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
 8008446:	e02e      	b.n	80084a6 <paintall+0x86>
		LCD_DrawLine(181+i*14,15, 189+i*14,25);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	b29b      	uxth	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	00d2      	lsls	r2, r2, #3
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	b29b      	uxth	r3, r3
 8008456:	33b5      	adds	r3, #181	; 0xb5
 8008458:	b298      	uxth	r0, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	b29b      	uxth	r3, r3
 800845e:	461a      	mov	r2, r3
 8008460:	00d2      	lsls	r2, r2, #3
 8008462:	1ad3      	subs	r3, r2, r3
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	b29b      	uxth	r3, r3
 8008468:	33bd      	adds	r3, #189	; 0xbd
 800846a:	b29a      	uxth	r2, r3
 800846c:	2319      	movs	r3, #25
 800846e:	210f      	movs	r1, #15
 8008470:	f7fe fdf2 	bl	8007058 <LCD_DrawLine>
		LCD_DrawLine(181+i*14,25, 189+i*14,15);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	00d2      	lsls	r2, r2, #3
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	005b      	lsls	r3, r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	33b5      	adds	r3, #181	; 0xb5
 8008484:	b298      	uxth	r0, r3
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	b29b      	uxth	r3, r3
 800848a:	461a      	mov	r2, r3
 800848c:	00d2      	lsls	r2, r2, #3
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	005b      	lsls	r3, r3, #1
 8008492:	b29b      	uxth	r3, r3
 8008494:	33bd      	adds	r3, #189	; 0xbd
 8008496:	b29a      	uxth	r2, r3
 8008498:	230f      	movs	r3, #15
 800849a:	2119      	movs	r1, #25
 800849c:	f7fe fddc 	bl	8007058 <LCD_DrawLine>
	for(int i=0; i<life; i++){
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	4b32      	ldr	r3, [pc, #200]	; (8008570 <paintall+0x150>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	dbcb      	blt.n	8008448 <paintall+0x28>
	}
	paintplayer();
 80084b0:	f7ff fe98 	bl	80081e4 <paintplayer>
	for(int i=0; i<10; i++){
 80084b4:	2300      	movs	r3, #0
 80084b6:	60bb      	str	r3, [r7, #8]
 80084b8:	e016      	b.n	80084e8 <paintall+0xc8>
			if(bullet[i][0] == 0)continue;
 80084ba:	4a2e      	ldr	r2, [pc, #184]	; (8008574 <paintall+0x154>)
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <paintall+0xc0>
			else paintbullet(bullet[i][0],bullet[i][1]);
 80084c6:	4a2b      	ldr	r2, [pc, #172]	; (8008574 <paintall+0x154>)
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80084ce:	4a29      	ldr	r2, [pc, #164]	; (8008574 <paintall+0x154>)
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4413      	add	r3, r2
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	f7ff fe39 	bl	8008150 <paintbullet>
 80084de:	e000      	b.n	80084e2 <paintall+0xc2>
			if(bullet[i][0] == 0)continue;
 80084e0:	bf00      	nop
	for(int i=0; i<10; i++){
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	3301      	adds	r3, #1
 80084e6:	60bb      	str	r3, [r7, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	2b09      	cmp	r3, #9
 80084ec:	dde5      	ble.n	80084ba <paintall+0x9a>
		}
	for(int i=0; i<10; i++){
 80084ee:	2300      	movs	r3, #0
 80084f0:	607b      	str	r3, [r7, #4]
 80084f2:	e016      	b.n	8008522 <paintall+0x102>
				if(enemybullet[i][0] == 0)continue;
 80084f4:	4a20      	ldr	r2, [pc, #128]	; (8008578 <paintall+0x158>)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <paintall+0xfa>
				else paintenemybullet(enemybullet[i][0],enemybullet[i][1]);
 8008500:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <paintall+0x158>)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008508:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <paintall+0x158>)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	00db      	lsls	r3, r3, #3
 800850e:	4413      	add	r3, r2
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4619      	mov	r1, r3
 8008514:	f7ff fe41 	bl	800819a <paintenemybullet>
 8008518:	e000      	b.n	800851c <paintall+0xfc>
				if(enemybullet[i][0] == 0)continue;
 800851a:	bf00      	nop
	for(int i=0; i<10; i++){
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	3301      	adds	r3, #1
 8008520:	607b      	str	r3, [r7, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b09      	cmp	r3, #9
 8008526:	dde5      	ble.n	80084f4 <paintall+0xd4>
			}
	for(int i=0; i<10; i++){
 8008528:	2300      	movs	r3, #0
 800852a:	603b      	str	r3, [r7, #0]
 800852c:	e016      	b.n	800855c <paintall+0x13c>
		if(enemy[i][0] == 0)continue;
 800852e:	4a13      	ldr	r2, [pc, #76]	; (800857c <paintall+0x15c>)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00c      	beq.n	8008554 <paintall+0x134>
		else paintenemy(enemy[i][0],enemy[i][1]);
 800853a:	4a10      	ldr	r2, [pc, #64]	; (800857c <paintall+0x15c>)
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008542:	4a0e      	ldr	r2, [pc, #56]	; (800857c <paintall+0x15c>)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	4413      	add	r3, r2
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4619      	mov	r1, r3
 800854e:	f7ff feeb 	bl	8008328 <paintenemy>
 8008552:	e000      	b.n	8008556 <paintall+0x136>
		if(enemy[i][0] == 0)continue;
 8008554:	bf00      	nop
	for(int i=0; i<10; i++){
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	2b09      	cmp	r3, #9
 8008560:	dde5      	ble.n	800852e <paintall+0x10e>
	}
}
 8008562:	bf00      	nop
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000006 	.word	0x20000006
 8008570:	2000009c 	.word	0x2000009c
 8008574:	2000011c 	.word	0x2000011c
 8008578:	200000cc 	.word	0x200000cc
 800857c:	20000174 	.word	0x20000174

08008580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	bc80      	pop	{r7}
 800858a:	4770      	bx	lr

0800858c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008592:	4b16      	ldr	r3, [pc, #88]	; (80085ec <HAL_MspInit+0x60>)
 8008594:	699b      	ldr	r3, [r3, #24]
 8008596:	4a15      	ldr	r2, [pc, #84]	; (80085ec <HAL_MspInit+0x60>)
 8008598:	f043 0301 	orr.w	r3, r3, #1
 800859c:	6193      	str	r3, [r2, #24]
 800859e:	4b13      	ldr	r3, [pc, #76]	; (80085ec <HAL_MspInit+0x60>)
 80085a0:	699b      	ldr	r3, [r3, #24]
 80085a2:	f003 0301 	and.w	r3, r3, #1
 80085a6:	60bb      	str	r3, [r7, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80085aa:	4b10      	ldr	r3, [pc, #64]	; (80085ec <HAL_MspInit+0x60>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	4a0f      	ldr	r2, [pc, #60]	; (80085ec <HAL_MspInit+0x60>)
 80085b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b4:	61d3      	str	r3, [r2, #28]
 80085b6:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <HAL_MspInit+0x60>)
 80085b8:	69db      	ldr	r3, [r3, #28]
 80085ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085be:	607b      	str	r3, [r7, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80085c2:	2005      	movs	r0, #5
 80085c4:	f7f8 fb6e 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80085c8:	4b09      	ldr	r3, [pc, #36]	; (80085f0 <HAL_MspInit+0x64>)
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085dc:	60fb      	str	r3, [r7, #12]
 80085de:	4a04      	ldr	r2, [pc, #16]	; (80085f0 <HAL_MspInit+0x64>)
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	40021000 	.word	0x40021000
 80085f0:	40010000 	.word	0x40010000

080085f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085f4:	b480      	push	{r7}
 80085f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085f8:	bf00      	nop
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr

08008600 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008604:	e7fe      	b.n	8008604 <HardFault_Handler+0x4>

08008606 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800860a:	e7fe      	b.n	800860a <MemManage_Handler+0x4>

0800860c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800860c:	b480      	push	{r7}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008610:	e7fe      	b.n	8008610 <BusFault_Handler+0x4>

08008612 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008612:	b480      	push	{r7}
 8008614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008616:	e7fe      	b.n	8008616 <UsageFault_Handler+0x4>

08008618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008618:	b480      	push	{r7}
 800861a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800861c:	bf00      	nop
 800861e:	46bd      	mov	sp, r7
 8008620:	bc80      	pop	{r7}
 8008622:	4770      	bx	lr

08008624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008624:	b480      	push	{r7}
 8008626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008634:	bf00      	nop
 8008636:	46bd      	mov	sp, r7
 8008638:	bc80      	pop	{r7}
 800863a:	4770      	bx	lr

0800863c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008640:	f7f8 fa26 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008644:	bf00      	nop
 8008646:	bd80      	pop	{r7, pc}

08008648 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800864c:	2001      	movs	r0, #1
 800864e:	f7f8 fd1d 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}

08008656 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800865a:	2020      	movs	r0, #32
 800865c:	f7f8 fd16 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008660:	bf00      	nop
 8008662:	bd80      	pop	{r7, pc}

08008664 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8008668:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800866c:	f7f8 fd0e 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008670:	bf00      	nop
 8008672:	bd80      	pop	{r7, pc}

08008674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <_sbrk+0x50>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <_sbrk+0x16>
		heap_end = &end;
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <_sbrk+0x50>)
 8008686:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <_sbrk+0x54>)
 8008688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <_sbrk+0x50>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <_sbrk+0x50>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	466a      	mov	r2, sp
 800869a:	4293      	cmp	r3, r2
 800869c:	d907      	bls.n	80086ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800869e:	f000 f86f 	bl	8008780 <__errno>
 80086a2:	4602      	mov	r2, r0
 80086a4:	230c      	movs	r3, #12
 80086a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80086a8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ac:	e006      	b.n	80086bc <_sbrk+0x48>
	}

	heap_end += incr;
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <_sbrk+0x50>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	4a03      	ldr	r2, [pc, #12]	; (80086c4 <_sbrk+0x50>)
 80086b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200000ac 	.word	0x200000ac
 80086c8:	200001c8 	.word	0x200001c8

080086cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80086d0:	4b15      	ldr	r3, [pc, #84]	; (8008728 <SystemInit+0x5c>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a14      	ldr	r2, [pc, #80]	; (8008728 <SystemInit+0x5c>)
 80086d6:	f043 0301 	orr.w	r3, r3, #1
 80086da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80086dc:	4b12      	ldr	r3, [pc, #72]	; (8008728 <SystemInit+0x5c>)
 80086de:	685a      	ldr	r2, [r3, #4]
 80086e0:	4911      	ldr	r1, [pc, #68]	; (8008728 <SystemInit+0x5c>)
 80086e2:	4b12      	ldr	r3, [pc, #72]	; (800872c <SystemInit+0x60>)
 80086e4:	4013      	ands	r3, r2
 80086e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80086e8:	4b0f      	ldr	r3, [pc, #60]	; (8008728 <SystemInit+0x5c>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a0e      	ldr	r2, [pc, #56]	; (8008728 <SystemInit+0x5c>)
 80086ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80086f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80086f8:	4b0b      	ldr	r3, [pc, #44]	; (8008728 <SystemInit+0x5c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a0a      	ldr	r2, [pc, #40]	; (8008728 <SystemInit+0x5c>)
 80086fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008702:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8008704:	4b08      	ldr	r3, [pc, #32]	; (8008728 <SystemInit+0x5c>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	4a07      	ldr	r2, [pc, #28]	; (8008728 <SystemInit+0x5c>)
 800870a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800870e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8008710:	4b05      	ldr	r3, [pc, #20]	; (8008728 <SystemInit+0x5c>)
 8008712:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8008716:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8008718:	4b05      	ldr	r3, [pc, #20]	; (8008730 <SystemInit+0x64>)
 800871a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800871e:	609a      	str	r2, [r3, #8]
#endif 
}
 8008720:	bf00      	nop
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr
 8008728:	40021000 	.word	0x40021000
 800872c:	f8ff0000 	.word	0xf8ff0000
 8008730:	e000ed00 	.word	0xe000ed00

08008734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8008734:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8008736:	e003      	b.n	8008740 <LoopCopyDataInit>

08008738 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8008738:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800873a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800873c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800873e:	3104      	adds	r1, #4

08008740 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8008740:	480a      	ldr	r0, [pc, #40]	; (800876c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8008742:	4b0b      	ldr	r3, [pc, #44]	; (8008770 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8008744:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8008746:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8008748:	d3f6      	bcc.n	8008738 <CopyDataInit>
  ldr r2, =_sbss
 800874a:	4a0a      	ldr	r2, [pc, #40]	; (8008774 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800874c:	e002      	b.n	8008754 <LoopFillZerobss>

0800874e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800874e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8008750:	f842 3b04 	str.w	r3, [r2], #4

08008754 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8008754:	4b08      	ldr	r3, [pc, #32]	; (8008778 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8008756:	429a      	cmp	r2, r3
  bcc FillZerobss
 8008758:	d3f9      	bcc.n	800874e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800875a:	f7ff ffb7 	bl	80086cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800875e:	f000 f815 	bl	800878c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008762:	f7fe fdf9 	bl	8007358 <main>
  bx lr
 8008766:	4770      	bx	lr
  ldr r3, =_sidata
 8008768:	0800a270 	.word	0x0800a270
  ldr r0, =_sdata
 800876c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8008770:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8008774:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8008778:	200001c8 	.word	0x200001c8

0800877c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800877c:	e7fe      	b.n	800877c <ADC1_2_IRQHandler>
	...

08008780 <__errno>:
 8008780:	4b01      	ldr	r3, [pc, #4]	; (8008788 <__errno+0x8>)
 8008782:	6818      	ldr	r0, [r3, #0]
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	2000000c 	.word	0x2000000c

0800878c <__libc_init_array>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	2500      	movs	r5, #0
 8008790:	4e0c      	ldr	r6, [pc, #48]	; (80087c4 <__libc_init_array+0x38>)
 8008792:	4c0d      	ldr	r4, [pc, #52]	; (80087c8 <__libc_init_array+0x3c>)
 8008794:	1ba4      	subs	r4, r4, r6
 8008796:	10a4      	asrs	r4, r4, #2
 8008798:	42a5      	cmp	r5, r4
 800879a:	d109      	bne.n	80087b0 <__libc_init_array+0x24>
 800879c:	f000 f922 	bl	80089e4 <_init>
 80087a0:	2500      	movs	r5, #0
 80087a2:	4e0a      	ldr	r6, [pc, #40]	; (80087cc <__libc_init_array+0x40>)
 80087a4:	4c0a      	ldr	r4, [pc, #40]	; (80087d0 <__libc_init_array+0x44>)
 80087a6:	1ba4      	subs	r4, r4, r6
 80087a8:	10a4      	asrs	r4, r4, #2
 80087aa:	42a5      	cmp	r5, r4
 80087ac:	d105      	bne.n	80087ba <__libc_init_array+0x2e>
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087b4:	4798      	blx	r3
 80087b6:	3501      	adds	r5, #1
 80087b8:	e7ee      	b.n	8008798 <__libc_init_array+0xc>
 80087ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087be:	4798      	blx	r3
 80087c0:	3501      	adds	r5, #1
 80087c2:	e7f2      	b.n	80087aa <__libc_init_array+0x1e>
 80087c4:	0800a268 	.word	0x0800a268
 80087c8:	0800a268 	.word	0x0800a268
 80087cc:	0800a268 	.word	0x0800a268
 80087d0:	0800a26c 	.word	0x0800a26c

080087d4 <__itoa>:
 80087d4:	1e93      	subs	r3, r2, #2
 80087d6:	2b22      	cmp	r3, #34	; 0x22
 80087d8:	b510      	push	{r4, lr}
 80087da:	460c      	mov	r4, r1
 80087dc:	d904      	bls.n	80087e8 <__itoa+0x14>
 80087de:	2300      	movs	r3, #0
 80087e0:	461c      	mov	r4, r3
 80087e2:	700b      	strb	r3, [r1, #0]
 80087e4:	4620      	mov	r0, r4
 80087e6:	bd10      	pop	{r4, pc}
 80087e8:	2a0a      	cmp	r2, #10
 80087ea:	d109      	bne.n	8008800 <__itoa+0x2c>
 80087ec:	2800      	cmp	r0, #0
 80087ee:	da07      	bge.n	8008800 <__itoa+0x2c>
 80087f0:	232d      	movs	r3, #45	; 0x2d
 80087f2:	700b      	strb	r3, [r1, #0]
 80087f4:	2101      	movs	r1, #1
 80087f6:	4240      	negs	r0, r0
 80087f8:	4421      	add	r1, r4
 80087fa:	f000 f841 	bl	8008880 <__utoa>
 80087fe:	e7f1      	b.n	80087e4 <__itoa+0x10>
 8008800:	2100      	movs	r1, #0
 8008802:	e7f9      	b.n	80087f8 <__itoa+0x24>

08008804 <itoa>:
 8008804:	f7ff bfe6 	b.w	80087d4 <__itoa>

08008808 <memset>:
 8008808:	4603      	mov	r3, r0
 800880a:	4402      	add	r2, r0
 800880c:	4293      	cmp	r3, r2
 800880e:	d100      	bne.n	8008812 <memset+0xa>
 8008810:	4770      	bx	lr
 8008812:	f803 1b01 	strb.w	r1, [r3], #1
 8008816:	e7f9      	b.n	800880c <memset+0x4>

08008818 <rand>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <rand+0x50>)
 800881c:	681c      	ldr	r4, [r3, #0]
 800881e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008820:	b97b      	cbnz	r3, 8008842 <rand+0x2a>
 8008822:	2018      	movs	r0, #24
 8008824:	f000 f86a 	bl	80088fc <malloc>
 8008828:	4a10      	ldr	r2, [pc, #64]	; (800886c <rand+0x54>)
 800882a:	4b11      	ldr	r3, [pc, #68]	; (8008870 <rand+0x58>)
 800882c:	63a0      	str	r0, [r4, #56]	; 0x38
 800882e:	e9c0 2300 	strd	r2, r3, [r0]
 8008832:	4b10      	ldr	r3, [pc, #64]	; (8008874 <rand+0x5c>)
 8008834:	2201      	movs	r2, #1
 8008836:	6083      	str	r3, [r0, #8]
 8008838:	230b      	movs	r3, #11
 800883a:	8183      	strh	r3, [r0, #12]
 800883c:	2300      	movs	r3, #0
 800883e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008842:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008844:	480c      	ldr	r0, [pc, #48]	; (8008878 <rand+0x60>)
 8008846:	690a      	ldr	r2, [r1, #16]
 8008848:	694b      	ldr	r3, [r1, #20]
 800884a:	4350      	muls	r0, r2
 800884c:	4c0b      	ldr	r4, [pc, #44]	; (800887c <rand+0x64>)
 800884e:	fb04 0003 	mla	r0, r4, r3, r0
 8008852:	fba2 2304 	umull	r2, r3, r2, r4
 8008856:	4403      	add	r3, r0
 8008858:	1c54      	adds	r4, r2, #1
 800885a:	f143 0500 	adc.w	r5, r3, #0
 800885e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8008862:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8008866:	bd38      	pop	{r3, r4, r5, pc}
 8008868:	2000000c 	.word	0x2000000c
 800886c:	abcd330e 	.word	0xabcd330e
 8008870:	e66d1234 	.word	0xe66d1234
 8008874:	0005deec 	.word	0x0005deec
 8008878:	5851f42d 	.word	0x5851f42d
 800887c:	4c957f2d 	.word	0x4c957f2d

08008880 <__utoa>:
 8008880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008882:	b08b      	sub	sp, #44	; 0x2c
 8008884:	4605      	mov	r5, r0
 8008886:	460c      	mov	r4, r1
 8008888:	466e      	mov	r6, sp
 800888a:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <__utoa+0x78>)
 800888c:	f103 0c20 	add.w	ip, r3, #32
 8008890:	4637      	mov	r7, r6
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	6859      	ldr	r1, [r3, #4]
 8008896:	3308      	adds	r3, #8
 8008898:	c703      	stmia	r7!, {r0, r1}
 800889a:	4563      	cmp	r3, ip
 800889c:	463e      	mov	r6, r7
 800889e:	d1f7      	bne.n	8008890 <__utoa+0x10>
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	791b      	ldrb	r3, [r3, #4]
 80088a4:	6038      	str	r0, [r7, #0]
 80088a6:	713b      	strb	r3, [r7, #4]
 80088a8:	1e93      	subs	r3, r2, #2
 80088aa:	2b22      	cmp	r3, #34	; 0x22
 80088ac:	f04f 0300 	mov.w	r3, #0
 80088b0:	d904      	bls.n	80088bc <__utoa+0x3c>
 80088b2:	7023      	strb	r3, [r4, #0]
 80088b4:	461c      	mov	r4, r3
 80088b6:	4620      	mov	r0, r4
 80088b8:	b00b      	add	sp, #44	; 0x2c
 80088ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088bc:	1e66      	subs	r6, r4, #1
 80088be:	fbb5 f0f2 	udiv	r0, r5, r2
 80088c2:	fb02 5510 	mls	r5, r2, r0, r5
 80088c6:	af0a      	add	r7, sp, #40	; 0x28
 80088c8:	443d      	add	r5, r7
 80088ca:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80088ce:	1c59      	adds	r1, r3, #1
 80088d0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80088d4:	4605      	mov	r5, r0
 80088d6:	b968      	cbnz	r0, 80088f4 <__utoa+0x74>
 80088d8:	4622      	mov	r2, r4
 80088da:	5460      	strb	r0, [r4, r1]
 80088dc:	4423      	add	r3, r4
 80088de:	1b19      	subs	r1, r3, r4
 80088e0:	1b10      	subs	r0, r2, r4
 80088e2:	4281      	cmp	r1, r0
 80088e4:	dde7      	ble.n	80088b6 <__utoa+0x36>
 80088e6:	7811      	ldrb	r1, [r2, #0]
 80088e8:	7818      	ldrb	r0, [r3, #0]
 80088ea:	f802 0b01 	strb.w	r0, [r2], #1
 80088ee:	f803 1901 	strb.w	r1, [r3], #-1
 80088f2:	e7f4      	b.n	80088de <__utoa+0x5e>
 80088f4:	460b      	mov	r3, r1
 80088f6:	e7e2      	b.n	80088be <__utoa+0x3e>
 80088f8:	0800a240 	.word	0x0800a240

080088fc <malloc>:
 80088fc:	4b02      	ldr	r3, [pc, #8]	; (8008908 <malloc+0xc>)
 80088fe:	4601      	mov	r1, r0
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	f000 b803 	b.w	800890c <_malloc_r>
 8008906:	bf00      	nop
 8008908:	2000000c 	.word	0x2000000c

0800890c <_malloc_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	1ccd      	adds	r5, r1, #3
 8008910:	f025 0503 	bic.w	r5, r5, #3
 8008914:	3508      	adds	r5, #8
 8008916:	2d0c      	cmp	r5, #12
 8008918:	bf38      	it	cc
 800891a:	250c      	movcc	r5, #12
 800891c:	2d00      	cmp	r5, #0
 800891e:	4606      	mov	r6, r0
 8008920:	db01      	blt.n	8008926 <_malloc_r+0x1a>
 8008922:	42a9      	cmp	r1, r5
 8008924:	d903      	bls.n	800892e <_malloc_r+0x22>
 8008926:	230c      	movs	r3, #12
 8008928:	6033      	str	r3, [r6, #0]
 800892a:	2000      	movs	r0, #0
 800892c:	bd70      	pop	{r4, r5, r6, pc}
 800892e:	f000 f857 	bl	80089e0 <__malloc_lock>
 8008932:	4a21      	ldr	r2, [pc, #132]	; (80089b8 <_malloc_r+0xac>)
 8008934:	6814      	ldr	r4, [r2, #0]
 8008936:	4621      	mov	r1, r4
 8008938:	b991      	cbnz	r1, 8008960 <_malloc_r+0x54>
 800893a:	4c20      	ldr	r4, [pc, #128]	; (80089bc <_malloc_r+0xb0>)
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	b91b      	cbnz	r3, 8008948 <_malloc_r+0x3c>
 8008940:	4630      	mov	r0, r6
 8008942:	f000 f83d 	bl	80089c0 <_sbrk_r>
 8008946:	6020      	str	r0, [r4, #0]
 8008948:	4629      	mov	r1, r5
 800894a:	4630      	mov	r0, r6
 800894c:	f000 f838 	bl	80089c0 <_sbrk_r>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d124      	bne.n	800899e <_malloc_r+0x92>
 8008954:	230c      	movs	r3, #12
 8008956:	4630      	mov	r0, r6
 8008958:	6033      	str	r3, [r6, #0]
 800895a:	f000 f842 	bl	80089e2 <__malloc_unlock>
 800895e:	e7e4      	b.n	800892a <_malloc_r+0x1e>
 8008960:	680b      	ldr	r3, [r1, #0]
 8008962:	1b5b      	subs	r3, r3, r5
 8008964:	d418      	bmi.n	8008998 <_malloc_r+0x8c>
 8008966:	2b0b      	cmp	r3, #11
 8008968:	d90f      	bls.n	800898a <_malloc_r+0x7e>
 800896a:	600b      	str	r3, [r1, #0]
 800896c:	18cc      	adds	r4, r1, r3
 800896e:	50cd      	str	r5, [r1, r3]
 8008970:	4630      	mov	r0, r6
 8008972:	f000 f836 	bl	80089e2 <__malloc_unlock>
 8008976:	f104 000b 	add.w	r0, r4, #11
 800897a:	1d23      	adds	r3, r4, #4
 800897c:	f020 0007 	bic.w	r0, r0, #7
 8008980:	1ac3      	subs	r3, r0, r3
 8008982:	d0d3      	beq.n	800892c <_malloc_r+0x20>
 8008984:	425a      	negs	r2, r3
 8008986:	50e2      	str	r2, [r4, r3]
 8008988:	e7d0      	b.n	800892c <_malloc_r+0x20>
 800898a:	684b      	ldr	r3, [r1, #4]
 800898c:	428c      	cmp	r4, r1
 800898e:	bf16      	itet	ne
 8008990:	6063      	strne	r3, [r4, #4]
 8008992:	6013      	streq	r3, [r2, #0]
 8008994:	460c      	movne	r4, r1
 8008996:	e7eb      	b.n	8008970 <_malloc_r+0x64>
 8008998:	460c      	mov	r4, r1
 800899a:	6849      	ldr	r1, [r1, #4]
 800899c:	e7cc      	b.n	8008938 <_malloc_r+0x2c>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d005      	beq.n	80089b4 <_malloc_r+0xa8>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4630      	mov	r0, r6
 80089ac:	f000 f808 	bl	80089c0 <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d0cf      	beq.n	8008954 <_malloc_r+0x48>
 80089b4:	6025      	str	r5, [r4, #0]
 80089b6:	e7db      	b.n	8008970 <_malloc_r+0x64>
 80089b8:	200000b0 	.word	0x200000b0
 80089bc:	200000b4 	.word	0x200000b4

080089c0 <_sbrk_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	2300      	movs	r3, #0
 80089c4:	4c05      	ldr	r4, [pc, #20]	; (80089dc <_sbrk_r+0x1c>)
 80089c6:	4605      	mov	r5, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	6023      	str	r3, [r4, #0]
 80089cc:	f7ff fe52 	bl	8008674 <_sbrk>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_sbrk_r+0x1a>
 80089d4:	6823      	ldr	r3, [r4, #0]
 80089d6:	b103      	cbz	r3, 80089da <_sbrk_r+0x1a>
 80089d8:	602b      	str	r3, [r5, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200001c4 	.word	0x200001c4

080089e0 <__malloc_lock>:
 80089e0:	4770      	bx	lr

080089e2 <__malloc_unlock>:
 80089e2:	4770      	bx	lr

080089e4 <_init>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr

080089f0 <_fini>:
 80089f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f2:	bf00      	nop
 80089f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089f6:	bc08      	pop	{r3}
 80089f8:	469e      	mov	lr, r3
 80089fa:	4770      	bx	lr
